{"version":3,"file":"tf-backend-cpu.es2017.min.js","sources":["../src/cpu_util.ts","../src/backend_cpu.ts","../src/kernels/Abs.ts","../src/utils/binary_impl.ts","../src/kernels/Complex.ts","../src/utils/zeros_impl.ts","../src/kernels/Identity.ts","../src/kernels/Real.ts","../src/kernels/Cast.ts","../src/utils/binary_utils.ts","../src/kernels/Add.ts","../src/kernels/Bincount_impl.ts","../src/utils/unary_impl.ts","../src/utils/unary_utils.ts","../src/kernels/Ceil.ts","../src/kernels/Exp.ts","../src/kernels/Expm1.ts","../src/kernels/Floor.ts","../src/kernels/GatherV2_impl.ts","../src/kernels/Greater.ts","../src/kernels/Less.ts","../src/kernels/LinSpace_impl.ts","../src/kernels/Log.ts","../src/kernels/Max_impl.ts","../src/kernels/Maximum.ts","../src/kernels/Minimum.ts","../src/kernels/Multiply.ts","../src/kernels/Neg.ts","../src/kernels/NotEqual.ts","../src/kernels/Transpose_impl.ts","../src/kernels/Transpose.ts","../src/kernels/Prod.ts","../src/kernels/Range_impl.ts","../src/kernels/Rsqrt.ts","../src/kernels/Slice.ts","../src/kernels/SquaredDifference.ts","../src/kernels/StridedSlice_impl.ts","../src/kernels/Sub.ts","../src/kernels/Tile_impl.ts","../src/kernels/TopK_impl.ts","../src/kernels/Unique_impl.ts","../src/base.ts","../src/kernels/Elu.ts","../src/kernels/LeakyRelu.ts","../src/kernels/Prelu.ts","../src/kernels/Relu.ts","../src/kernels/Relu6.ts","../src/utils/fused_utils.ts","../src/kernels/Reshape.ts","../src/kernels/BatchMatMul.ts","../src/kernels/_FusedMatMul.ts","../src/kernels/Acos.ts","../src/kernels/Acosh.ts","../src/kernels/AddN.ts","../src/kernels/All.ts","../src/kernels/Any.ts","../src/kernels/ArgMax.ts","../src/kernels/ArgMin.ts","../src/kernels/Asin.ts","../src/kernels/Asinh.ts","../src/kernels/Atan.ts","../src/kernels/Atan2.ts","../src/kernels/Atanh.ts","../src/utils/pool_utils.ts","../src/kernels/AvgPool.ts","../src/kernels/AvgPool3D.ts","../src/kernels/AvgPool3DGrad.ts","../src/kernels/AvgPoolGrad.ts","../src/kernels/BatchNorm.ts","../src/kernels/BatchToSpaceND.ts","../src/kernels/Bincount.ts","../src/kernels/Clip.ts","../src/kernels/ComplexAbs.ts","../src/kernels/Imag.ts","../src/kernels/Concat.ts","../src/kernels/Conv2D.ts","../src/kernels/Conv2DBackpropFilter.ts","../src/kernels/Conv2DBackpropInput.ts","../src/kernels/Conv3D.ts","../src/kernels/Conv3DBackpropFilterV2.ts","../src/kernels/Conv3DBackpropInputV2.ts","../src/kernels/Cos.ts","../src/kernels/Cosh.ts","../src/kernels/CropAndResize.ts","../src/kernels/Cumsum.ts","../src/kernels/DenseBincount.ts","../src/kernels/DepthToSpace.ts","../src/kernels/DepthwiseConv2dNative.ts","../src/kernels/DepthwiseConv2dNativeBackpropFilter.ts","../src/kernels/DepthwiseConv2dNativeBackpropInput.ts","../src/kernels/Diag.ts","../src/kernels/Dilation2D.ts","../src/kernels/Dilation2DBackpropFilter.ts","../src/kernels/Dilation2DBackpropInput.ts","../src/kernels/EluGrad.ts","../src/kernels/Equal.ts","../src/kernels/Erf.ts","../src/kernels/ExpandDims.ts","../src/kernels/RealDiv.ts","../src/utils/fft_utils.ts","../src/kernels/FFT.ts","../src/kernels/Fill.ts","../src/kernels/FlipLeftRight.ts","../src/kernels/FloorDiv.ts","../src/kernels/FusedConv2D.ts","../src/kernels/FusedDepthwiseConv2D.ts","../src/kernels/GatherNd.ts","../src/kernels/GatherV2.ts","../src/kernels/GreaterEqual.ts","../src/kernels/IFFT.ts","../src/kernels/IsFinite.ts","../src/kernels/IsInf.ts","../src/kernels/IsNaN.ts","../src/kernels/LessEqual.ts","../src/kernels/LinSpace.ts","../src/kernels/Log1p.ts","../src/kernels/LogicalAnd.ts","../src/kernels/LogicalNot.ts","../src/kernels/LogicalOr.ts","../src/kernels/LRN.ts","../src/kernels/LRNGrad.ts","../src/kernels/Max.ts","../src/kernels/MaxPool.ts","../src/kernels/MaxPool3D.ts","../src/kernels/MaxPool3DGrad.ts","../src/kernels/MaxPoolGrad.ts","../src/kernels/MaxPoolWithArgmax.ts","../src/kernels/MaxPoolWithArgmax_impl.ts","../src/kernels/Sum.ts","../src/kernels/Mean.ts","../src/kernels/Min.ts","../src/kernels/MirrorPad.ts","../src/kernels/Mod.ts","../src/kernels/Softmax.ts","../src/kernels/Multinomial.ts","../src/kernels/NonMaxSuppressionV3.ts","../src/kernels/NonMaxSuppressionV4.ts","../src/kernels/NonMaxSuppressionV5.ts","../src/kernels/OneHot.ts","../src/kernels/ZerosLike.ts","../src/kernels/OnesLike.ts","../src/kernels/Pack.ts","../src/kernels/PadV2.ts","../src/kernels/Pow.ts","../src/kernels/Range.ts","../src/kernels/Reciprocal.ts","../src/kernels/ResizeBilinear.ts","../src/kernels/ResizeBilinearGrad.ts","../src/kernels/ResizeNearestNeighbor.ts","../src/kernels/ResizeNearestNeighborGrad.ts","../src/kernels/Reverse.ts","../src/kernels/RotateWithOffset.ts","../src/kernels/Round.ts","../src/kernels/Scatter_impl.ts","../src/kernels/ScatterNd.ts","../src/kernels/Select.ts","../src/kernels/Selu.ts","../src/kernels/Sigmoid.ts","../src/kernels/Sign.ts","../src/kernels/Sin.ts","../src/kernels/Sinh.ts","../src/kernels/Softplus.ts","../src/kernels/SpaceToBatchND.ts","../src/kernels/SparseToDense.ts","../src/kernels/SplitV.ts","../src/kernels/Sqrt.ts","../src/kernels/Square.ts","../src/kernels/Step.ts","../src/kernels/StridedSlice.ts","../src/kernels/Tan.ts","../src/kernels/Tanh.ts","../src/kernels/Tile.ts","../src/kernels/TopK.ts","../src/kernels/Unique.ts","../src/kernels/Unpack.ts","../src/kernels/UnsortedSegmentSum.ts","../src/register_all_kernels.ts","../src/version.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nexport function assertNotComplex(\n    tensor: TensorInfo|TensorInfo[], opName: string): void {\n  if (!Array.isArray(tensor)) {\n    tensor = [tensor];\n  }\n  tensor.forEach(t => {\n    if (t != null) {\n      util.assert(\n          t.dtype !== 'complex64',\n          () => `${\n              opName} does not support complex64 tensors in the CPU backend.`);\n    }\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendTimingInfo, buffer, DataStorage, DataType, DataValues, engine, env, kernel_impls, KernelBackend, Rank, ShapeMap, Tensor, Tensor2D, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nconst whereImpl = kernel_impls.whereImpl;\nimport {assertNotComplex} from './cpu_util';\n\ninterface DataId {}\n\nexport interface TensorData<D extends DataType> {\n  values?: backend_util.BackendValues;\n  dtype: D;\n  // For complex numbers, the real and imaginary parts are stored as their own\n  // individual tensors, with a parent joining the two with the\n  // complexTensorInfos field.\n  complexTensorInfos?: {real: TensorInfo, imag: TensorInfo};\n  // refCount keeps track of how many tensors reference it. Used for memory\n  // management.\n  refCount: number;\n}\n\nexport class MathBackendCPU extends KernelBackend {\n  public blockSize = 48;\n\n  data: DataStorage<TensorData<DataType>>;\n  private firstUse = true;\n\n  constructor() {\n    super();\n    this.data = new DataStorage(this, engine());\n  }\n\n  write(values: backend_util.BackendValues, shape: number[], dtype: DataType):\n      DataId {\n    if (this.firstUse) {\n      this.firstUse = false;\n      if (env().get('IS_NODE')) {\n        backend_util.warn(\n            '\\n============================\\n' +\n            'Hi there ðŸ‘‹. Looks like you are running TensorFlow.js in ' +\n            'Node.js. To speed things up dramatically, install our node ' +\n            'backend, which binds to TensorFlow C++, by running ' +\n            'npm i @tensorflow/tfjs-node, ' +\n            'or npm i @tensorflow/tfjs-node-gpu if you have CUDA. ' +\n            'Then call require(\\'@tensorflow/tfjs-node\\'); (-gpu ' +\n            'suffix for CUDA) at the start of your program. ' +\n            'Visit https://github.com/tensorflow/tfjs-node for more details.' +\n            '\\n============================');\n      }\n    }\n    const dataId = {};\n\n    this.data.set(dataId, {values, dtype, refCount: 1});\n\n    return dataId;\n  }\n\n  /**\n   * Create a data bucket in cpu backend.\n   * @param shape Shape of the `TensorInfo`.\n   * @param dtype DType of the `TensorInfo`.\n   * @param values The value of the `TensorInfo` stored as a flattened array.\n   */\n  makeTensorInfo(\n      shape: number[], dtype: DataType,\n      values?: backend_util.BackendValues|string[]): TensorInfo {\n    let outId;\n    if (dtype === 'string' && values != null && values.length > 0 &&\n        util.isString(values[0])) {\n      const encodedValues =\n          (values as {} as string[]).map(d => util.encodeString(d));\n\n      outId = this.write(encodedValues, shape, dtype);\n    } else {\n      outId = this.write(values as TypedArray, shape, dtype);\n    }\n\n    return {dataId: outId, shape, dtype};\n  }\n\n  /** Increase refCount of a `TensorData`. */\n  incRef(dataId: DataId): void {\n    const tensorData = this.data.get(dataId);\n    tensorData.refCount++;\n  }\n\n  /** Decrease refCount of a `TensorData`. */\n  decRef(dataId: DataId): void {\n    if (this.data.has(dataId)) {\n      const tensorData = this.data.get(dataId);\n      tensorData.refCount--;\n    }\n  }\n\n  move(\n      dataId: DataId, values: backend_util.BackendValues, shape: number[],\n      dtype: DataType): void {\n    this.data.set(dataId, {values, dtype, refCount: 1});\n  }\n\n  numDataIds(): number {\n    return this.data.numDataIds();\n  }\n\n  async read(dataId: DataId): Promise<backend_util.BackendValues> {\n    return this.readSync(dataId);\n  }\n  readSync(dataId: DataId): backend_util.BackendValues {\n    const {dtype, complexTensorInfos} = this.data.get(dataId);\n\n    if (dtype === 'complex64') {\n      const realValues =\n          this.readSync(complexTensorInfos.real.dataId) as Float32Array;\n      const imagValues =\n          this.readSync(complexTensorInfos.imag.dataId) as Float32Array;\n      return backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    }\n\n    return this.data.get(dataId).values;\n  }\n\n  bufferSync<R extends Rank>(t: TensorInfo): TensorBuffer<R> {\n    const data = this.readSync(t.dataId);\n    let decodedData = data as DataValues;\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        decodedData = (data as Uint8Array[]).map(d => util.decodeString(d));\n      } catch {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return buffer(t.shape as ShapeMap[R], t.dtype, decodedData) as\n        TensorBuffer<R>;\n  }\n\n  makeOutput<T extends Tensor>(\n      values: backend_util.BackendValues, shape: number[], dtype: DataType): T {\n    const dataId = this.write(values, shape, dtype);\n    return engine().makeTensorFromDataId(dataId, shape, dtype, this) as T;\n  }\n\n  disposeData(dataId: DataId): void {\n    if (this.data.has(dataId)) {\n      const {complexTensorInfos} = this.data.get(dataId);\n\n      if (complexTensorInfos != null) {\n        this.disposeData(complexTensorInfos.real.dataId);\n        this.disposeData(complexTensorInfos.imag.dataId);\n      }\n\n      this.data.delete(dataId);\n    }\n  }\n\n  disposeIntermediateTensorInfo(tensorInfo: TensorInfo): void {\n    const dataId = tensorInfo.dataId;\n\n    if (this.data.has(dataId)) {\n      const tensorData = this.data.get(dataId);\n\n      tensorData.refCount--;\n\n      if (tensorData.refCount < 1) {\n        this.disposeData(dataId);\n      }\n    }\n  }\n\n  async time(f: () => void): Promise<BackendTimingInfo> {\n    const start = util.now();\n    f();\n    const kernelMs = util.now() - start;\n    return {kernelMs};\n  }\n\n  memory() {\n    return {\n      // Unreliable due to automatic gc. The numbers above are cumulative.\n      unreliable: true,\n      reasons:\n          ['The reported memory is an upper bound. Due to automatic garbage ' +\n           'collection, the true allocated memory may be less.']\n    };\n  }\n\n  where(condition: Tensor): Tensor2D {\n    assertNotComplex([condition], 'where');\n\n    const condVals = this.readSync(condition.dataId) as TypedArray;\n    return whereImpl(condition.shape, condVals);\n  }\n\n  dispose() {}\n\n  floatPrecision(): 16|32 {\n    return 32;\n  }\n\n  /** Returns the smallest representable number.  */\n  epsilon(): number {\n    return super.epsilon();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Abs, AbsInputs, KernelConfig, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function simpleAbsImpl(vals: TypedArray): Float32Array {\n  const resultValues = new Float32Array(vals.length);\n  for (let i = 0; i < vals.length; ++i) {\n    resultValues[i] = Math.abs(vals[i]);\n  }\n  return resultValues;\n}\n\nexport const abs = (args: {inputs: AbsInputs, backend: MathBackendCPU}) => {\n  const {x} = args.inputs;\n  const cpuBackend = args.backend;\n\n  assertNotComplex(x, 'abs');\n\n  let resultValues = new Float32Array(util.sizeFromShape(x.shape));\n  const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n  resultValues = simpleAbsImpl(values);\n\n  return cpuBackend.makeOutput(resultValues, x.shape, 'float32');\n};\n\nexport const absConfig: KernelConfig = {\n  kernelName: Abs,\n  backendName: 'cpu',\n  kernelFunc: abs as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleBinaryKernelImpl, SimpleBinaryOperation} from './binary_types';\n\n/**\n * Template that creates implementation for binary ops. Supports broadcast.\n */\nexport function createSimpleBinaryKernelImpl(op: SimpleBinaryOperation):\n    SimpleBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aVals: TypedArray,\n          bVals: TypedArray, dtype: DataType): [TypedArray, number[]] => {\n    const newShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n\n    const resultRank = newShape.length;\n    const resultStrides = util.computeStrides(newShape);\n    const resultSize = util.sizeFromShape(newShape);\n\n    const result =\n        util.getTypedArrayFromDType(dtype as NumericDataType, resultSize);\n\n    const aRank = aShape.length;\n    const bRank = bShape.length;\n\n    const aStrides = util.computeStrides(aShape);\n    const bStrides = util.computeStrides(bShape);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, newShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, newShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < result.length; ++i) {\n        result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n      }\n    } else {\n      for (let i = 0; i < result.length; ++i) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        result[i] = op(aVals[aIndex], bVals[bIndex]);\n      }\n    }\n\n    return [result, newShape];\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Complex, ComplexInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function complex(args: {inputs: ComplexInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {real, imag} = inputs;\n\n  const realVals = backend.data.get(real.dataId).values as TypedArray;\n  const imagVals = backend.data.get(imag.dataId).values as TypedArray;\n\n  const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n\n  const complex = backend.data.get(complexInfo.dataId);\n\n  // The complex tensor owns the underlying real and imag tensorInfos, only the\n  // complex tensor tracks refCount, when complexData is disposed the\n  // underlying tensorData will be disposed.\n  complex.complexTensorInfos = {\n    real: backend.makeTensorInfo(real.shape, 'float32', realVals),\n    imag: backend.makeTensorInfo(imag.shape, 'float32', imagVals)\n  };\n\n  return complexInfo;\n}\n\nexport const complexConfig: KernelConfig = {\n  kernelName: Complex,\n  backendName: 'cpu',\n  kernelFunc: complex as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TensorInfo, util} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {complex} from '../kernels/Complex';\n\n/**\n * Generates a tensorInfo with all zeros value.\n * @param backend cpu backend.\n * @param shape Shape for the zeros tensor.\n * @param dtype Optional. If set, the result has this dtype.\n */\nexport function zeros(\n    backend: MathBackendCPU, shape: number[],\n    dtype: DataType = 'float32'): TensorInfo {\n  if (dtype === 'complex64') {\n    const real = zeros(backend, shape, 'float32');\n    const imag = zeros(backend, shape, 'float32');\n\n    return complex({inputs: {real, imag}, backend});\n  }\n\n  const values = util.makeZerosTypedArray(util.sizeFromShape(shape), dtype);\n\n  return backend.makeTensorInfo(shape, dtype, values);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Identity, IdentityInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function identity(\n    args: {inputs: IdentityInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  backend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape: x.shape, dtype: x.dtype};\n}\n\nexport const identityConfig: KernelConfig = {\n  kernelName: Identity,\n  backendName: 'cpu',\n  kernelFunc: identity as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Real, RealInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function real(args: {inputs: RealInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const real = backend.data.get(input.dataId).complexTensorInfos.real;\n  const realVal = backend.data.get(real.dataId).values;\n\n  // When complex tensor is disposed, its underlying parts will be disposed too.\n  // Make new tensor out of the real value of the complex. This makes sure the\n  // value is still accessible even if complex tensor is disposed.\n  return backend.makeTensorInfo(real.shape, real.dtype, realVal);\n}\n\nexport const realConfig: KernelConfig = {\n  kernelName: Real,\n  backendName: 'cpu',\n  kernelFunc: real as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Cast, CastAttrs, CastInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {zeros} from '../utils/zeros_impl';\n\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {real} from './Real';\n\nexport function cast(\n    args: {inputs: CastInputs, backend: MathBackendCPU, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    const zerosTensorInfo = zeros(backend, x.shape, x.dtype);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensorInfo}, backend});\n\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    backend.disposeIntermediateTensorInfo(floatX);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  if (dtype === 'int32') {\n    const values = backend.data.get(x.dataId).values as TypedArray;\n    const resultValues = Int32Array.from(values);\n    return backend.makeTensorInfo(x.shape, 'int32', resultValues);\n  }\n\n  if (dtype === 'bool') {\n    // This is essentially the result of notEqual(x, 0). We avoid using\n    // kernel notEqual to avoid circular dependency, i.e. binary_utils ->\n    // cast -> notEqual -> binary_utils.\n    const xVals = backend.data.get(x.dataId).values as TypedArray;\n    const zero = util.toTypedArray([0], x.dtype);\n\n    const [resultData, resultShape] = createSimpleBinaryKernelImpl(\n        (a, b) => (a !== b) ? 1 : 0)(x.shape, [], xVals, zero, 'bool');\n\n    return backend.makeTensorInfo(resultShape, 'bool', resultData);\n  }\n\n  throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'cpu',\n  kernelFunc: cast as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, DataType, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {cast} from '../kernels/Cast';\nimport {complex} from '../kernels/Complex';\n\nimport {ComplexBinaryKernelImpl, ComplexBinaryOperation, SimpleBinaryKernelImpl} from './binary_types';\n\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param name Kernel name.\n * @param binaryKernelImpl A `SimpleBinaryKernelImpl` for the kernel.\n * @param binaryKernelComplexImpl Optional. If exists, represents a\n *     `ComplexBinaryKernelImpl` for the kernel, will be used when input dtype\n *     is `complex64`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc(\n    name: string, simpleImpl: SimpleBinaryKernelImpl,\n    complexImpl?: ComplexBinaryKernelImpl, dtype?: DataType): KernelFunc {\n  if (complexImpl == null) {\n    return ({inputs, backend}) => {\n      const {a, b} = inputs as BinaryInputs;\n      const cpuBackend = backend as MathBackendCPU;\n\n      assertNotComplex([a, b], name);\n\n      const aVals = cpuBackend.data.get(a.dataId).values as TypedArray;\n      const bVals = cpuBackend.data.get(b.dataId).values as TypedArray;\n\n      const $dtype = dtype || a.dtype;\n\n      const [resultData, resultShape] =\n          simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);\n\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    };\n  }\n\n  return ({inputs, backend}) => {\n    const {a, b} = inputs as BinaryInputs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n      const $aComplex = cast(\n          {inputs: {x: a}, backend: cpuBackend, attrs: {dtype: 'complex64'}});\n\n      const $aComplexVals = cpuBackend.data.get($aComplex.dataId);\n\n      const aReal = $aComplexVals.complexTensorInfos.real;\n      const aImag = $aComplexVals.complexTensorInfos.imag;\n\n      const aRealVals =\n          cpuBackend.data.get(aReal.dataId).values as Float32Array;\n      const aImagVals =\n          cpuBackend.data.get(aImag.dataId).values as Float32Array;\n\n      const $bComplex = cast(\n          {inputs: {x: b}, backend: cpuBackend, attrs: {dtype: 'complex64'}});\n\n      const $bComplexVals = cpuBackend.data.get($bComplex.dataId);\n\n      const bReal = $bComplexVals.complexTensorInfos.real;\n      const bImag = $bComplexVals.complexTensorInfos.imag;\n\n      const bRealVals =\n          cpuBackend.data.get(bReal.dataId).values as Float32Array;\n      const bImagVals =\n          cpuBackend.data.get(bImag.dataId).values as Float32Array;\n\n      const [resultRealData, resultImagData, resultShape] = complexImpl(\n          a.shape, b.shape, aRealVals, aImagVals, bRealVals, bImagVals);\n\n      const resultReal =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', resultRealData);\n\n      const resultImag =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', resultImagData);\n\n      const result = complex(\n          {inputs: {real: resultReal, imag: resultImag}, backend: cpuBackend});\n\n      cpuBackend.disposeIntermediateTensorInfo($aComplex);\n      cpuBackend.disposeIntermediateTensorInfo($bComplex);\n      cpuBackend.disposeIntermediateTensorInfo(resultReal);\n      cpuBackend.disposeIntermediateTensorInfo(resultImag);\n\n      return result;\n    } else {\n      const aVals = cpuBackend.data.get(a.dataId).values as TypedArray;\n      const bVals = cpuBackend.data.get(b.dataId).values as TypedArray;\n\n      const $dtype = dtype || a.dtype;\n\n      const [resultData, resultShape] =\n          simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);\n\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    }\n  };\n}\n\n/**\n * Template that creates the complex type implementation for binary ops.\n * Supports broadcast.\n */\nexport function createComplexBinaryKernelImpl(op: ComplexBinaryOperation):\n    ComplexBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aRealVals: Float32Array,\n          aImagVals: Float32Array, bRealVals: Float32Array,\n          bImagVals: Float32Array): [TypedArray, TypedArray, number[]] => {\n    const resultShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    const resultSize = util.sizeFromShape(resultShape);\n    const resultRank = resultShape.length;\n    const resultStrides = util.computeStrides(resultShape);\n\n    const resultRealVals = util.getTypedArrayFromDType('float32', resultSize);\n    const resultImagVals = util.getTypedArrayFromDType('float32', resultSize);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, resultShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, resultShape);\n\n    const aVals = backend_util.mergeRealAndImagArrays(aRealVals, aImagVals);\n    const bVals = backend_util.mergeRealAndImagArrays(bRealVals, bImagVals);\n\n    const aRank = aShape.length;\n    const aStrides = util.computeStrides(aShape);\n\n    const bRank = bShape.length;\n    const bStrides = util.computeStrides(bShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const aIdx = i % aVals.length;\n        const bIdx = i % bVals.length;\n\n        const result =\n            op(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2],\n               bVals[bIdx * 2 + 1]);\n\n        resultRealVals[i] = result.real;\n        resultImagVals[i] = result.imag;\n      }\n    } else {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        const opResult =\n            op(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2],\n               bVals[bIndex * 2 + 1]);\n\n        resultRealVals[i] = opResult.real;\n        resultImagVals[i] = opResult.imag;\n      }\n    }\n    return [resultRealVals, resultImagVals, resultShape];\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Add, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const addImpl = createSimpleBinaryKernelImpl(((a, b) => a + b));\nexport const addComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal + bReal, imag: aImag + bImag};\n    }));\n\nexport const add = binaryKernelFunc(Add, addImpl, addComplexImpl);\n\nexport const addConfig: KernelConfig = {\n  kernelName: Add,\n  backendName: 'cpu',\n  kernelFunc: add\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function bincountImpl(\n    xVals: TypedArray, weightsVals: TypedArray, weightsDtype: DataType,\n    weightsShape: number[], size: number): TypedArray {\n  const weightsSize = util.sizeFromShape(weightsShape);\n  const outVals = util.makeZerosTypedArray(size, weightsDtype) as TypedArray;\n\n  for (let i = 0; i < xVals.length; i++) {\n    const value = xVals[i];\n    if (value < 0) {\n      throw new Error('Input x must be non-negative!');\n    }\n\n    if (value >= size) {\n      continue;\n    }\n\n    if (weightsSize > 0) {\n      outVals[value] += weightsVals[i];\n    } else {\n      outVals[value] += 1;\n    }\n  }\n\n  return outVals;\n}\n\nexport function bincountReduceImpl<R extends Rank>(\n    xBuf: TensorBuffer<R>, weightsBuf: TensorBuffer<R>, size: number,\n    binaryOutput = false): TensorBuffer<R> {\n  const numRows = xBuf.shape[0];\n  const numCols = xBuf.shape[1];\n\n  const outBuf = buffer([numRows, size], weightsBuf.dtype);\n\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      const value = xBuf.get(i, j);\n      if (value < 0) {\n        throw new Error('Input x must be non-negative!');\n      }\n\n      if (value >= size) {\n        continue;\n      }\n\n      if (binaryOutput) {\n        outBuf.set(1, i, value);\n      } else {\n        if (weightsBuf.size > 0) {\n          outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);\n        } else {\n          outBuf.set(outBuf.get(i, value) + 1, i, value);\n        }\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NumericDataType, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates implementation for unary op.\n */\nexport function createSimpleUnaryImpl(op: SimpleUnaryOperation):\n    SimpleUnaryImpl {\n  return (values, dtype, attrs) => {\n    const newValues =\n        util.getTypedArrayFromDType(dtype as NumericDataType, values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n    return newValues;\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelFunc, TypedArray, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param name Kernel name.\n * @param op A `SimpleUnaryOperation` for the kernel.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFunc(\n    name: string, op: SimpleUnaryOperation, dtype?: DataType): KernelFunc {\n  return ({inputs, attrs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    assertNotComplex(x, name);\n    if (x.dtype === 'string' || dtype === 'string') {\n      throw new Error('unaryKernelFunc does not support string input/output');\n    }\n\n    const cpuBackend = backend as MathBackendCPU;\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const xSize = util.sizeFromShape(x.shape);\n    const $dtype = dtype || x.dtype;\n    const newValues = util.getArrayFromDType($dtype, xSize);\n    for (let i = 0; i < xSize; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}\n\n/**\n * Template that creates a `KernelFunc` for unary ops from the given\n * `SimpleUnaryImpl`..\n * @param name Kernel name.\n * @param unaryImpl A `SimpleUnaryImpl` that implements the op.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFuncFromImpl(\n    name: string, unaryImpl: SimpleUnaryImpl, dtype?: DataType): KernelFunc {\n  return ({inputs, attrs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    assertNotComplex(x, name);\n    if (x.dtype === 'string' || dtype === 'string') {\n      throw new Error('unaryKernelFunc does not support string input/output');\n    }\n\n    const cpuBackend = backend as MathBackendCPU;\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const $dtype = dtype || x.dtype;\n    const newValues = unaryImpl(values, $dtype, attrs);\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Ceil, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const ceilImpl = createSimpleUnaryImpl((xi) => Math.ceil(xi));\nexport const ceil = unaryKernelFuncFromImpl(Ceil, ceilImpl);\n\nexport const ceilConfig: KernelConfig = {\n  kernelName: Ceil,\n  backendName: 'cpu',\n  kernelFunc: ceil,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Exp, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expImpl = createSimpleUnaryImpl((xi) => Math.exp(xi));\nexport const exp = unaryKernelFuncFromImpl(Exp, expImpl);\n\nexport const expConfig: KernelConfig = {\n  kernelName: Exp,\n  backendName: 'cpu',\n  kernelFunc: exp,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Expm1, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expm1Impl = createSimpleUnaryImpl((xi) => Math.expm1(xi));\nexport const expm1 = unaryKernelFuncFromImpl(Expm1, expm1Impl);\n\nexport const expm1Config: KernelConfig = {\n  kernelName: Expm1,\n  backendName: 'cpu',\n  kernelFunc: expm1,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Floor, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const floorImpl = createSimpleUnaryImpl((xi) => Math.floor(xi));\nexport const floor = unaryKernelFuncFromImpl(Floor, floorImpl);\n\nexport const floorConfig: KernelConfig = {\n  kernelName: Floor,\n  backendName: 'cpu',\n  kernelFunc: floor,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function gatherV2Impl<R extends Rank, D extends DataType>(\n    xBuf: TensorBuffer<R, D>, indicesBuf: TensorBuffer<R, D>,\n    flattenOutputShape: number[]): TensorBuffer<R, D> {\n  const outBuf = buffer(flattenOutputShape, xBuf.dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const newLoc = outBuf.indexToLoc(i);\n\n    const originalLoc: number[] = newLoc.slice();\n    const batchIdx = originalLoc[0];\n    const indicesIdx = originalLoc[2];\n    const indicesIndex = indicesBuf.locToIndex([batchIdx, indicesIdx]);\n    originalLoc[2] = indicesBuf.values[indicesIndex] as number;\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n    outBuf.values[i] = xBuf.values[originalIndex];\n  }\n\n  return outBuf as TensorBuffer<R, D>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Greater, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a > b) ? 1 : 0);\nexport const greater =\n    binaryKernelFunc(Greater, greaterImpl, null /* complexImpl */, 'bool');\n\nexport const greaterConfig: KernelConfig = {\n  kernelName: Greater,\n  backendName: 'cpu',\n  kernelFunc: greater\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Less} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a < b) ? 1 : 0);\nexport const less =\n    binaryKernelFunc(Less, lessImpl, null /* complexImpl */, 'bool');\n\nexport const lessConfig: KernelConfig = {\n  kernelName: Less,\n  backendName: 'cpu',\n  kernelFunc: less\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function linSpaceImpl(\n    start: number, stop: number, num: number): TypedArray {\n  const step = (stop - start) / (num - 1);\n\n  const values = util.makeZerosTypedArray(num, 'float32');\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const logImpl = createSimpleUnaryImpl((xi) => Math.log(xi));\nexport const log = unaryKernelFuncFromImpl(Log, logImpl);\n\nexport const logConfig: KernelConfig = {\n  kernelName: Log,\n  backendName: 'cpu',\n  kernelFunc: log,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function maxImpl(\n    aVals: TypedArray, reduceSize: number, outShape: number[],\n    dtype: DataType): TypedArray {\n  const vals = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(outShape));\n\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (value > max) {\n        max = value;\n      }\n    }\n    vals[i] = max;\n  }\n  return vals;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Maximum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const maximumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.max(aValue, bValue)));\nexport const maximum = binaryKernelFunc(Maximum, maximumImpl);\n\nexport const maximumConfig: KernelConfig = {\n  kernelName: Maximum,\n  backendName: 'cpu',\n  kernelFunc: maximum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Minimum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const minimumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.min(aValue, bValue)));\nexport const minimum = binaryKernelFunc(Minimum, minimumImpl);\n\nexport const minimumConfig: KernelConfig = {\n  kernelName: Minimum,\n  backendName: 'cpu',\n  kernelFunc: minimum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Multiply} from '@tensorflow/tfjs-core';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const multiplyImpl =\n    createSimpleBinaryKernelImpl(((aValue, bValue) => aValue * bValue));\nexport const multiplyComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {\n        real: aReal * bReal - aImag * bImag,\n        imag: aReal * bImag + aImag * bReal\n      };\n    }));\n\nexport const multiply =\n    binaryKernelFunc(Multiply, multiplyImpl, multiplyComplexImpl);\n\nexport const multiplyConfig: KernelConfig = {\n  kernelName: Multiply,\n  backendName: 'cpu',\n  kernelFunc: multiply\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelConfig, KernelFunc, Neg, TensorInfo, TypedArray, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {multiplyImpl} from './Multiply';\n\nexport function negImpl(xVals: TypedArray, xShape: number[], xDtype: DataType):\n    [TypedArray, number[]] {\n  const minusOne =\n      util.createScalarValue(-1 as {} as 'float32', xDtype) as TypedArray;\n  return multiplyImpl([], xShape, minusOne, xVals, xDtype);\n}\n\nexport function neg(args: {inputs: UnaryInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  assertNotComplex(x, 'neg');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const [res, newShape] = negImpl(xVals, x.shape, x.dtype);\n\n  return backend.makeTensorInfo(newShape, x.dtype, res);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'cpu',\n  kernelFunc: neg as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NotEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const notEqualImpl =\n    createSimpleBinaryKernelImpl(((a, b) => (a !== b) ? 1 : 0));\nexport const notEqual =\n    binaryKernelFunc(NotEqual, notEqualImpl, null /* complexOp */, 'bool');\n\nexport const notEqualConfig: KernelConfig = {\n  kernelName: NotEqual,\n  backendName: 'cpu',\n  kernelFunc: notEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {util} from '@tensorflow/tfjs-core';\n\nexport function transposeImpl(\n    xVals: TypedArray, xShape: number[], dtype: DataType, perm: number[],\n    newShape: number[]): TypedArray {\n  const xRank = xShape.length;\n  const xSize = util.sizeFromShape(xShape);\n  const xStrides = util.computeStrides(xShape);\n  const newStrides = util.computeStrides(newShape);\n\n  const result = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(newShape));\n\n  for (let i = 0; i < xSize; ++i) {\n    const loc = util.indexToLoc(i, xRank, xStrides);\n\n    // Permute location.\n    const newLoc: number[] = new Array(loc.length);\n    for (let i = 0; i < newLoc.length; i++) {\n      newLoc[i] = loc[perm[i]];\n    }\n\n    const newIndex = util.locToIndex(newLoc, xRank, newStrides);\n    result[newIndex] = xVals[i];\n  }\n  return result;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transpose, TransposeAttrs, TransposeInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {transposeImpl} from './Transpose_impl';\n\nexport function transpose(args: {\n  inputs: TransposeInputs,\n  attrs: TransposeAttrs,\n  backend: MathBackendCPU\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {x} = inputs;\n  const {perm} = attrs;\n\n  assertNotComplex(x, 'transpose');\n\n  const xRank = x.shape.length;\n\n  const newShape: number[] = new Array(xRank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n\n  const values = backend.data.get(x.dataId).values as TypedArray;\n  const result = transposeImpl(values, x.shape, x.dtype, perm, newShape);\n\n  const dataId = backend.write(result, newShape, x.dtype);\n  return {dataId, shape: newShape, dtype: x.dtype};\n}\n\nexport const transposeConfig: KernelConfig = {\n  kernelName: Transpose,\n  backendName: 'cpu',\n  kernelFunc: transpose as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function prodImpl(\n    xShape: number[], xDtype: DataType, xVals: TypedArray,\n    reductionAxes: number[]):\n    {outVals: TypedArray, outShape: number[], outDtype: DataType} {\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(xShape, reductionAxes);\n  const outDtype = upcastType(xDtype, 'int32');\n  const outVals = util.makeZerosTypedArray(\n                      util.sizeFromShape(outShape), outDtype) as TypedArray;\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  for (let i = 0; i < outVals.length; ++i) {\n    const offset = i * reduceSize;\n    let prod = 1;\n    for (let j = 0; j < reduceSize; ++j) {\n      prod *= xVals[offset + j];\n    }\n    outVals[i] = prod;\n  }\n\n  return {outVals, outShape, outDtype};\n}\n\nexport function prod(\n    args: {inputs: ProdInputs, backend: MathBackendCPU, attrs: ProdAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'prod');\n\n  const xRank = x.shape.length;\n  const axes = util.parseAxisParam(axis, x.shape);\n\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n  let reductionAxes = axes;\n  let permutedX = x;\n  const intermediateTensorInfos = [];\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n    intermediateTensorInfos.push(permutedX);\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  const xVals = backend.data.get(permutedX.dataId).values as TypedArray;\n  const {outVals, outShape, outDtype} =\n      prodImpl(permutedX.shape, permutedX.dtype, xVals, reductionAxes);\n\n  let resultShape = outShape;\n  if (keepDims) {\n    resultShape = backend_util.expandShapeToKeepDim(outShape, axes);\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(resultShape, outDtype, outVals);\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'cpu',\n  kernelFunc: prod as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataTypeMap, util} from '@tensorflow/tfjs-core';\n\nexport function rangeImpl(\n    start: number, stop: number, step: number,\n    dtype: 'float32'|'int32'): DataTypeMap['float32' | 'int32'] {\n  const sameStartStop = start === stop;\n  const increasingRangeNegativeStep = start < stop && step < 0;\n  const decreasingRangePositiveStep = stop < start && step > 1;\n\n  if (sameStartStop || increasingRangeNegativeStep ||\n      decreasingRangePositiveStep) {\n    return util.makeZerosTypedArray(0, dtype);\n  }\n\n  const numElements = Math.abs(Math.ceil((stop - start) / step));\n  const values = util.makeZerosTypedArray(numElements, dtype);\n\n  if (stop < start && step === 1) {\n    // Auto adjust the step's sign if it hasn't been set\n    // (or was set to 1)\n    step = -1;\n  }\n\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Rsqrt} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const rsqrtImpl = createSimpleUnaryImpl((xi) => 1 / Math.sqrt(xi));\nexport const rsqrt = unaryKernelFuncFromImpl(Rsqrt, rsqrtImpl);\n\nexport const rsqrtConfig: KernelConfig = {\n  kernelName: Rsqrt,\n  backendName: 'cpu',\n  kernelFunc: rsqrt,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, buffer, DataType, KernelConfig, KernelFunc, Slice, slice_util, SliceAttrs, SliceInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function sliceImpl(\n    vals: BackendValues, begin: number[], size: number[], shape: number[],\n    dtype: DataType): BackendValues {\n  const isContinous = slice_util.isSliceContinous(shape, begin, size);\n  const length = util.sizeFromShape(size);\n  const xStrides = util.computeStrides(shape);\n\n  if (isContinous) {\n    const flatOffset = slice_util.computeFlatOffset(begin, xStrides);\n\n    if (dtype === 'string') {\n      return (vals as Uint8Array[]).slice(flatOffset, flatOffset + length);\n    }\n\n    return (vals as TypedArray).subarray(flatOffset, flatOffset + length);\n  }\n\n  const decodedData = dtype === 'string' ?\n      backend_util.fromUint8ToStringArray(vals as Uint8Array[]) :\n      vals as TypedArray;\n\n  const inBuf = buffer(shape, dtype, decodedData);\n  const outBuf = buffer(size, dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.map((idx: number, j) => idx + begin[j]);\n    outBuf.set(inBuf.get(...inLoc), ...outLoc);\n  }\n\n  if (dtype === 'string') {\n    return backend_util.fromStringArrayToUint8(outBuf.values as string[]);\n  }\n  return outBuf.values as TypedArray;\n}\n\nexport function slice(\n    args: {inputs: SliceInputs, backend: MathBackendCPU, attrs: SliceAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {begin, size} = attrs;\n\n  assertNotComplex(x, 'slice');\n\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n\n  const vals = backend.data.get(x.dataId).values;\n  const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n  return backend.makeTensorInfo($size, x.dtype, outVals);\n}\n\nexport const sliceConfig: KernelConfig = {\n  kernelName: Slice,\n  backendName: 'cpu',\n  kernelFunc: slice as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SquaredDifference} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const squaredDifferenceImpl = createSimpleBinaryKernelImpl(((a, b) => {\n  const diff = a - b;\n  return diff * diff;\n}));\nexport const squaredDifference =\n    binaryKernelFunc(SquaredDifference, squaredDifferenceImpl);\n\nexport const squaredDifferenceConfig: KernelConfig = {\n  kernelName: SquaredDifference,\n  backendName: 'cpu',\n  kernelFunc: squaredDifference\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function stridedSliceImpl<R extends Rank>(\n    outShape: number[], xBuf: TensorBuffer<R>, strides: number[],\n    begin: number[]): TensorBuffer<R> {\n  const outBuf = buffer(outShape, xBuf.dtype);\n\n  for (let i = 0; i < outBuf.size; i++) {\n    const loc = outBuf.indexToLoc(i);\n\n    const newLoc: number[] = new Array(loc.length);\n    for (let j = 0; j < newLoc.length; j++) {\n      newLoc[j] = loc[j] * strides[j] + begin[j];\n    }\n    outBuf.set(xBuf.get(...newLoc), ...loc);\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sub} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const subImpl =\n    createSimpleBinaryKernelImpl(((aValue, bValue) => aValue - bValue));\nexport const subComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal - bReal, imag: aImag - bImag};\n    }));\nexport const sub = binaryKernelFunc(Sub, subImpl, subComplexImpl);\n\nexport const subConfig: KernelConfig = {\n  kernelName: Sub,\n  backendName: 'cpu',\n  kernelFunc: sub\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\n/**\n * An implementation of the tile kernel shared between webgl and cpu for string\n * tensors only.\n */\n\nexport function tileImpl<R extends Rank>(\n    xBuf: TensorBuffer<R, DataType>,\n    reps: number[]): TensorBuffer<R, DataType> {\n  const newShape: number[] = new Array(xBuf.rank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = xBuf.shape[i] * reps[i];\n  }\n  const result = buffer(newShape, xBuf.dtype);\n  for (let i = 0; i < result.values.length; ++i) {\n    const newLoc = result.indexToLoc(i);\n\n    const originalLoc: number[] = new Array(xBuf.rank);\n    for (let j = 0; j < originalLoc.length; j++) {\n      originalLoc[j] = newLoc[j] % xBuf.shape[j];\n    }\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n\n    result.values[i] = xBuf.values[originalIndex];\n  }\n  return result as TensorBuffer<R, DataType>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/** An implementation of the TopK kernel shared between webgl and cpu. */\n\nimport {buffer, NumericDataType, Rank, ShapeMap, Tensor, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function topKImpl<T extends Tensor, R extends Rank>(\n    x: TypedArray, xShape: number[], xDtype: NumericDataType, k: number,\n    sorted: boolean):\n    [TensorBuffer<R, NumericDataType>, TensorBuffer<R, 'int32'>] {\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const lastDim = xShape[xShape.length - 1];\n  const [batch, size] = [x.length / lastDim, lastDim];\n  const allTopKVals = util.getTypedArrayFromDType(xDtype, batch * k);\n  const allTopKIndices = util.getTypedArrayFromDType('int32', batch * k);\n\n  for (let b = 0; b < batch; b++) {\n    const offset = b * size;\n    const vals = x.subarray(offset, offset + size);\n    const valAndInd: Array<{value: number, index: number}> = [];\n    for (let i = 0; i < vals.length; i++) {\n      valAndInd.push({value: vals[i], index: i});\n    }\n    valAndInd.sort((a, b) => b.value - a.value);\n\n    const outOffset = b * k;\n    const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n    const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n    for (let i = 0; i < k; i++) {\n      topKVals[i] = valAndInd[i].value;\n      topKIndices[i] = valAndInd[i].index;\n    }\n  }\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const outputShape = xShape.slice();\n  outputShape[outputShape.length - 1] = k;\n\n  return [\n    buffer(outputShape as ShapeMap[R], xDtype, allTopKVals),\n    buffer(outputShape as ShapeMap[R], 'int32', allTopKIndices)\n  ];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendValues, DataType, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function uniqueImpl(\n    values: BackendValues, axis: number, shape: number[], dtype: DataType): {\n  outputValues: BackendValues,\n  outputShape: number[],\n  indices: BackendValues\n} {\n  // Normalize and validate axis.\n  const $axis = util.parseAxisParam(axis, shape)[0];\n\n  // Calculate the new shape that is suitable for extracting data along the\n  // given axis.\n  //\n  // The rank is 3.\n  // The size of the 1st dimension is the size of all the axes < the given axis.\n  // The size of the 2nd dimension is the same as the size of the given axis.\n  // The size of the 3rd dimension is the size of all the axes > the given axis.\n  //\n  // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the\n  // newShape would be: [2*3, 5, 4].\n  //\n  // Note that this is not the final output shape. This will be the shape for an\n  // intermediate TensorBuffer (see inputBuffer below) to allow us to extract\n  // values along the given axis. To demonstrate how it works, consider the\n  // following example:\n  //\n  // Input: a 3D tensor, with shape [1, 2, 3]\n  // [\n  //   [\n  //      [1,2,3],\n  //      [4,5,6]\n  //   ]\n  // ]\n  // Axis: 2 (the last axis).\n  // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].\n  //\n  // For this example, newShape would be: [2, 3, 1], where 2 is calculated from\n  // 1*2. The re-shaped data would look like:\n  //\n  // [\n  //   [\n  //     [1], [2], [3]\n  //   ],\n  //   [\n  //     [4], [5], [6]\n  //   ]\n  // ]\n  //\n  // Then, we can construct a 3-level nested loop by the following dimension\n  // order to extract the values along the axis (dimension1):\n  // i: dimension1       // 0,1,2 (newShape[1])\n  //   m: dimension0     // 0,1   (newShape[0])\n  //     n: dimension2   // 0     (newShape[2])\n  //\n  //                       m, i, n\n  //                      ---------\n  // Iteration 0: data at [0, 0, 0] => \"1\"\n  // Iteration 1: data at [1, 0, 0] => \"4\"\n  // We got [1,4].\n  // Iteration 2: data at [0, 1, 0] => \"2\"\n  // Iteration 3: data at [1, 1, 0] => \"5\"\n  // We got [2,5].\n  // Iteration 4: data at [0, 2, 0] => \"3\"\n  // Iteration 5: data at [1, 2, 0] => \"6\"\n  // We got [3,6].\n  const newShape = [1, shape[0], 1];\n  for (let i = 0; i < $axis; i++) {\n    newShape[0] *= shape[i];\n  }\n  newShape[1] = shape[$axis];\n  for (let i = $axis + 1; i < shape.length; i++) {\n    newShape[2] *= shape[i];\n  }\n\n  // A map from unique elements (their string representations) to their values\n  // in \"indices\" (below).\n  const uniqueElements: {[key: string]: number} = {};\n  // The indices of each unique element in the original tensor along the given\n  // axis. It is 1D and has the same size as the given axis.\n  const indices = new Int32Array(shape[$axis]);\n  // Create a buffer so we can easily extract value at a given location.\n  const inputBuffer = new TensorBuffer(newShape, dtype, values as TypedArray);\n  // The indices along the given axis that have unique elements. This is a\n  // de-duped version of \"indices\" above.\n  const uniqueIndices: number[] = [];\n  const is1DTensor = newShape[0] === 1 && newShape[2] === 1;\n  for (let i = 0; i < shape[$axis]; i++) {\n    // Extract values along the axis.\n    let element: string;\n    if (is1DTensor) {\n      // Fast path for 1D tensor input.\n      element = values[i].toString();\n    } else {\n      const axisValues = [];\n      for (let m = 0; m < newShape[0]; m++) {\n        for (let n = 0; n < newShape[2]; n++) {\n          axisValues.push(inputBuffer.get(m, i, n));\n        }\n      }\n      element = axisValues.join(',');\n    }\n\n    // Dedup and update various indices.\n    if (uniqueElements[element] !== undefined) {\n      indices[i] = uniqueElements[element];\n    } else {\n      const uniqueIndex = Object.keys(uniqueElements).length;\n      uniqueElements[element] = uniqueIndex;\n      indices[i] = uniqueIndex;\n      uniqueIndices.push(i);\n    }\n  }\n\n  // Now we know where each of the unique elements are located along the axis\n  // (uniqueIndices). Extract them from input buffer and store them in the\n  // output buffer.\n  const outputTmpShape = newShape.slice();\n  outputTmpShape[1] = Object.keys(uniqueElements).length;\n  const outputBuffer = new TensorBuffer(outputTmpShape, dtype);\n  uniqueIndices.forEach((uniqueElementIndex, i) => {\n    for (let m = 0; m < newShape[0]; m++) {\n      for (let n = 0; n < newShape[2]; n++) {\n        outputBuffer.set(inputBuffer.get(m, uniqueElementIndex, n), m, i, n);\n      }\n    }\n  });\n\n  // The output shape can be calculated from the input shape with the size of\n  // the given axis replaced by the number of unique elements along that axis.\n  const outputShape = shape.slice();\n  outputShape[$axis] = outputTmpShape[1];\n\n  return {\n    outputValues: outputBuffer.values as BackendValues,\n    outputShape,\n    indices,\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/*\n * base.ts contains all the exports from tfjs-backend-cpu\n * without auto-kernel registration\n */\nimport {registerBackend} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from './backend_cpu';\nimport * as shared from './shared';\n\nexport {MathBackendCPU} from './backend_cpu';\nexport {version as version_cpu} from './version';\nexport {shared};\n\n// Side effects for default initialization of MathBackendCPU\nregisterBackend('cpu', () => new MathBackendCPU(), 1 /* priority */);\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Elu, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const elu =\n    unaryKernelFunc(Elu, (xi) => xi >= 0 ? xi : (Math.exp(xi) - 1));\n\nexport const eluConfig: KernelConfig = {\n  kernelName: Elu,\n  backendName: 'cpu',\n  kernelFunc: elu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LeakyRelu, LeakyReluAttrs, LeakyReluInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function leakyRelu(args: {\n  inputs: LeakyReluInputs,\n  backend: MathBackendCPU,\n  attrs: LeakyReluAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {alpha} = attrs;\n\n  assertNotComplex([x], 'leakyRelu');\n\n  const xSize = util.sizeFromShape(x.shape);\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const outVals = util.getTypedArrayFromDType('float32', xSize);\n\n  for (let i = 0; i < xVals.length; i++) {\n    outVals[i] = xVals[i] < 0 ? alpha * xVals[i] : xVals[i];\n  }\n\n  return backend.makeTensorInfo(x.shape, 'float32', outVals);\n}\n\nexport const leakyReluConfig: KernelConfig = {\n  kernelName: LeakyRelu,\n  backendName: 'cpu',\n  kernelFunc: leakyRelu as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Prelu, PreluInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\n\nconst preluImpl = createSimpleBinaryKernelImpl(\n    (xValue: number, aValue: number) => xValue < 0 ? aValue * xValue : xValue);\n\nexport function prelu(args: {inputs: PreluInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x, alpha} = inputs;\n\n  assertNotComplex([x, alpha], 'prelu');\n\n  const aVals = backend.data.get(x.dataId).values as TypedArray;\n  const bVals = backend.data.get(alpha.dataId).values as TypedArray;\n\n  const [resultData, resultShape] =\n      preluImpl(x.shape, alpha.shape, aVals, bVals, x.dtype);\n\n  return backend.makeTensorInfo(resultShape, x.dtype, resultData);\n}\n\nexport const preluConfig: KernelConfig = {\n  kernelName: Prelu,\n  backendName: 'cpu',\n  kernelFunc: prelu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Relu} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const relu = unaryKernelFunc(Relu, (xi) => Math.max(0, xi));\n\nexport const reluConfig: KernelConfig = {\n  kernelName: Relu,\n  backendName: 'cpu',\n  kernelFunc: relu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Relu6} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const relu6 =\n    unaryKernelFunc(Relu6, (xi) => Math.min(Math.max(0, xi), 6));\n\nexport const relu6Config: KernelConfig = {\n  kernelName: Relu6,\n  backendName: 'cpu',\n  kernelFunc: relu6,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {elu} from '../kernels/Elu';\nimport {identity} from '../kernels/Identity';\nimport {leakyRelu} from '../kernels/LeakyRelu';\nimport {prelu} from '../kernels/Prelu';\nimport {relu} from '../kernels/Relu';\nimport {relu6} from '../kernels/Relu6';\n\nexport function applyActivation(\n    backend: MathBackendCPU, x: TensorInfo, activation: backend_util.Activation,\n    preluActivationWeights?: TensorInfo, leakyreluAlpha?: number): TensorInfo {\n  if (activation === 'linear') {\n    return identity({inputs: {x}, backend});\n  } else if (activation === 'relu') {\n    return relu({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'elu') {\n    return elu({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'relu6') {\n    return relu6({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'prelu') {\n    return prelu({inputs: {x, alpha: preluActivationWeights}, backend});\n  } else if (activation === 'leakyrelu') {\n    return leakyRelu({inputs: {x}, backend, attrs: {alpha: leakyreluAlpha}});\n  }\n  throw new Error(\n      `Activation ${activation} has not been implemented for the CPU backend.`);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reshape, ReshapeAttrs, ReshapeInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function reshape(\n    args:\n        {inputs: ReshapeInputs, backend: MathBackendCPU, attrs: ReshapeAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {shape} = attrs;\n\n  const xSize = util.sizeFromShape(x.shape);\n  const $shape = util.inferFromImplicitShape(shape, xSize);\n  const $xSize = util.sizeFromShape($shape);\n\n  util.assert(\n      xSize === $xSize,\n      () => `The new shape (${$shape}) has ${$xSize} elements and the old ` +\n          `shape (${x.shape}) has ${xSize} elements. The new shape and old ` +\n          `shape must have the same number of elements.`);\n\n  backend.incRef(x.dataId);\n\n  const xData = backend.data.get(x.dataId);\n\n  if (xData.complexTensorInfos != null) {\n    const real = xData.complexTensorInfos.real;\n    const imag = xData.complexTensorInfos.imag;\n\n    real.shape = $shape;\n    imag.shape = $shape;\n  }\n\n  return {dataId: x.dataId, shape: $shape, dtype: x.dtype};\n}\n\nexport const reshapeConfig: KernelConfig = {\n  kernelName: Reshape,\n  backendName: 'cpu',\n  kernelFunc: reshape as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BatchMatMul, BatchMatMulAttrs, BatchMatMulInputs, buffer, KernelConfig, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {reshape} from './Reshape';\n\nexport function batchMatMul(args: {\n  inputs: BatchMatMulInputs,\n  attrs: BatchMatMulAttrs,\n  backend: MathBackendCPU\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b} = inputs;\n  const {transposeA, transposeB} = attrs;\n\n  assertNotComplex([a, b], 'matMul');\n\n  const aRank = a.shape.length;\n  const bRank = b.shape.length;\n\n  const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n  const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n\n  const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n  const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n\n  const outerDimsA = a.shape.slice(0, -2);\n  const outerDimsB = b.shape.slice(0, -2);\n\n  const batchDimA = util.sizeFromShape(outerDimsA);\n  const batchDimB = util.sizeFromShape(outerDimsB);\n\n  const batchDimsCompatible =\n      batchDimA === batchDimB || batchDimA === 1 || batchDimB === 1;\n\n  util.assert(\n      aRank >= 2 && bRank >= 2 && batchDimsCompatible,\n      () => `Error in matMul: the input batch dimensions must either be the ` +\n          `same or at least one input batch dimension must be 1. Got input ` +\n          `batch dimensions of (${outerDimsA}) and (${outerDimsB}).`);\n\n  const outShapeOuterDims =\n      batchDimA > batchDimB ? a.shape.slice(0, -2) : b.shape.slice(0, -2);\n  const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n\n  util.assert(\n      innerShapeA === innerShapeB,\n      () => `Error in matMul: inner shapes (${innerShapeA}) and (` +\n          `${innerShapeB}) of Tensors with shapes ${a.shape} and ` +\n          `${b.shape} and transposeA=${transposeA}` +\n          ` and transposeB=${transposeB} must match.`);\n\n  const a3dShape = transposeA ? [batchDimA, innerShapeA, outerShapeA] :\n                                [batchDimA, outerShapeA, innerShapeA];\n  const b3dShape = transposeB ? [batchDimB, outerShapeB, innerShapeB] :\n                                [batchDimB, innerShapeB, outerShapeB];\n\n  // The rest of the implementation is designed to operate on rank-3 tensors\n  const a3d = reshape({inputs: {x: a}, backend, attrs: {shape: a3dShape}});\n  const b3d = reshape({inputs: {x: b}, backend, attrs: {shape: b3dShape}});\n\n  const sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];\n  const leftDim = transposeA ? a3d.shape[2] : a3d.shape[1];\n  const rightDim = transposeB ? b3d.shape[1] : b3d.shape[2];\n  const batchDim = Math.max(batchDimA, batchDimB);\n\n  const a3dValues = backend.data.get(a3d.dataId).values as TypedArray;\n  const b3dValues = backend.data.get(b3d.dataId).values as TypedArray;\n\n  const a3dStrides = util.computeStrides(a3d.shape);\n  const b3dStrides = util.computeStrides(b3d.shape);\n\n  const [aBatch, aOuterStep, aInnerStep] = transposeA ?\n      [a3dStrides[0], 1, a3dStrides[1]] :\n      [a3dStrides[0], a3dStrides[1], 1];\n  const [bInnerStep, bOuterStep, bBatch] = transposeB ?\n      [1, b3dStrides[1], b3dStrides[0]] :\n      [b3dStrides[1], 1, b3dStrides[0]];\n\n  const size = leftDim * rightDim;\n  const result = buffer([batchDim, leftDim, rightDim], a3d.dtype);\n\n  const resVals = result.values as TypedArray;\n  const blockSize = backend.blockSize;\n\n  for (let bi = 0; bi < batchDim; bi++) {\n    for (let i0 = 0; i0 < leftDim; i0 += blockSize) {\n      for (let j0 = 0; j0 < rightDim; j0 += blockSize) {\n        for (let k0 = 0; k0 < sharedDim; k0 += blockSize) {\n          // for when blockSize doesn't evenly divide the input\n          const iBlock = Math.min(i0 + blockSize, leftDim);\n          const jBlock = Math.min(j0 + blockSize, rightDim);\n          const kBlock = Math.min(k0 + blockSize, sharedDim);\n\n          for (let i = i0; i < iBlock; i++) {\n            for (let j = j0; j < jBlock; j++) {\n              let sum = 0.0;\n\n              for (let k = k0; k < kBlock; k++) {\n                const batchOffsetA = Math.min(bi, batchDimA - 1) * aBatch;\n                const batchOffsetB = Math.min(bi, batchDimB - 1) * bBatch;\n                const aVal =\n                    a3dValues[batchOffsetA + i * aOuterStep + k * aInnerStep];\n                const bVal =\n                    b3dValues[k * bInnerStep + j * bOuterStep + batchOffsetB];\n                sum += aVal * bVal;\n              }\n              resVals[bi * size + (i * rightDim + j)] += sum;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  backend.disposeIntermediateTensorInfo(a3d);\n  backend.disposeIntermediateTensorInfo(b3d);\n\n  // set correct shape on output.\n  return backend.makeTensorInfo(\n      outShape, result.dtype, result.values as TypedArray);\n}\n\nexport const batchMatMulConfig: KernelConfig = {\n  kernelName: BatchMatMul,\n  backendName: 'cpu',\n  kernelFunc: batchMatMul as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\n\nimport {add} from './Add';\nimport {batchMatMul} from './BatchMatMul';\n\nexport function _fusedMatMul(args: {\n  inputs: _FusedMatMulInputs,\n  attrs: _FusedMatMulAttrs,\n  backend: MathBackendCPU\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b, bias, preluActivationWeights} = inputs;\n  const {transposeA, transposeB, activation, leakyreluAlpha} = attrs;\n\n  let current;\n  let addRes;\n  let activationRes;\n\n  const intermediates: TensorInfo[] = [];\n\n  const matMulRes =\n      batchMatMul({inputs: {a, b}, attrs: {transposeA, transposeB}, backend});\n  current = matMulRes;\n\n  if (bias) {\n    addRes = add({inputs: {a: current, b: bias}, backend}) as TensorInfo;\n    intermediates.push(current);\n    current = addRes;\n  }\n  if (activation) {\n    activationRes = applyActivation(\n        backend, current, activation, preluActivationWeights, leakyreluAlpha);\n    intermediates.push(current);\n    current = activationRes;\n  }\n\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return current;\n}\n\nexport const _fusedMatMulConfig: KernelConfig = {\n  kernelName: _FusedMatMul,\n  backendName: 'cpu',\n  kernelFunc: _fusedMatMul as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const acos = unaryKernelFunc(Acos, (xi) => Math.acos(xi));\n\nexport const acosConfig: KernelConfig = {\n  kernelName: Acos,\n  backendName: 'cpu',\n  kernelFunc: acos,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const acosh = unaryKernelFunc(Acosh, (xi) => Math.acosh(xi));\n\nexport const acoshConfig: KernelConfig = {\n  kernelName: Acosh,\n  backendName: 'cpu',\n  kernelFunc: acosh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AddN, AddNInputs, buffer, KernelConfig, KernelFunc, Tensor, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function addN(args: {inputs: AddNInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const tensors = inputs as Tensor[];\n\n  assertNotComplex(inputs, 'addN');\n\n  const vals =\n      tensors.map(t => backend.data.get(t.dataId).values as TypedArray);\n  const outBuf = buffer(tensors[0].shape, tensors[0].dtype as 'float32');\n  const outVals = outBuf.values;\n  for (let i = 0; i < tensors.length; i++) {\n    const currVals = vals[i];\n    for (let j = 0; j < outVals.length; j++) {\n      outVals[j] += currVals[j];\n    }\n  }\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const addNConfig: KernelConfig = {\n  kernelName: AddN,\n  backendName: 'cpu',\n  kernelFunc: addN as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {All, AllAttrs, AllInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function all(\n    args: {inputs: AllInputs, backend: MathBackendCPU, attrs: AllAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'all');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('all', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let all = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      all = all && value;\n    }\n    vals[i] = all;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const allConfig: KernelConfig = {\n  kernelName: All,\n  backendName: 'cpu',\n  kernelFunc: all as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Any, AnyAttrs, AnyInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function any(\n    args: {inputs: AnyInputs, backend: MathBackendCPU, attrs: AnyAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'any');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('any', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let anyVal = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      anyVal = anyVal || value;\n    }\n    vals[i] = anyVal;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const anyConfig: KernelConfig = {\n  kernelName: Any,\n  backendName: 'cpu',\n  kernelFunc: any as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMax, ArgMaxAttrs, ArgMaxInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function argMax(\n    args: {inputs: ArgMaxInputs, backend: MathBackendCPU, attrs: ArgMaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  assertNotComplex(x, 'argMax');\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  axes = [axes[0]];\n  backend_util.assertAxesAreInnerMostDims('argMax', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n\n  const outSize = util.sizeFromShape(outShape);\n  const vals = util.makeZerosTypedArray(outSize, 'int32');\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    let maxIndex = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (value > max) {\n        max = value;\n        maxIndex = j;\n      }\n    }\n    vals[i] = maxIndex;\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(outShape, 'int32', vals);\n}\n\nexport const argMaxConfig: KernelConfig = {\n  kernelName: ArgMax,\n  backendName: 'cpu',\n  kernelFunc: argMax as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMin, ArgMinAttrs, ArgMinInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function argMin(\n    args: {inputs: ArgMinInputs, backend: MathBackendCPU, attrs: ArgMinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  assertNotComplex(x, 'argMin');\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  axes = [axes[0]];\n  backend_util.assertAxesAreInnerMostDims('argMin', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n\n  const outSize = util.sizeFromShape(outShape);\n  const vals = util.makeZerosTypedArray(outSize, 'int32');\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let min = aVals[offset];\n    let minIndex = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (value < min) {\n        min = value;\n        minIndex = j;\n      }\n    }\n    vals[i] = minIndex;\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(outShape, 'int32', vals);\n}\n\nexport const argMinConfig: KernelConfig = {\n  kernelName: ArgMin,\n  backendName: 'cpu',\n  kernelFunc: argMin as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asin, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const asin = unaryKernelFunc(Asin, (xi) => Math.asin(xi));\n\nexport const asinConfig: KernelConfig = {\n  kernelName: Asin,\n  backendName: 'cpu',\n  kernelFunc: asin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asinh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const asinh = unaryKernelFunc(Asinh, (xi) => Math.asinh(xi));\n\nexport const asinhConfig: KernelConfig = {\n  kernelName: Asinh,\n  backendName: 'cpu',\n  kernelFunc: asinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const atan = unaryKernelFunc(Atan, (xi) => Math.atan(xi));\n\nexport const atanConfig: KernelConfig = {\n  kernelName: Atan,\n  backendName: 'cpu',\n  kernelFunc: atan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan2, KernelConfig} from '@tensorflow/tfjs-core';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const atan2Impl = createSimpleBinaryKernelImpl(\n    (aValue, bValue) => Math.atan2(aValue, bValue));\n\nexport const atan2 = binaryKernelFunc(Atan2, atan2Impl);\n\nexport const atan2Config: KernelConfig = {\n  kernelName: Atan2,\n  backendName: 'cpu',\n  kernelFunc: atan2,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atanh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const atanh = unaryKernelFunc(Atanh, (xi) => Math.atanh(xi));\n\nexport const atanhConfig: KernelConfig = {\n  kernelName: Atanh,\n  backendName: 'cpu',\n  kernelFunc: atanh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, buffer, DataType, Rank, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function pool(\n    xValues: TypedArray, xShape: number[], dtype: DataType, strides: number[],\n    convInfo: backend_util.Conv2DInfo,\n    poolType: 'max'|'avg'): TensorBuffer<Rank, DataType> {\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const initialValue =\n      (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n                            Number.POSITIVE_INFINITY);\n\n  const output = buffer(convInfo.outShape, dtype);\n  const outputVals = output.values;\n\n  const outputBatchStrides =\n      convInfo.outShape[1] * convInfo.outShape[2] * convInfo.outShape[3];\n  const outputRowStrides = convInfo.outShape[2] * convInfo.outShape[3];\n  const outputColStrides = convInfo.outShape[3];\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const outputBatchOffset = b * outputBatchStrides;\n    const inputBatchOffset = b * strides[0];\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const xRCorner = yR * strideHeight - padTop;\n        const xRMin = Math.max(0, xRCorner);\n        const xRMax =\n            Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n        const outputRowOffset = outputBatchOffset + yR * outputRowStrides;\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const xCCorner = yC * strideWidth - padLeft;\n          const xCMin = Math.max(0, xCCorner);\n          const xCMax =\n              Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n          let minMaxValue = initialValue;\n          let avgValue = 0;\n          let count = 0;\n          for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n            const xROffset = inputBatchOffset + xR * strides[1];\n            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n              const xCOffset = xROffset + xC * strides[2];\n              const pixel = xValues[xCOffset + d];\n              if ((poolType === 'max' && pixel > minMaxValue)) {\n                minMaxValue = pixel;\n              } else if (poolType === 'avg') {\n                avgValue += pixel;\n                count++;\n              }\n            }\n            if (isNaN(minMaxValue)) {\n              break;\n            }\n          }\n          const outputOffset = outputRowOffset + yC * outputColStrides + d;\n          outputVals[outputOffset] =\n              poolType === 'avg' ? avgValue / count : minMaxValue;\n        }\n      }\n    }\n  }\n  return output;\n}\n\nexport function maxPoolPositions(\n    xValues: TypedArray, xShape: number[], dtype: DataType,\n    convInfo: backend_util.Conv2DInfo, flattenPositions = false,\n    includeBatchInIndex = false): TensorBuffer<Rank, 'int32'> {\n  const maxPositions = buffer(convInfo.outShape, 'int32');\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const xBuf = buffer(xShape, dtype, xValues);\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const xRCorner = yR * strideHeight - padTop;\n        let xRMin = xRCorner;\n        while (xRMin < 0) {\n          xRMin += dilationHeight;\n        }\n        // const xRMin = Math.max(0, xRCorner);\n        const xRMax =\n            Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const xCCorner = yC * strideWidth - padLeft;\n          let xCMin = xCCorner;\n          while (xCMin < 0) {\n            xCMin += dilationWidth;\n          }\n          const xCMax =\n              Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n          let maxValue = Number.NEGATIVE_INFINITY;\n          let maxPosition = -1;\n\n          for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n            const wR = xR - xRCorner;\n            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n              const wC = xC - xCCorner;\n              const pixel = xBuf.get(b, xR, xC, d);\n              if (pixel > maxValue) {\n                maxValue = pixel as number;\n                if (flattenPositions) {\n                  maxPosition = includeBatchInIndex ?\n                      ((b * convInfo.inHeight + xR) * convInfo.inWidth + xC) *\n                              convInfo.inChannels +\n                          d :\n                      (xR * convInfo.inWidth + xC) * convInfo.inChannels + d;\n                } else {\n                  maxPosition = wR * effectiveFilterWidth + wC;\n                }\n              }\n            }\n          }\n          maxPositions.set(maxPosition, b, yR, yC, d);\n        }\n      }\n    }\n  }\n  return maxPositions;\n}\n\nexport function pool3d(\n    xValues: TypedArray, xShape: number[], dtype: DataType, strides: number[],\n    convInfo: backend_util.Conv3DInfo,\n    poolType: 'max'|'avg'): TensorBuffer<Rank, DataType> {\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = convInfo.padInfo.front;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const initialValue =\n      (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n                            Number.POSITIVE_INFINITY);\n\n  const output = buffer(convInfo.outShape, dtype);\n  const outputVals = output.values;\n\n  const outputBatchStrides = convInfo.outShape[1] * convInfo.outShape[2] *\n      convInfo.outShape[3] * convInfo.outShape[4];\n  const outputDepthStrides =\n      convInfo.outShape[2] * convInfo.outShape[3] * convInfo.outShape[4];\n  const outputRowStrides = convInfo.outShape[3] * convInfo.outShape[4];\n  const outputColStrides = convInfo.outShape[4];\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    const outputBatchOffset = batch * outputBatchStrides;\n    const inputBatchOffset = batch * strides[0];\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n        const xDepthCorner = yDepth * strideDepth - padFront;\n        let xDepthMin = xDepthCorner;\n        while (xDepthMin < 0) {\n          xDepthMin += dilationDepth;\n        }\n        const xDepthMax =\n            Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n        const outputDepthOffset =\n            outputBatchOffset + yDepth * outputDepthStrides;\n        for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n          const xRowCorner = yRow * strideHeight - padTop;\n          let xRowMin = xRowCorner;\n          while (xRowMin < 0) {\n            xRowMin += dilationHeight;\n          }\n          const xRowMax =\n              Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n          const outputRowOffset = outputDepthOffset + yRow * outputRowStrides;\n          for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n            const xColCorner = yCol * strideWidth - padLeft;\n            let xColMin = xColCorner;\n            while (xColMin < 0) {\n              xColMin += dilationWidth;\n            }\n            const xColMax =\n                Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n            // Shader code begins\n            const outputColOffset = outputRowOffset + yCol * outputColStrides;\n            let minMaxValue = initialValue;\n            let avgValue = 0;\n            let count = 0;\n            for (let xDepth = xDepthMin; xDepth < xDepthMax;\n                 xDepth += dilationDepth) {\n              const xDepthOffset = inputBatchOffset + xDepth * strides[1];\n              for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                const xRowOffset = xDepthOffset + xRow * strides[2];\n                for (let xCol = xColMin; xCol < xColMax;\n                     xCol += dilationWidth) {\n                  const xColOffset = xRowOffset + xCol * strides[3];\n                  const pixel = xValues[xColOffset + channel];\n                  if ((poolType === 'max' && pixel > minMaxValue)) {\n                    minMaxValue = pixel;\n                  } else if (poolType === 'avg') {\n                    avgValue += pixel;\n                    count++;\n                  }\n                  if (isNaN(minMaxValue)) {\n                    break;\n                  }\n                }\n                if (isNaN(minMaxValue)) {\n                  break;\n                }\n              }\n              if (isNaN(minMaxValue)) {\n                break;\n              }\n            }\n            const outputOffset = outputColOffset + channel;\n            outputVals[outputOffset] =\n                poolType === 'avg' ? avgValue / count : minMaxValue;\n          }\n        }\n      }\n    }\n  }\n\n  return output;\n}\n\nexport function maxPool3dPositions(\n    xBuf: TensorBuffer<Rank, DataType>,\n    convInfo: backend_util.Conv3DInfo): TensorBuffer<Rank, DataType> {\n  const maxPositions = buffer(convInfo.outShape, 'int32');\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = convInfo.padInfo.front;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n        const xDepthCorner = yDepth * strideDepth - padFront;\n        let xDepthMin = xDepthCorner;\n        while (xDepthMin < 0) {\n          xDepthMin += dilationDepth;\n        }\n        const xDepthMax =\n            Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n        for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n          const xRowCorner = yRow * strideHeight - padTop;\n          let xRowMin = xRowCorner;\n          while (xRowMin < 0) {\n            xRowMin += dilationHeight;\n          }\n          const xRowMax =\n              Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n          for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n            const xColCorner = yCol * strideWidth - padLeft;\n            let xColMin = xColCorner;\n            while (xColMin < 0) {\n              xColMin += dilationWidth;\n            }\n            const xColMax =\n                Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n\n            // Shader code begins\n            let maxValue = Number.NEGATIVE_INFINITY;\n            let maxPosition = -1;\n\n            for (let xDepth = xDepthMin; xDepth < xDepthMax;\n                 xDepth += dilationDepth) {\n              const wDepth = xDepth - xDepthCorner;\n              for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                const wRow = xRow - xRowCorner;\n                for (let xCol = xColMin; xCol < xColMax;\n                     xCol += dilationWidth) {\n                  const wCol = xCol - xColCorner;\n                  const pixel = xBuf.get(batch, xDepth, xRow, xCol, channel);\n                  if (pixel >= maxValue) {\n                    maxValue = pixel as number;\n                    maxPosition =\n                        wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                        wRow * effectiveFilterHeight + wCol;\n                  }\n                }\n              }\n            }\n\n            maxPositions.set(maxPosition, batch, yDepth, yRow, yCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return maxPositions;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool, AvgPoolAttrs, AvgPoolInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool} from '../utils/pool_utils';\nimport {identity} from './Identity';\n\nexport function avgPool(\n    args:\n        {inputs: AvgPoolInputs, backend: MathBackendCPU, attrs: AvgPoolAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'avgPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in avgPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  let res: TensorInfo;\n\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    res = identity({inputs: {x}, backend});\n  } else {\n    const xValues = backend.data.get(x.dataId).values as TypedArray;\n    const strides = util.computeStrides(x.shape);\n    const buffer = pool(xValues, x.shape, x.dtype, strides, convInfo, 'avg');\n    res = backend.makeTensorInfo(\n        convInfo.outShape, x.dtype, buffer.values as TypedArray);\n  }\n  return res;\n}\n\nexport const avgPoolConfig: KernelConfig = {\n  kernelName: AvgPool,\n  backendName: 'cpu',\n  kernelFunc: avgPool as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AvgPool3D, AvgPool3DAttrs, AvgPool3DInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool3d} from '../utils/pool_utils';\n\nexport function avgPool3D(args: {\n  inputs: AvgPool3DInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode, dataFormat, dilations} =\n      attrs;\n\n  assertNotComplex(x, 'avgPool3d');\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1, 1];\n  }\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      $dilations, pad, dimRoundingMode, dataFormat);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = pool3d(\n      xValues, x.shape, x.dtype, util.computeStrides(x.shape), convInfo, 'avg');\n\n  return backend.makeTensorInfo(outBuf.shape, 'float32', outBuf.values);\n}\n\nexport const avgPool3DConfig: KernelConfig = {\n  kernelName: AvgPool3D,\n  backendName: 'cpu',\n  kernelFunc: avgPool3D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AvgPool3DGrad, AvgPool3DGradAttrs, AvgPool3DGradInputs, backend_util, buffer, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function avgPool3DGrad(args: {\n  inputs: AvgPool3DGradInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const {filterSize, strides, pad, dilations, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, input], 'avgPool3DGrad');\n\n  const convInfo = backend_util.computePool3DInfo(\n      input.shape as [number, number, number, number, number], filterSize,\n      strides, dilations, pad, dimRoundingMode);\n\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterDepth = convInfo.filterDepth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx = buffer(input.shape, 'float32');\n\n  const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n\n  const dyBuf = backend.bufferSync(dy);\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n        for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n          for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n            // Shader code begins.\n            const dyDepthCorner = dxDepth - padFront;\n            const dyRowCorner = dxRow - padTop;\n            const dyColCorner = dxCol - padLeft;\n            let dotProd = 0;\n            for (let wDepth = 0; wDepth < effectiveFilterDepth;\n                 wDepth += dilationDepth) {\n              const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n              if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                  Math.floor(dyDepth) !== dyDepth) {\n                continue;\n              }\n              for (let wRow = 0; wRow < effectiveFilterHeight;\n                   wRow += dilationHeight) {\n                const dyRow = (dyRowCorner + wRow) / strideHeight;\n                if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                    Math.floor(dyRow) !== dyRow) {\n                  continue;\n                }\n                for (let wCol = 0; wCol < effectiveFilterWidth;\n                     wCol += dilationWidth) {\n                  const dyCol = (dyColCorner + wCol) / strideWidth;\n                  if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                      Math.floor(dyCol) !== dyCol) {\n                    continue;\n                  }\n\n                  const pixel =\n                      dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                  dotProd += pixel;\n                }\n              }\n            }\n            dx.set(\n                dotProd * avgMultiplier, batch, dxDepth, dxRow, dxCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const avgPool3DGradConfig: KernelConfig = {\n  kernelName: AvgPool3DGrad,\n  backendName: 'cpu',\n  kernelFunc: avgPool3DGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPoolGrad, AvgPoolGradAttrs, AvgPoolGradInputs, backend_util, buffer, KernelConfig, KernelFunc, Rank, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function avgPoolGrad(args: {\n  inputs: AvgPoolGradInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  assertNotComplex([dy, input], 'avgPoolGrad');\n  const {filterSize, strides, pad} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad);\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx =\n      buffer<Rank.R4>(x.shape as [number, number, number, number], 'float32');\n\n  const avgMultiplier = 1 / (filterHeight * filterWidth);\n\n  const dyData = backend.data.get(dy.dataId).values as Float32Array;\n  const dyBuf = buffer<Rank.R4>(\n      dy.shape as [number, number, number, number], 'float32', dyData);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n        for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n          // Shader code begins.\n          const dyRCorner = dxR - padTop;\n          const dyCCorner = dxC - padLeft;\n          let dotProd = 0;\n          for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n            const dyR = (dyRCorner + wR) / strideHeight;\n            if (dyR < 0 || dyR >= convInfo.outHeight ||\n                Math.floor(dyR) !== dyR) {\n              continue;\n            }\n            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n              const dyC = (dyCCorner + wC) / strideWidth;\n              if (dyC < 0 || dyC >= convInfo.outWidth ||\n                  Math.floor(dyC) !== dyC) {\n                continue;\n              }\n\n              const pixel = dyBuf.get(b, dyR, dyC, d);\n              dotProd += pixel;\n            }\n          }\n          dx.set(dotProd * avgMultiplier, b, dxR, dxC, d);\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const avgPoolGradConfig: KernelConfig = {\n  kernelName: AvgPoolGrad,\n  backendName: 'cpu',\n  kernelFunc: avgPoolGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedBatchNorm, FusedBatchNormAttrs, FusedBatchNormInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function batchNorm(args: {\n  inputs: FusedBatchNormInputs,\n  backend: MathBackendCPU,\n  attrs: FusedBatchNormAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, scale, offset, mean, variance} = inputs;\n\n  util.assert(\n      mean.shape.length === variance.shape.length,\n      () => 'Batch normalization gradient requires mean and variance to have ' +\n          'equal ranks.');\n  util.assert(\n      offset == null || mean.shape.length === offset.shape.length,\n      () => 'Batch normalization gradient requires mean and offset to have ' +\n          'equal ranks.');\n  util.assert(\n      scale == null || mean.shape.length === scale.shape.length,\n      () => 'Batch normalization gradient requires mean and scale to have ' +\n          'equal ranks.');\n\n  assertNotComplex([x, mean, variance, scale, offset], 'batchNorm');\n\n  let {varianceEpsilon} = attrs;\n  if (varianceEpsilon == null) {\n    varianceEpsilon = 0.001;\n  }\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const mVals = backend.data.get(mean.dataId).values as TypedArray;\n  const varVals = backend.data.get(variance.dataId).values as TypedArray;\n  const sVals = scale ? backend.data.get(scale.dataId).values as TypedArray :\n                        new Float32Array([1]);\n  const offVals = offset ?\n      backend.data.get(offset.dataId).values as TypedArray :\n      new Float32Array([0]);\n  const outVals = new Float32Array(xVals.length);\n\n  const offValsLength = offVals.length;\n  const sValsLength = sVals.length;\n  const varValsLength = varVals.length;\n  const mValsLength = mVals.length;\n\n  let offi = 0;\n  let mi = 0;\n  let si = 0;\n  let vi = 0;\n  for (let i = 0; i < xVals.length; ++i) {\n    outVals[i] = offVals[offi++] +\n        (xVals[i] - mVals[mi++]) * sVals[si++] /\n            Math.sqrt(varVals[vi++] + varianceEpsilon);\n    if (offi >= offValsLength) {\n      offi = 0;\n    }\n    if (mi >= mValsLength) {\n      mi = 0;\n    }\n    if (si >= sValsLength) {\n      si = 0;\n    }\n    if (vi >= varValsLength) {\n      vi = 0;\n    }\n  }\n  return backend.makeTensorInfo(x.shape, x.dtype, outVals);\n}\n\nexport const batchNormConfig: KernelConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'cpu',\n  kernelFunc: batchNorm as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BatchToSpaceND, BatchToSpaceNDAttrs, BatchToSpaceNDInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {transpose} from './Transpose';\n\nexport function batchToSpaceND(args: {\n  inputs: BatchToSpaceNDInputs,\n  backend: MathBackendCPU,\n  attrs: BatchToSpaceNDAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, crops} = attrs;\n\n  assertNotComplex([x], 'batchToSpaceND');\n\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  const reshapedPermuted =\n      backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  const sliceBeginCoords =\n      backend_util.getSliceBeginCoords(crops, blockShape.length);\n  const sliceSize =\n      backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n\n  const xReshaped = reshape({inputs: {x}, backend, attrs: {shape: reshaped}});\n  const xTransposed =\n      transpose({inputs: {x: xReshaped}, backend, attrs: {perm: permuted}});\n  const xTransposedReshaped = reshape(\n      {inputs: {x: xTransposed}, backend, attrs: {shape: reshapedPermuted}});\n  const result = slice({\n    inputs: {x: xTransposedReshaped},\n    backend,\n    attrs: {begin: sliceBeginCoords, size: sliceSize}\n  });\n\n  backend.disposeIntermediateTensorInfo(xReshaped);\n  backend.disposeIntermediateTensorInfo(xTransposed);\n  backend.disposeIntermediateTensorInfo(xTransposedReshaped);\n\n  return result;\n}\n\nexport const batchToSpaceNDConfig: KernelConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'cpu',\n  kernelFunc: batchToSpaceND as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Bincount, BincountAttrs, BincountInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {bincountImpl} from './Bincount_impl';\n\nexport function bincount(args: {\n  inputs: BincountInputs,\n  backend: MathBackendCPU,\n  attrs: BincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size} = attrs;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const weightsVals = backend.data.get(weights.dataId).values as TypedArray;\n\n  const outVals =\n      bincountImpl(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n  return backend.makeTensorInfo([size], weights.dtype, outVals);\n}\n\nexport const bincountConfig: KernelConfig = {\n  kernelName: Bincount,\n  backendName: 'cpu',\n  kernelFunc: bincount as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ClipByValue, ClipByValueAttrs, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const clip = unaryKernelFunc(ClipByValue, (xi, attrs) => {\n  const clipAttrs = attrs as {} as ClipByValueAttrs;\n  if (xi > clipAttrs.clipValueMax) {\n    return clipAttrs.clipValueMax;\n  }\n  return xi < clipAttrs.clipValueMin ? clipAttrs.clipValueMin : xi;\n});\n\nexport const clipConfig: KernelConfig = {\n  kernelName: ClipByValue,\n  backendName: 'cpu',\n  kernelFunc: clip,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ComplexAbs, ComplexAbsInputs, KernelConfig, KernelFunc, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const complexAbs =\n    (args: {inputs: ComplexAbsInputs, backend: MathBackendCPU}) => {\n      const {x} = args.inputs;\n      const cpuBackend = args.backend;\n      const resultValues = new Float32Array(util.sizeFromShape(x.shape));\n      const complexVals = cpuBackend.data.get(x.dataId);\n      const real = complexVals.complexTensorInfos.real;\n      const imag = complexVals.complexTensorInfos.imag;\n      const realVals = cpuBackend.data.get(real.dataId).values as Float32Array;\n      const imagVals = cpuBackend.data.get(imag.dataId).values as Float32Array;\n      for (let i = 0; i < realVals.length; i++) {\n        const real = realVals[i];\n        const imag = imagVals[i];\n        resultValues[i] = Math.hypot(real, imag);\n      }\n\n      return cpuBackend.makeOutput(resultValues, x.shape, 'float32');\n    };\n\nexport const complexAbsConfig: KernelConfig = {\n  kernelName: ComplexAbs,\n  backendName: 'cpu',\n  kernelFunc: complexAbs as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Imag, ImagInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function imag(args: {inputs: ImagInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const imag = backend.data.get(input.dataId).complexTensorInfos.imag;\n  const imagVal = backend.data.get(imag.dataId).values;\n\n  // When complex tensor is disposed, its underlying parts will be disposed too.\n  // Make new tensor out of the imag value of the complex. This makes sure the\n  // value is still accessible even if complex tensor is disposed.\n  return backend.makeTensorInfo(imag.shape, imag.dtype, imagVal);\n}\n\nexport const imagConfig: KernelConfig = {\n  kernelName: Imag,\n  backendName: 'cpu',\n  kernelFunc: imag as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Concat, ConcatAttrs, ConcatInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {reshape} from './Reshape';\n\nexport function concat(\n    args: {inputs: ConcatInputs, backend: MathBackendCPU, attrs: ConcatAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n  let outShape = backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n\n  if (util.sizeFromShape(outShape) === 0) {\n    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n  }\n\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n  if ($inputs.length === 1) {\n    return identity({inputs: {x: $inputs[0]}, backend});\n  }\n\n  const shapes = $inputs.map(t => t.shape);\n  backend_util.assertParamsConsistent(shapes, $axis);\n\n  if ($inputs[0].dtype === 'complex64') {\n    const reals = $inputs.map((t) => real({inputs: {input: t}, backend}));\n    const imags = $inputs.map((t) => imag({inputs: {input: t}, backend}));\n\n    const realConcated = concat({inputs: reals, backend, attrs: {axis: $axis}});\n    const imagConcated = concat({inputs: imags, backend, attrs: {axis: $axis}});\n\n    const result =\n        complex({inputs: {real: realConcated, imag: imagConcated}, backend});\n\n    reals.forEach(r => backend.disposeIntermediateTensorInfo(r));\n    imags.forEach(i => backend.disposeIntermediateTensorInfo(i));\n    backend.disposeIntermediateTensorInfo(realConcated);\n    backend.disposeIntermediateTensorInfo(imagConcated);\n\n    return result;\n  }\n\n  // Any concat of n-dimensional tensors across any axis can be reduced to\n  // a concatenation of two-dimensional tensors across the axis 1 by first\n  // partitioning the axes of the original tensors into those less than the\n  // axis to be concatenated and the rest. Then reshape the tensors\n  // into a two-dimensional tensor by collapsing these two sets of axes and\n  // concatenate the resulting matrices across the axis 1, finally reshaping\n  // the result to have the proper shape.\n  const inputs2D = $inputs.map(t => {\n    const innerSize = util.sizeFromShape(t.shape.slice($axis));\n    const shape = [-1, innerSize];\n    return reshape({inputs: {x: t}, backend, attrs: {shape}});\n  });\n\n  // Concats 2d tensors along axis=1.\n  outShape =\n      backend_util.computeOutShape(inputs2D.map(t => t.shape), 1 /* axis */);\n\n  const outVals = util.getTypedArrayFromDType(\n      $inputs[0].dtype as 'float32', util.sizeFromShape(outShape));\n\n  if (inputs2D[0].shape[0] === 1) {\n    // Use built-in TypedArray.set() method for speed.\n    let offset = 0;\n    inputs2D.forEach(t => {\n      const val = backend.data.get(t.dataId).values as TypedArray;\n      const size = util.sizeFromShape(t.shape);\n\n      outVals.set(val, offset);\n      offset += size;\n    });\n  } else {\n    let colOffset = 0;\n\n    inputs2D.forEach(t => {\n      const tVals = backend.data.get(t.dataId).values as TypedArray;\n\n      let tIdx = 0;\n\n      for (let row = 0; row < t.shape[0]; ++row) {\n        const resIdx = row * outShape[1] + colOffset;\n        for (let col = 0; col < t.shape[1]; ++col) {\n          outVals[resIdx + col] = tVals[tIdx++];\n        }\n      }\n\n      colOffset += t.shape[1];\n    });\n  }\n\n  const finalOutShape =\n      backend_util.computeOutShape($inputs.map(t => t.shape), $axis);\n\n  const outInfo =\n      backend.makeTensorInfo(finalOutShape, inputs[0].dtype, outVals);\n\n  inputs2D.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return outInfo;\n}\n\nexport const concatConfig: KernelConfig = {\n  kernelName: Concat,\n  backendName: 'cpu',\n  kernelFunc: concat as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2D, Conv2DAttrs, Conv2DInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2D(\n    args: {inputs: Conv2DInputs, backend: MathBackendCPU, attrs: Conv2DAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dataFormat, dilations, dimRoundingMode} = attrs;\n\n  assertNotComplex([x, filter], 'conv2d');\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const padLeft = convInfo.padInfo.left;\n  const padTop = convInfo.padInfo.top;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const xBatchStride = xStrides[0];\n  const xRowStride = isChannelsLast ? xStrides[1] : xStrides[2];\n  const xColStride = isChannelsLast ? xStrides[2] : 1;\n  const xChannelStride = isChannelsLast ? 1 : xStrides[1];\n  const yBatchStride = y.strides[0];\n  const yRowStride = isChannelsLast ? y.strides[1] : y.strides[2];\n  const yColStride = isChannelsLast ? y.strides[2] : 1;\n  const yChannelStride = isChannelsLast ? 1 : y.strides[1];\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xBatchStride;\n    const yOffset1 = b * yBatchStride;\n    for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n      const yOffset2 = yOffset1 + yR * yRowStride;\n      const xRCorner = yR * convInfo.strideHeight - padTop;\n      for (let wR = 0; wR < filterHeight; ++wR) {\n        const xR = xRCorner + wR * dilationHeight;\n        if (xR < 0 || xR >= convInfo.inHeight) {\n          continue;\n        }\n        const wOffset1 = wR * filterStrides[0];\n        const xOffset2 = xOffset1 + xR * xRowStride;\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const yOffset3 = yOffset2 + yC * yColStride;\n          const xCCorner = yC * convInfo.strideWidth - padLeft;\n          for (let wC = 0; wC < filterWidth; ++wC) {\n            const xC = xCCorner + wC * dilationWidth;\n            if (xC < 0 || xC >= convInfo.inWidth) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wC * filterStrides[1];\n            const xOffset3 = xOffset2 + xC * xColStride;\n            let wOffset3 = wOffset2;\n            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n              const xVal = xVals[xOffset3 + d1 * xChannelStride];\n              for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                yVals[yOffset3 + d2 * yChannelStride] +=\n                    xVal * wVals[wOffset3 + d2];\n              }\n              wOffset3 += convInfo.outChannels;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, yVals);\n}\n\nexport const conv2DConfig: KernelConfig = {\n  kernelName: Conv2D,\n  backendName: 'cpu',\n  kernelFunc: conv2D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropFilter, Conv2DBackpropFilterAttrs, Conv2DBackpropFilterInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2DBackpropFilter(args: {\n  inputs: Conv2DBackpropFilterInputs,\n  backend: MathBackendCPU,\n  attrs: Conv2DBackpropFilterAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, dataFormat, dimRoundingMode, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'conv2dBackpropFilter');\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad, dimRoundingMode, false /* depthwise */,\n      $dataFormat);\n\n  const {strideHeight, strideWidth, filterHeight, filterWidth} = convInfo;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const dW = new TensorBuffer(convInfo.filterShape, 'float32');\n\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const dyVals = backend.data.get(dy.dataId).values as TypedArray;\n\n  const xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n  const dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n\n  for (let wR = 0; wR < filterHeight; ++wR) {\n    const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n    const yRMax = Math.min(\n        convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n    for (let wC = 0; wC < filterWidth; ++wC) {\n      const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n      const yCMax = Math.min(\n          convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n      for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n        for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n          let dotProd = 0;\n          for (let b = 0; b < convInfo.batchSize; ++b) {\n            for (let yR = yRMin; yR < yRMax; ++yR) {\n              const xR = wR + yR * strideHeight - topPad;\n              for (let yC = yCMin; yC < yCMax; ++yC) {\n                const xC = wC + yC * strideWidth - leftPad;\n                if (isChannelsLast) {\n                  dotProd += (xBuf.get(b, xR, xC, d1) as number) *\n                      (dyBuf.get(b, yR, yC, d2) as number);\n                } else {\n                  dotProd += (xBuf.get(b, d1, xR, xC) as number) *\n                      (dyBuf.get(b, d2, yR, yC) as number);\n                }\n              }\n            }\n          }\n          dW.set(dotProd, wR, wC, d1, d2);\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\n\nexport const conv2DBackpropFilterConfig: KernelConfig = {\n  kernelName: Conv2DBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: conv2DBackpropFilter as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropInput, Conv2DBackpropInputAttrs, Conv2DBackpropInputInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2DBackpropInput(args: {\n  inputs: Conv2DBackpropInputInputs,\n  backend: MathBackendCPU,\n  attrs: Conv2DBackpropInputAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {inputShape, strides, pad, dataFormat, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, filter], 'conv2dBackpropInput');\n\n  const filterStrides = util.computeStrides(filter.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n\n  let $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2] = filterStrides;\n  const {\n    batchSize,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inHeight,\n    inWidth,\n    outChannels,\n    outHeight,\n    outWidth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  $dataFormat = convInfo.dataFormat;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n  const isChannelsLast = $dataFormat === 'channelsLast';\n  const xBatchStride = dx.strides[0];\n  const xRowStride = isChannelsLast ? dx.strides[1] : dx.strides[2];\n  const xColStride = isChannelsLast ? dx.strides[2] : 1;\n  const xChannelStride = isChannelsLast ? 1 : dx.strides[1];\n  const yBatchStride = dyStrides[0];\n  const yRowStride = isChannelsLast ? dyStrides[1] : dyStrides[2];\n  const yColStride = isChannelsLast ? dyStrides[2] : 1;\n  const yChannelStride = isChannelsLast ? 1 : dyStrides[1];\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      for (let xR = 0; xR < inHeight; ++xR) {\n        const xRCorner = xR - topPad;\n        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        const yRMax =\n            Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n        for (let xC = 0; xC < inWidth; ++xC) {\n          const xCCorner = xC - leftPad;\n          const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          const yCMax =\n              Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n          let dotProd = 0;\n          for (let yR = xRMin; yR < yRMax; ++yR) {\n            const wR = yR * strideHeight - xRCorner;\n\n            for (let yC = xCMin; yC < yCMax; ++yC) {\n              const wC = yC * strideWidth - xCCorner;\n              const dyOffset =\n                  yBatchStride * b + yRowStride * yR + yColStride * yC;\n              const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                  fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n              for (let d2 = 0; d2 < outChannels; ++d2) {\n                const pixel = dyValues[dyOffset + yChannelStride * d2];\n                const weight = fltValues[fltOffset + d2];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n          const dxOffset = xBatchStride * b + xRowStride * xR +\n              xColStride * xC + xChannelStride * d1;\n          dxValues[dxOffset] = dotProd;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const conv2DBackpropInputConfig: KernelConfig = {\n  kernelName: Conv2DBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: conv2DBackpropInput as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3D, Conv3DAttrs, Conv3DInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3D(\n    args: {inputs: Conv3DInputs, backend: MathBackendCPU, attrs: Conv3DAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  assertNotComplex([x, filter], 'conv3d');\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number],\n      filter.shape as [number, number, number, number, number], strides,\n      dilations, pad);\n\n  const {\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    dilationDepth,\n    dilationHeight,\n    dilationWidth,\n    padInfo\n  } = convInfo;\n  const padFront = padInfo.front;\n  const padLeft = padInfo.left;\n  const padTop = padInfo.top;\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xStrides[0];\n    const yOffset1 = b * y.strides[0];\n    for (let yF = 0; yF < convInfo.outDepth; ++yF) {\n      const yOffset2 = yOffset1 + yF * y.strides[1];\n      const xFCorner = yF * convInfo.strideDepth - padFront;\n      for (let wF = 0; wF < filterDepth; ++wF) {\n        const xF = xFCorner + wF * dilationDepth;\n        if (xF < 0 || xF >= convInfo.inDepth) {\n          continue;\n        }\n        const wOffset1 = wF * filterStrides[0];\n        const xOffset2 = xOffset1 + xF * xStrides[1];\n\n        for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n          const yOffset3 = yOffset2 + yR * y.strides[2];\n          const xRCorner = yR * convInfo.strideHeight - padTop;\n          for (let wR = 0; wR < filterHeight; ++wR) {\n            const xR = xRCorner + wR * dilationHeight;\n            if (xR < 0 || xR >= convInfo.inHeight) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wR * filterStrides[1];\n            const xOffset3 = xOffset2 + xR * xStrides[2];\n            for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n              const yOffset4 = yOffset3 + yC * convInfo.outChannels;\n              const xCCorner = yC * convInfo.strideWidth - padLeft;\n              for (let wC = 0; wC < filterWidth; ++wC) {\n                const xC = xCCorner + wC * dilationWidth;\n                if (xC < 0 || xC >= convInfo.inWidth) {\n                  continue;\n                }\n                const wOffset3 = wOffset2 + wC * filterStrides[2];\n                const xOffset4 = xOffset3 + xC * convInfo.inChannels;\n                let wOffset4 = wOffset3;\n                for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                  const xVal = xVals[xOffset4 + d1];\n                  for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                    yVals[yOffset4 + d2] += xVal * wVals[wOffset4 + d2];\n                  }\n                  wOffset4 += convInfo.outChannels;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, y.values);\n}\n\nexport const conv3DConfig: KernelConfig = {\n  kernelName: Conv3D,\n  backendName: 'cpu',\n  kernelFunc: conv3D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropFilterV2, Conv3DBackpropFilterV2Attrs, Conv3DBackpropFilterV2Inputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3DBackpropFilterV2(args: {\n  inputs: Conv3DBackpropFilterV2Inputs,\n  backend: MathBackendCPU,\n  attrs: Conv3DBackpropFilterV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'conv3dBackpropFilterV2');\n\n  const xStrides = util.computeStrides(x.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad);\n\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterDepth = convInfo.filterDepth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n\n  const dw = new TensorBuffer(convInfo.filterShape, 'float32');\n  const dwValues = dw.values;\n  const [dwS0, dwS1, dwS2, dwS3] = dw.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const [xS0, xS1, xS2, xS3] = xStrides;\n\n  const frontPad = convInfo.padInfo.front;\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n\n  for (let wF = 0; wF < filterDepth; ++wF) {\n    const yFMin = Math.max(0, Math.ceil((frontPad - wF) / strideDepth));\n    const yFMax = Math.min(\n        convInfo.outDepth, (convInfo.inDepth + frontPad - wF) / strideDepth);\n    const wOffset1 = wF * dwS0;\n\n    for (let wR = 0; wR < filterHeight; ++wR) {\n      const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n      const yRMax = Math.min(\n          convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n      const wOffset2 = wR * dwS1 + wOffset1;\n\n      for (let wC = 0; wC < filterWidth; ++wC) {\n        const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n        const yCMax = Math.min(\n            convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n        const wOffset3 = wC * dwS2 + wOffset2;\n\n        for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n          const wOffset4 = d1 * dwS3 + wOffset3;\n\n          for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n            let dotProd = 0;\n            for (let b = 0; b < convInfo.batchSize; ++b) {\n              const xOffset1 = b * xS0;\n              const yOffset1 = b * dyS0;\n\n              for (let yF = yFMin; yF < yFMax; ++yF) {\n                const xF = wF + yF * strideDepth - frontPad;\n                const xOffset2 = xF * xS1 + xOffset1;\n                const yOffset2 = yF * dyS1 + yOffset1;\n\n                for (let yR = yRMin; yR < yRMax; ++yR) {\n                  const xR = wR + yR * strideHeight - topPad;\n                  const xOffset3 = xR * xS2 + xOffset2;\n                  const yOffset3 = yR * dyS2 + yOffset2;\n\n                  for (let yC = yCMin; yC < yCMax; ++yC) {\n                    const xC = wC + yC * strideWidth - leftPad;\n                    const xOffset4 = xC * xS3 + xOffset3;\n                    const yOffset4 = yC * dyS3 + yOffset3;\n\n                    dotProd += xValues[xOffset4 + d1] * dyValues[yOffset4 + d2];\n                  }\n                }\n              }\n            }\n            dwValues[wOffset4 + d2] = dotProd;\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dw.shape, dw.dtype, dw.values);\n}\n\nexport const conv3DBackpropFilterV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropFilterV2,\n  backendName: 'cpu',\n  kernelFunc: conv3DBackpropFilterV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropInputV2, Conv3DBackpropInputV2Attrs, Conv3DBackpropInputV2Inputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3DBackpropInputV2(args: {\n  inputs: Conv3DBackpropInputV2Inputs,\n  backend: MathBackendCPU,\n  attrs: Conv3DBackpropInputV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {pad, strides, inputShape} = attrs;\n\n  assertNotComplex([dy], 'conv3dBackpropInputV2');\n\n  const dyStrides = util.computeStrides(dy.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const convInfo = backend_util.computeConv3DInfo(\n      inputShape, filter.shape as [number, number, number, number, number],\n      strides, 1 /* dilations */, pad);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const [dxS0, dxS1, dxS2, dxS3] = dx.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2, fltS3] = filterStrides;\n  const {\n    batchSize,\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inDepth,\n    inHeight,\n    inWidth,\n    outChannels,\n    outDepth,\n    outHeight,\n    outWidth,\n    strideDepth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  const frontPad = filterDepth - 1 - convInfo.padInfo.front;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      // Frames of depth\n      for (let xF = 0; xF < inDepth; ++xF) {\n        const xFCorner = xF - frontPad;\n        const xFMin = Math.max(0, Math.ceil(xFCorner / strideDepth));\n        const yFMax =\n            Math.min(outDepth, (filterDepth + xFCorner) / strideDepth);\n\n        // Rows as per standard 2d matrix notation\n        for (let xR = 0; xR < inHeight; ++xR) {\n          const xRCorner = xR - topPad;\n          const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n          const yRMax =\n              Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n          // Columns as per standard 2d matrix notation\n          for (let xC = 0; xC < inWidth; ++xC) {\n            const xCCorner = xC - leftPad;\n            const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n            const yCMax =\n                Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n            let dotProd = 0;\n            for (let yF = xFMin; yF < yFMax; ++yF) {\n              const wF = yF * strideDepth - xFCorner;\n\n              for (let yR = xRMin; yR < yRMax; ++yR) {\n                const wR = yR * strideHeight - xRCorner;\n\n                for (let yC = xCMin; yC < yCMax; ++yC) {\n                  const wC = yC * strideWidth - xCCorner;\n                  const dyOffset = dyS0 * b + dyS1 * yF + dyS2 * yR + dyS3 * yC;\n                  const fltOffset = fltS0 * (filterDepth - 1 - wF) +\n                      fltS1 * (filterHeight - 1 - wR) +\n                      fltS2 * (filterWidth - 1 - wC) + fltS3 * d1;\n\n                  for (let d2 = 0; d2 < outChannels; ++d2) {\n                    const pixel = dyValues[dyOffset + d2];\n                    const weight = fltValues[fltOffset + d2];\n                    dotProd += pixel * weight;\n                  }\n                }\n              }\n            }\n            dxValues[dxS0 * b + dxS1 * xF + dxS2 * xR + dxS3 * xC + d1] =\n                dotProd;\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const conv3DBackpropInputV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropInputV2,\n  backendName: 'cpu',\n  kernelFunc: conv3DBackpropInputV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const cos = unaryKernelFunc(Cos, (xi) => Math.cos(xi));\n\nexport const cosConfig: KernelConfig = {\n  kernelName: Cos,\n  backendName: 'cpu',\n  kernelFunc: cos,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const cosh = unaryKernelFunc(Cosh, (xi) => Math.cosh(xi));\n\nexport const coshConfig: KernelConfig = {\n  kernelName: Cosh,\n  backendName: 'cpu',\n  kernelFunc: cosh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, CropAndResize, CropAndResizeAttrs, CropAndResizeInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function cropAndResize(args: {\n  inputs: CropAndResizeInputs,\n  backend: MathBackendCPU,\n  attrs: CropAndResizeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {image, boxes, boxInd} = inputs;\n  const {cropSize, method, extrapolationValue} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const numBoxes = boxes.shape[0];\n\n  const [cropHeight, cropWidth] = cropSize;\n  const output =\n      buffer([numBoxes, cropHeight, cropWidth, numChannels], 'float32');\n\n  const boxVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const boxIndVals = backend.data.get(boxInd.dataId).values as TypedArray;\n  const imageVals = backend.data.get(image.dataId).values as TypedArray;\n\n  const inStride =\n      util.computeStrides(image.shape);  // to calculate flat indexes into image\n  const outStride = util.computeStrides(\n      output.shape);  // to calculate flat indexes into output\n\n  // Reference implementation\n  // tslint:disable-next-line:max-line-length\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op.cc\n  for (let b = 0; b < numBoxes; b++) {\n    const startInd = b * 4;\n    const y1 = boxVals[startInd];\n    const x1 = boxVals[startInd + 1];\n    const y2 = boxVals[startInd + 2];\n    const x2 = boxVals[startInd + 3];\n\n    const bInd: number = boxIndVals[b];\n    if (bInd >= batch) {\n      continue;\n    }\n\n    const heightScale =\n        (cropHeight > 1) ? (y2 - y1) * (imageHeight - 1) / (cropHeight - 1) : 0;\n    const widthScale =\n        (cropWidth > 1) ? (x2 - x1) * (imageWidth - 1) / (cropWidth - 1) : 0;\n\n    for (let y = 0; y < cropHeight; y++) {\n      const yInd: number = (cropHeight > 1) ?\n          y1 * (imageHeight - 1) + y * (heightScale) :\n          0.5 * (y1 + y2) * (imageHeight - 1);\n\n      if (yInd < 0 || yInd > imageHeight - 1) {\n        for (let x = 0; x < cropWidth; x++) {\n          for (let c = 0; c < numChannels; c++) {\n            const ind =\n                c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[ind] = extrapolationValue;\n          }\n        }\n        continue;\n      }\n\n      if (method === 'bilinear') {\n        const topInd = Math.floor(yInd);\n        const bottomInd = Math.ceil(yInd);\n        const yLerp = yInd - topInd;\n\n        for (let x = 0; x < cropWidth; x++) {\n          const xInd = (cropWidth > 1) ?\n              x1 * (imageWidth - 1) + x * widthScale :\n              0.5 * (x1 + x2) * (imageWidth - 1);\n\n          if (xInd < 0 || xInd > imageWidth - 1) {\n            for (let c = 0; c < numChannels; c++) {\n              const ind =\n                  c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = extrapolationValue;\n            }\n            continue;\n          }\n\n          const leftInd = Math.floor(xInd);\n          const rightInd = Math.ceil(xInd);\n          const xLerp = xInd - leftInd;\n\n          for (let c = 0; c < numChannels; c++) {\n            let ind = c + leftInd * inStride[2] + topInd * inStride[1] +\n                bInd * inStride[0];\n            const topLeft = imageVals[ind];\n\n            ind = c + rightInd * inStride[2] + topInd * inStride[1] +\n                bInd * inStride[0];\n            const topRight = imageVals[ind];\n\n            ind = c + leftInd * inStride[2] + bottomInd * inStride[1] +\n                bInd * inStride[0];\n            const bottomLeft = imageVals[ind];\n\n            ind = c + rightInd * inStride[2] + bottomInd * inStride[1] +\n                bInd * inStride[0];\n            const bottomRight = imageVals[ind];\n\n            const top = topLeft + (topRight - topLeft) * xLerp;\n            const bottom = bottomLeft + (bottomRight - bottomLeft) * xLerp;\n\n            ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[ind] = top + ((bottom - top) * yLerp);\n          }\n        }\n      } else {  // method == \"nearest\"\n        for (let x = 0; x < cropWidth; ++x) {\n          const xInd = (cropWidth > 1) ?\n              x1 * (imageWidth - 1) + x * widthScale :\n              0.5 * (x1 + x2) * (imageWidth - 1);\n\n          if (xInd < 0 || xInd > imageWidth - 1) {\n            for (let c = 0; c < numChannels; c++) {\n              const ind =\n                  c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = extrapolationValue;\n            }\n            continue;\n          }\n\n          const closestX = Math.round(xInd);\n          const closestY = Math.round(yInd);\n          for (let c = 0; c < numChannels; c++) {\n            const inInd = c + closestX * inStride[2] + closestY * inStride[1] +\n                bInd * inStride[0];\n            const outInd =\n                c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[outInd] = imageVals[inInd];\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(output.shape, output.dtype, output.values);\n}\n\nexport const cropAndResizeConfig: KernelConfig = {\n  kernelName: CropAndResize,\n  backendName: 'cpu',\n  kernelFunc: cropAndResize as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Cumsum, CumsumAttrs, CumsumInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function cumsum(\n    args: {inputs: CumsumInputs, backend: MathBackendCPU, attrs: CumsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n\n  assertNotComplex(x, 'cumsum');\n\n  const permutation = backend_util.getAxesPermutation([axis], x.shape.length);\n  let $x = x;\n  if (permutation != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n  }\n  const permutedAxis = backend_util.getInnerMostAxes(1, x.shape.length)[0];\n\n  if (permutedAxis !== $x.shape.length - 1) {\n    throw new Error(\n        `backend.cumsum in CPU expects an inner-most ` +\n        `axis=${$x.shape.length - 1} but got axis=${permutedAxis}`);\n  }\n\n  const resultDtype = upcastType($x.dtype, 'int32');\n  const vals = util.makeZerosTypedArray(\n                   util.sizeFromShape($x.shape), resultDtype) as TypedArray;\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  const finalDim = $x.shape[$x.shape.length - 1];\n  const indexAdjuster = reverse ?\n      (i: number, j: number) => i + finalDim - j - 1 :\n      (i: number, j: number) => i + j;\n  for (let i = 0; i < aVals.length; i += finalDim) {\n    for (let j = 0; j < finalDim; j++) {\n      const idx = indexAdjuster(i, j);\n      if (j === 0) {\n        vals[idx] = exclusive ? 0 : aVals[idx];\n      } else {\n        const prevIdx = indexAdjuster(i, j - 1);\n        vals[idx] = exclusive ? aVals[prevIdx] + vals[prevIdx] :\n                                aVals[idx] + vals[prevIdx];\n      }\n    }\n  }\n\n  const result = backend.makeTensorInfo($x.shape, resultDtype, vals);\n\n  if (permutation != null) {\n    const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose(\n        {inputs: {x: result}, backend, attrs: {perm: reversePermutation}});\n\n    backend.disposeIntermediateTensorInfo(result);\n    backend.disposeIntermediateTensorInfo($x);\n\n    return reverseTransposedResult;\n  }\n\n  return result;\n}\n\nexport const cumsumConfig: KernelConfig = {\n  kernelName: Cumsum,\n  backendName: 'cpu',\n  kernelFunc: cumsum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DenseBincount, DenseBincountAttrs, DenseBincountInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {bincountImpl, bincountReduceImpl} from './Bincount_impl';\n\nexport function denseBincount(args: {\n  inputs: DenseBincountInputs,\n  backend: MathBackendCPU,\n  attrs: DenseBincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size, binaryOutput} = attrs;\n\n  if (x.shape.length === 1) {\n    const xVals = backend.data.get(x.dataId).values as TypedArray;\n    const weightsVals = backend.data.get(weights.dataId).values as TypedArray;\n\n    const outVals =\n        bincountImpl(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n    return backend.makeTensorInfo([size], weights.dtype, outVals);\n  } else if (x.shape.length === 2) {\n    const xBuf = backend.bufferSync(x);\n    const weightsBuf = backend.bufferSync(weights);\n\n    const outBuf = bincountReduceImpl(xBuf, weightsBuf, size, binaryOutput);\n\n    return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);\n  }\n\n  throw new Error(\n      `Error in denseBincount: input must be at most rank 2, but got rank` +\n      `${x.shape.length}.`);\n}\n\nexport const denseBincountConfig: KernelConfig = {\n  kernelName: DenseBincount,\n  backendName: 'cpu',\n  kernelFunc: denseBincount as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DepthToSpace, DepthToSpaceAttrs, DepthToSpaceInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function depthToSpace(args: {\n  inputs: DepthToSpaceInputs,\n  backend: MathBackendCPU,\n  attrs: DepthToSpaceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockSize, dataFormat} = attrs;\n\n  util.assert(\n      dataFormat === 'NHWC',\n      () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${\n          dataFormat}`);\n  util.assert(\n      blockSize > 1,\n      () => `blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);\n\n  const batchSize = x.shape[0];\n  const inputHeight = x.shape[1];\n  const inputWidth = x.shape[2];\n  const inputDepth = x.shape[3];\n\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const result =\n      new Float32Array(batchSize * outputHeight * outputWidth * outputDepth);\n\n  let outputIdx = 0;\n  for (let b = 0; b < batchSize; ++b) {\n    for (let h = 0; h < outputHeight; ++h) {\n      const inH = Math.floor(h / blockSize);\n      const offsetH = (h % blockSize);\n      for (let w = 0; w < outputWidth; ++w) {\n        const inW = Math.floor(w / blockSize);\n        const offsetW = (w % blockSize);\n        const offsetD = (offsetH * blockSize + offsetW) * outputDepth;\n        for (let d = 0; d < outputDepth; ++d) {\n          const inD = d + offsetD;\n          const inputIdx =\n              inD + inputDepth * (inW + inputWidth * (inH + inputHeight * b));\n          result[outputIdx++] = xValues[inputIdx];\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batchSize, outputHeight, outputWidth, outputDepth], x.dtype, result);\n}\n\nexport const depthToSpaceConfig: KernelConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'cpu',\n  kernelFunc: depthToSpace as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNative, DepthwiseConv2dNativeAttrs, DepthwiseConv2dNativeInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNative(args: {\n  inputs: DepthwiseConv2dNativeInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations, dimRoundingMode} = attrs;\n\n  assertNotComplex([x, filter], 'depthwiseConv2DNative');\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  const {filterHeight, filterWidth, dilationHeight, dilationWidth, padInfo} =\n      convInfo;\n  const padLeft = padInfo.left;\n  const padTop = padInfo.top;\n  const chMul = convInfo.outChannels / convInfo.inChannels;\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xStrides[0];\n    const yOffset1 = b * y.strides[0];\n    for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n      const yOffset2 = yOffset1 + yR * y.strides[1];\n      const xRCorner = yR * convInfo.strideHeight - padLeft;\n      for (let wR = 0; wR < filterHeight; ++wR) {\n        const xR = xRCorner + wR * dilationHeight;\n        if (xR < 0 || xR >= convInfo.inHeight) {\n          continue;\n        }\n        const wOffset1 = wR * filterStrides[0];\n        const xOffset2 = xOffset1 + xR * xStrides[1];\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const yOffset3 = yOffset2 + yC * y.strides[2];\n          const xCCorner = yC * convInfo.strideWidth - padTop;\n          for (let wC = 0; wC < filterWidth; ++wC) {\n            const xC = xCCorner + wC * dilationWidth;\n            if (xC < 0 || xC >= convInfo.inWidth) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wC * filterStrides[1];\n            const xOffset3 = xOffset2 + xC * convInfo.inChannels;\n            let yOffset4 = yOffset3;\n            let wOffset3 = wOffset2;\n            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n              const xVal = xVals[xOffset3 + d1];\n              for (let q = 0; q < chMul; ++q) {\n                yVals[yOffset4 + q] += xVal * wVals[wOffset3 + q];\n              }\n              yOffset4 += chMul;\n              wOffset3 += chMul;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, y.values);\n}\n\nexport const depthwiseConv2dNativeConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNative as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropFilter, DepthwiseConv2dNativeBackpropFilterAttrs, DepthwiseConv2dNativeBackpropFilterInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNativeBackpropFilter(args: {\n  inputs: DepthwiseConv2dNativeBackpropFilterInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeBackpropFilterAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'depthwiseConv2dNativeBackpropFilter');\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const {strideHeight, strideWidth, filterHeight, filterWidth} = convInfo;\n\n  const dW = new TensorBuffer(convInfo.filterShape, 'float32');\n\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n  const chMul = convInfo.outChannels / convInfo.inChannels;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n  const dyVals = backend.data.get(dy.dataId).values as TypedArray;\n  const dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n  for (let wR = 0; wR < filterHeight; ++wR) {\n    const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n    const yRMax = Math.min(\n        convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n    for (let wC = 0; wC < filterWidth; ++wC) {\n      const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n      const yCMax = Math.min(\n          convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n      for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n        const d1 = Math.trunc(d2 / chMul);\n        const dm = d2 % chMul;\n\n        let dotProd = 0;\n        for (let b = 0; b < convInfo.batchSize; ++b) {\n          for (let yR = yRMin; yR < yRMax; ++yR) {\n            const xR = wR + yR * strideHeight - topPad;\n            for (let yC = yCMin; yC < yCMax; ++yC) {\n              const xC = wC + yC * strideWidth - leftPad;\n              dotProd += (xBuf.get(b, xR, xC, d1) as number) *\n                  (dyBuf.get(b, yR, yC, d2) as number);\n            }\n          }\n        }\n        dW.set(dotProd, wR, wC, d1, dm);\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\n\nexport const depthwiseConv2dNativeBackpropFilterConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNativeBackpropFilter as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropInput, DepthwiseConv2dNativeBackpropInputAttrs, DepthwiseConv2dNativeBackpropInputInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNativeBackpropInput(args: {\n  inputs: DepthwiseConv2dNativeBackpropInputInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeBackpropInputAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, inputShape} = attrs;\n\n  assertNotComplex([dy, filter], 'depthwiseConv2DNativeBackpropInput');\n\n  const dyStrides = util.computeStrides(dy.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const [dxS0, dxS1, dxS2] = dx.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2] = dyStrides;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2] = filterStrides;\n  const {\n    batchSize,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inHeight,\n    inWidth,\n    outChannels,\n    outHeight,\n    outWidth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n  const chMul = outChannels / inChannels;\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      for (let xR = 0; xR < inHeight; ++xR) {\n        const xRCorner = xR - topPad;\n        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        const yRMax =\n            Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n        for (let xC = 0; xC < inWidth; ++xC) {\n          const xCCorner = xC - leftPad;\n          const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          const yCMax =\n              Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n          let dotProd = 0;\n          for (let yR = xRMin; yR < yRMax; ++yR) {\n            const wR = yR * strideHeight - xRCorner;\n\n            for (let yC = xCMin; yC < yCMax; ++yC) {\n              const wC = yC * strideWidth - xCCorner;\n              const dyOffset = dyS0 * b + dyS1 * yR + dyS2 * yC;\n              const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                  fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n              for (let dm = 0; dm < chMul; ++dm) {\n                const d2 = d1 * chMul + dm;\n                const pixel = dyValues[dyOffset + d2];\n                const weight = fltValues[fltOffset + dm];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n          dxValues[dxS0 * b + dxS1 * xR + dxS2 * xC + d1] = dotProd;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const depthwiseConv2dNativeBackpropInputConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNativeBackpropInput as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, Diag, DiagInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function diag(args: {inputs: DiagInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const xSize = util.sizeFromShape(x.shape);\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = buffer([xSize, xSize], x.dtype);\n  const vals = outBuf.values;\n  for (let i = 0; i < xVals.length; i++) {\n    vals[i * xSize + i] = xVals[i];\n  }\n\n  const outShape = [...x.shape, ...x.shape];\n\n  return backend.makeTensorInfo(outShape, outBuf.dtype, outBuf.values);\n}\n\nexport const diagConfig: KernelConfig = {\n  kernelName: Diag,\n  backendName: 'cpu',\n  kernelFunc: diag as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2D, Dilation2DAttrs, Dilation2DInputs, KernelConfig, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2dConfig: KernelConfig = {\n  kernelName: Dilation2D,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter} = inputs as Dilation2DInputs;\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const xVals = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const xRank = x.shape.length;\n\n    const filterVals = cpuBackend.data.get(filter.dataId).values as TypedArray;\n    const filterRank = filter.shape.length;\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    const outSize = util.sizeFromShape(outShape);\n    const outRank = outShape.length;\n    const outputVals = util.getArrayFromDType(x.dtype, outSize);\n\n    // Upsampling the input by fill in `dilation size - 1` values between each\n    // input value.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const xIndex = util.locToIndex(\n                        [b, hIn, wIn, d], xRank, util.computeStrides(x.shape));\n                    const filterIndex = util.locToIndex(\n                        [h, w, d], filterRank,\n                        util.computeStrides(filter.shape));\n                    const val = xVals[xIndex] + filterVals[filterIndex];\n                    if (val > curVal) {\n                      curVal = val;\n                    }\n                  }\n                }\n              }\n            }\n            const outputIndex = util.locToIndex(\n                [b, hOut, wOut, d], outRank, util.computeStrides(outShape));\n            outputVals[outputIndex] = curVal;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(outputVals, x.dtype), outShape, x.dtype);\n\n    return {dataId, shape: outShape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2DAttrs, Dilation2DBackpropFilter, Tensor3D, Tensor4D, TypedArray, util} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2dBackpropFilterConfig: KernelConfig = {\n  kernelName: Dilation2DBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter, dy} =\n        inputs as {x: Tensor4D, filter: Tensor3D, dy: Tensor4D};\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const $x =\n        util.toNestedArray(\n            x.shape, cpuBackend.data.get(x.dataId).values as TypedArray) as\n        number[][][][];\n\n    const $filter = util.toNestedArray(\n                        filter.shape,\n                        cpuBackend.data.get(filter.dataId).values as\n                            TypedArray) as number[][][];\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    util.assert(\n        dy.rank === outShape.length,\n        () => `Error in ${Dilation2DBackpropFilter}, dy ` +\n            `must have the same rank as output ${outShape.length}, but got ` +\n            `${dy.rank}`);\n\n    const $dy =\n        util.toNestedArray(\n            outShape, cpuBackend.data.get(dy.dataId).values as TypedArray) as\n        number[][][][];\n\n    // The computed filter gradients has the same dimensions as the filter:\n    // [filterHeight, filterWidth, depth]\n    const gradients = util.makeZerosNestedTypedArray(\n                          filter.shape, filter.dtype) as number[][][];\n\n    // In the case of multiple argmax branches, we only back-propagate along the\n    // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n    // similarly to the max-pooling backward routines.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            let hMax = 0;\n            let wMax = 0;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n                    if (val > curVal) {\n                      curVal = val;\n                      hMax = h;\n                      wMax = w;\n                    }\n                  }\n                }\n              }\n            }\n            gradients[hMax][wMax][d] += $dy[b][hOut][wOut][d];\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(gradients, x.dtype), filter.shape, filter.dtype);\n\n    return {dataId, shape: filter.shape, dtype: filter.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2DAttrs, Dilation2DBackpropInput, Tensor3D, Tensor4D, TypedArray, util} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2dBackpropInputConfig: KernelConfig = {\n  kernelName: Dilation2DBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter, dy} =\n        inputs as {x: Tensor4D, filter: Tensor3D, dy: Tensor4D};\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const $x =\n        util.toNestedArray(\n            x.shape, cpuBackend.data.get(x.dataId).values as TypedArray) as\n        number[][][][];\n\n    const $filter = util.toNestedArray(\n                        filter.shape,\n                        cpuBackend.data.get(filter.dataId).values as\n                            TypedArray) as number[][][];\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    util.assert(\n        dy.rank === outShape.length,\n        () => `Error in ${Dilation2DBackpropInput}, dy ` +\n            `must have the same rank as output ${outShape.length}, but got ` +\n            `${dy.rank}`);\n\n    const $dy =\n        util.toNestedArray(\n            outShape, cpuBackend.data.get(dy.dataId).values as TypedArray) as\n        number[][][][];\n\n    // The computed gradients has the same dimensions as the input:\n    // [batch, inputHeight, inputCols, inChannel]\n    const gradients =\n        util.makeZerosNestedTypedArray(x.shape, x.dtype) as number[][][][];\n\n    // In the case of multiple argmax branches, we only back-propagate along the\n    // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n    // similarly to the max-pooling backward routines.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            let hInMax = (hBeg < 0) ? 0 : hBeg;\n            let wInMax = (wBeg < 0) ? 0 : wBeg;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n                    if (val > curVal) {\n                      curVal = val;\n                      hInMax = hIn;\n                      wInMax = wIn;\n                    }\n                  }\n                }\n              }\n            }\n            gradients[b][hInMax][wInMax][d] += $dy[b][hOut][wOut][d];\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(gradients, x.dtype), x.shape, x.dtype);\n\n    return {dataId, shape: x.shape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {EluGrad, EluGradInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function eluGrad(args: {inputs: EluGradInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {dy, y} = inputs;\n\n  assertNotComplex([dy, y], 'eluGrad');\n\n  const resultValues = new Float32Array(util.sizeFromShape(y.shape));\n  const values = backend.data.get(y.dataId).values as TypedArray;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  for (let i = 0; i < values.length; ++i) {\n    const v = values[i];\n    if (v >= 1) {\n      resultValues[i] = dyValues[i];\n    } else {\n      resultValues[i] = dyValues[i] * (v + 1);\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, 'float32', resultValues);\n}\n\nexport const eluGradConfig: KernelConfig = {\n  kernelName: EluGrad,\n  backendName: 'cpu',\n  kernelFunc: eluGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Equal, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const equalImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a === b) ? 1 : 0);\nexport const equal =\n    binaryKernelFunc(Equal, equalImpl, null /* complexImpl */, 'bool');\n\nexport const equalConfig: KernelConfig = {\n  kernelName: Equal,\n  backendName: 'cpu',\n  kernelFunc: equal\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Erf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nconst p = backend_util.ERF_P;\nconst a1 = backend_util.ERF_A1;\nconst a2 = backend_util.ERF_A2;\nconst a3 = backend_util.ERF_A3;\nconst a4 = backend_util.ERF_A4;\nconst a5 = backend_util.ERF_A5;\n\nexport const erf = unaryKernelFunc(\n    Erf,\n    (xi) => {\n      const sign = Math.sign(xi);\n      const v = Math.abs(xi);\n      const t = 1.0 / (1.0 + p * v);\n      return sign *\n          (1.0 -\n           (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t *\n               Math.exp(-v * v));\n    },\n);\n\nexport const erfConfig: KernelConfig = {\n  kernelName: Erf,\n  backendName: 'cpu',\n  kernelFunc: erf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ExpandDims, ExpandDimsAttrs, ExpandDimsInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {reshape} from './Reshape';\n\nexport function expandDims(args: {\n  inputs: ExpandDimsInputs,\n  backend: MathBackendCPU,\n  attrs: ExpandDimsAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {input} = inputs;\n  const {dim} = attrs;\n\n  const inputRank = input.shape.length;\n  const newShape = input.shape.slice();\n  let $dim = dim;\n  if (dim < 0) {\n    // Negative value is counted from the tail of rank.\n    util.assert(\n        -(inputRank + 1) <= dim,\n        () => `Axis must be in the interval [${- (inputRank + 1)}, ${\n            inputRank}]`);\n    $dim = inputRank + dim + 1;\n  }\n  newShape.splice($dim, 0, 1);\n\n  return reshape({inputs: {x: input}, backend, attrs: {shape: newShape}});\n}\n\nexport const expandDimsConfig: KernelConfig = {\n  kernelName: ExpandDims,\n  backendName: 'cpu',\n  kernelFunc: expandDims as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, RealDiv} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const realDivImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => a / b);\nexport const div = binaryKernelFunc(RealDiv, realDivImpl);\n\nexport const realDivConfig: KernelConfig = {\n  kernelName: RealDiv,\n  backendName: 'cpu',\n  kernelFunc: div\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Tensor, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {add} from '../kernels/Add';\nimport {complex} from '../kernels/Complex';\nimport {concat} from '../kernels/Concat';\nimport {identity} from '../kernels/Identity';\nimport {imag} from '../kernels/Imag';\nimport {multiply} from '../kernels/Multiply';\nimport {real} from '../kernels/Real';\nimport {realDivConfig} from '../kernels/RealDiv';\nimport {slice} from '../kernels/Slice';\nimport {sub} from '../kernels/Sub';\n\n/**\n * Calculate FFT of inner most elements of batch tensor.\n */\nexport function fftBatch(\n    input: TensorInfo, inverse: boolean,\n    cpuBackend: MathBackendCPU): TensorInfo {\n  const inputShape = input.shape;\n  const batch = inputShape[0];\n  const innerDim = inputShape[1];\n\n  const inputVals = cpuBackend.data.get(input.dataId);\n\n  const real2D = inputVals.complexTensorInfos.real;\n  const imag2D = inputVals.complexTensorInfos.imag;\n\n  // Collects real and imaginary values separately.\n  const resultShape = [batch, innerDim];\n  const resultSize = util.sizeFromShape(resultShape);\n  const resultReal = util.getTypedArrayFromDType('float32', resultSize);\n  const resultImag = util.getTypedArrayFromDType('float32', resultSize);\n\n  for (let b = 0; b < batch; b++) {\n    // TODO: Support slice ops for complex type.\n    const r = slice({\n      inputs: {x: real2D},\n      backend: cpuBackend,\n      attrs: {begin: [b, 0], size: [1, innerDim]}\n    });\n    const i = slice({\n      inputs: {x: imag2D},\n      backend: cpuBackend,\n      attrs: {begin: [b, 0], size: [1, innerDim]}\n    });\n\n    const input = complex({inputs: {real: r, imag: i}, backend: cpuBackend});\n\n    // Run FFT by batch element.\n    const {real, imag} = fftImpl(input, inverse, cpuBackend);\n    const res = backend_util.mergeRealAndImagArrays(real, imag);\n\n    for (let d = 0; d < innerDim; d++) {\n      const c = backend_util.getComplexWithIndex(res, d);\n      resultReal[b * innerDim + d] = c.real;\n      resultImag[b * innerDim + d] = c.imag;\n    }\n\n    cpuBackend.disposeIntermediateTensorInfo(r);\n    cpuBackend.disposeIntermediateTensorInfo(i);\n    cpuBackend.disposeIntermediateTensorInfo(input);\n  }\n\n  const $realInfo: TensorInfo =\n      cpuBackend.makeTensorInfo(resultShape, 'float32', resultReal);\n  const $imagInfo: TensorInfo =\n      cpuBackend.makeTensorInfo(resultShape, 'float32', resultImag);\n\n  const result = complex(\n      {inputs: {real: $realInfo, imag: $imagInfo}, backend: cpuBackend});\n\n  cpuBackend.disposeIntermediateTensorInfo($realInfo);\n  cpuBackend.disposeIntermediateTensorInfo($imagInfo);\n\n  return result;\n}\n\nexport function fftImpl(\n    input: TensorInfo, inverse: boolean,\n    cpuBackend: MathBackendCPU): {real: Float32Array, imag: Float32Array} {\n  const inputSize = util.sizeFromShape(input.shape);\n\n  const inputVals = cpuBackend.data.get(input.dataId);\n\n  const realVals =\n      cpuBackend.data.get(inputVals.complexTensorInfos.real.dataId).values as\n      Float32Array;\n\n  const imagVals =\n      cpuBackend.data.get(inputVals.complexTensorInfos.imag.dataId).values as\n      Float32Array;\n\n  if (isExponentOf2(inputSize)) {\n    const result =\n        fftRadix2(realVals, imagVals, inputSize, inverse, cpuBackend);\n\n    const resultShape = [input.shape[0], input.shape[1]];\n\n    if (inverse) {\n      const realInfo: TensorInfo =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', result.real);\n      const imagInfo: TensorInfo =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', result.imag);\n\n      const sizeInfo: TensorInfo = cpuBackend.makeTensorInfo(\n          [], 'float32',\n          util.createScalarValue(inputSize as {} as 'float32', 'float32'));\n      const sizeInfoCopy =\n          identity({inputs: {x: sizeInfo}, backend: cpuBackend});\n\n      const divRealInfo =\n          realDivConfig.kernelFunc(\n              {inputs: {a: realInfo, b: sizeInfo}, backend: cpuBackend}) as\n          TensorInfo;\n      const divImagInfo =\n          realDivConfig.kernelFunc(\n              {inputs: {a: imagInfo, b: sizeInfoCopy}, backend: cpuBackend}) as\n          TensorInfo;\n\n      const divRealVals =\n          cpuBackend.data.get(divRealInfo.dataId).values as Float32Array;\n      const divImagVals =\n          cpuBackend.data.get(divImagInfo.dataId).values as Float32Array;\n\n      cpuBackend.disposeIntermediateTensorInfo(realInfo);\n      cpuBackend.disposeIntermediateTensorInfo(imagInfo);\n      cpuBackend.disposeIntermediateTensorInfo(sizeInfo);\n      cpuBackend.disposeIntermediateTensorInfo(sizeInfoCopy);\n      cpuBackend.disposeIntermediateTensorInfo(divRealInfo);\n      cpuBackend.disposeIntermediateTensorInfo(divImagInfo);\n\n      return {real: divRealVals, imag: divImagVals};\n    }\n\n    return result;\n  } else {\n    const data = backend_util.mergeRealAndImagArrays(realVals, imagVals);\n\n    const rawOutput =\n        fourierTransformByMatmul(data, inputSize, inverse) as Float32Array;\n\n    return backend_util.splitRealAndImagArrays(rawOutput);\n  }\n}\n\nfunction isExponentOf2(size: number): boolean {\n  return (size & size - 1) === 0;\n}\n\n// FFT using Cooley-Tukey algorithm on radix 2 dimensional input.\nfunction fftRadix2(\n    realVals: Float32Array, imagVals: Float32Array, size: number,\n    inverse: boolean,\n    cpuBackend: MathBackendCPU): {real: Float32Array, imag: Float32Array} {\n  if (size === 1) {\n    return {real: realVals, imag: imagVals};\n  }\n\n  const data = backend_util.mergeRealAndImagArrays(realVals, imagVals);\n\n  const half = size / 2;\n\n  const evenComplex = backend_util.complexWithEvenIndex(data);\n\n  const evenRealVals = evenComplex.real;\n  const evenImagVals = evenComplex.imag;\n\n  const evenShape = [evenRealVals.length];\n\n  const evenRealInfo =\n      cpuBackend.makeTensorInfo(evenShape, 'float32', evenRealVals);\n  const evenImagInfo =\n      cpuBackend.makeTensorInfo(evenShape, 'float32', evenImagVals);\n\n  const evenTensorInfo = complex(\n      {inputs: {real: evenRealInfo, imag: evenImagInfo}, backend: cpuBackend});\n\n  const oddComplex = backend_util.complexWithOddIndex(data);\n\n  const oddRealVals = oddComplex.real;\n  const oddImagVals = oddComplex.imag;\n\n  const oddShape = [oddRealVals.length];\n\n  const oddRealInfo =\n      cpuBackend.makeTensorInfo(oddShape, 'float32', oddRealVals);\n  const oddImagInfo =\n      cpuBackend.makeTensorInfo(oddShape, 'float32', oddImagVals);\n\n  const oddTensorInfo = complex(\n      {inputs: {real: oddRealInfo, imag: oddImagInfo}, backend: cpuBackend});\n\n  // Recursive call for half part of original input.\n  const $evenComplex =\n      fftRadix2(evenRealVals, evenImagVals, half, inverse, cpuBackend);\n\n  const $evenRealVals = $evenComplex.real;\n  const $evenImagVals = $evenComplex.imag;\n\n  const $evenShape = [$evenRealVals.length];\n\n  const $evenRealInfo =\n      cpuBackend.makeTensorInfo($evenShape, 'float32', $evenRealVals);\n  const $evenImagInfo =\n      cpuBackend.makeTensorInfo($evenShape, 'float32', $evenImagVals);\n\n  const $evenTensorInfo = complex({\n    inputs: {real: $evenRealInfo, imag: $evenImagInfo},\n    backend: cpuBackend\n  });\n\n  const $oddComplex =\n      fftRadix2(oddRealVals, oddImagVals, half, inverse, cpuBackend);\n\n  const $oddRealVals = $oddComplex.real;\n  const $oddImagVals = $oddComplex.imag;\n\n  const $oddShape = [$oddRealVals.length];\n\n  const $oddRealInfo =\n      cpuBackend.makeTensorInfo($oddShape, 'float32', $oddRealVals);\n  const $oddImagInfo =\n      cpuBackend.makeTensorInfo($oddShape, 'float32', $oddImagVals);\n\n  const $oddTensorInfo = complex(\n      {inputs: {real: $oddRealInfo, imag: $oddImagInfo}, backend: cpuBackend});\n\n  const e = backend_util.exponents(size, inverse);\n  const eShape = [e.real.length];\n\n  const eRealInfo = cpuBackend.makeTensorInfo(eShape, 'float32', e.real);\n  const eImagInfo = cpuBackend.makeTensorInfo(eShape, 'float32', e.imag);\n\n  const complexInfo = complex(\n      {inputs: {real: eRealInfo, imag: eImagInfo}, backend: cpuBackend});\n\n  const exponentInfo =\n      multiply(\n          {inputs: {a: complexInfo, b: $oddTensorInfo}, backend: cpuBackend}) as\n      TensorInfo;\n\n  const addPart = add({\n                    inputs: {a: $evenTensorInfo, b: exponentInfo},\n                    backend: cpuBackend\n                  }) as TensorInfo;\n  const subPart = sub({\n                    inputs: {a: $evenTensorInfo, b: exponentInfo},\n                    backend: cpuBackend\n                  }) as TensorInfo;\n\n  const addPartReal = real({inputs: {input: addPart}, backend: cpuBackend});\n  const subPartReal = real({inputs: {input: subPart}, backend: cpuBackend});\n\n  const addPartImag = imag({inputs: {input: addPart}, backend: cpuBackend});\n  const subPartImag = imag({inputs: {input: subPart}, backend: cpuBackend});\n\n  const $real = concat({\n    inputs: [addPartReal as Tensor, subPartReal as Tensor],\n    backend: cpuBackend,\n    attrs: {axis: 0}\n  });\n  const $imag = concat({\n    inputs: [addPartImag as Tensor, subPartImag as Tensor],\n    backend: cpuBackend,\n    attrs: {axis: 0}\n  });\n\n  const $realVals = cpuBackend.data.get($real.dataId).values as Float32Array;\n  const $imagVals = cpuBackend.data.get($imag.dataId).values as Float32Array;\n\n  cpuBackend.disposeIntermediateTensorInfo(evenRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(evenImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(evenTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo(eRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(eImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(complexInfo);\n  cpuBackend.disposeIntermediateTensorInfo(exponentInfo);\n  cpuBackend.disposeIntermediateTensorInfo(addPart);\n  cpuBackend.disposeIntermediateTensorInfo(subPart);\n  cpuBackend.disposeIntermediateTensorInfo(addPartReal);\n  cpuBackend.disposeIntermediateTensorInfo(addPartImag);\n  cpuBackend.disposeIntermediateTensorInfo(subPartReal);\n  cpuBackend.disposeIntermediateTensorInfo(subPartImag);\n  cpuBackend.disposeIntermediateTensorInfo($real);\n  cpuBackend.disposeIntermediateTensorInfo($imag);\n\n  return {real: $realVals, imag: $imagVals};\n}\n\n// Calculate fourier transform by multplying sinusoid matrix.\nfunction fourierTransformByMatmul(\n    data: TypedArray, size: number, inverse: boolean): TypedArray {\n  const ret = new Float32Array(size * 2);\n  // TODO: Use matmul instead once it supports complex64 type.\n  for (let r = 0; r < size; r++) {\n    let real = 0.0;\n    let imag = 0.0;\n    for (let c = 0; c < size; c++) {\n      const e = backend_util.exponent(r * c, size, inverse);\n      const term = backend_util.getComplexWithIndex(data as Float32Array, c);\n      real += term.real * e.real - term.imag * e.imag;\n      imag += term.real * e.imag + term.imag * e.real;\n    }\n    if (inverse) {\n      real /= size;\n      imag /= size;\n    }\n    backend_util.assignToTypedArray(ret, real, imag, r);\n  }\n  return ret;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FFT, FFTInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {fftBatch} from '../utils/fft_utils';\nimport {reshape} from './Reshape';\n\nexport function fft(args: {inputs: FFTInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const inputSize = util.sizeFromShape(input.shape);\n\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const input2D = reshape({\n    inputs: {x: input},\n    backend,\n    attrs: {shape: [batch, innerDimensionSize]}\n  });\n\n  const result = fftBatch(input2D, false, backend);\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: input.shape}});\n\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const fftConfig: KernelConfig = {\n  kernelName: FFT,\n  backendName: 'cpu',\n  kernelFunc: fft as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, DataValues, Fill, FillAttrs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function fill(args: {backend: MathBackendCPU, attrs: FillAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {shape, value, dtype} = attrs;\n\n  const $dtype = dtype || util.inferDtype(value);\n  const values = util.getArrayFromDType($dtype, util.sizeFromShape(shape));\n  fillValues(values, value, $dtype);\n\n  return backend.makeTensorInfo(shape, $dtype, values);\n}\n\nexport const fillConfig: KernelConfig = {\n  kernelName: Fill,\n  backendName: 'cpu',\n  kernelFunc: fill as {} as KernelFunc\n};\n\nfunction fillValues(\n    values: DataValues, value: string|number, dtype: DataType): void {\n  if (dtype === 'string') {\n    (values as string[]).fill(value as string);\n  } else {\n    (values as TypedArray).fill(value as number);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {FlipLeftRight, FlipLeftRightInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const flipLeftRightConfig: KernelConfig = {\n  kernelName: FlipLeftRight,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as FlipLeftRightInputs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const output = util.getTypedArrayFromDType(\n        image.dtype as NumericDataType, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n\n    const imageVals = cpuBackend.data.get(image.dataId).values as TypedArray;\n\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coords = [batch, row, col, channel];\n\n            const x = coords[2];\n\n            const coordX = Math.round(imageWidth - x);\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n\n            let outputValue = imageVals[outIdx];\n            // If the coordinate position falls within the image boundaries...\n            if (coordX >= 0 && coordX < imageWidth) {\n              // set the output to the image value at the coordinate position.\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx =\n                  batchOffset + rowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n            output[outIdx] = outputValue;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {dataId, shape: image.shape, dtype: image.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FloorDiv, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const floorDivImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => Math.floor(a / b));\nexport const floorDiv =\n    binaryKernelFunc(FloorDiv, floorDivImpl, null /* complexImpl */, 'int32');\n\nexport const floorDivConfig: KernelConfig = {\n  kernelName: FloorDiv,\n  backendName: 'cpu',\n  kernelFunc: floorDiv\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedConv2D, FusedConv2DAttrs, FusedConv2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\nimport {add} from './Add';\nimport {conv2D} from './Conv2D';\n\nexport function fusedConv2D(args: {\n  inputs: FusedConv2DInputs,\n  backend: MathBackendCPU,\n  attrs: FusedConv2DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  let result = conv2D({\n    inputs: {x, filter},\n    backend,\n    attrs: {strides, pad, dataFormat, dilations, dimRoundingMode}\n  });\n\n  if (bias) {\n    const resultOld = result;\n    result = add({inputs: {a: result, b: bias}, backend}) as TensorInfo;\n    backend.disposeIntermediateTensorInfo(resultOld);\n  }\n\n  if (activation) {\n    const resultOld = result;\n    result = applyActivation(\n        backend, result, activation, preluActivationWeights, leakyreluAlpha);\n    backend.disposeIntermediateTensorInfo(resultOld);\n  }\n\n  return result;\n}\n\nexport const fusedConv2DConfig: KernelConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'cpu',\n  kernelFunc: fusedConv2D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedDepthwiseConv2D, FusedDepthwiseConv2DAttrs, FusedDepthwiseConv2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\nimport {add} from './Add';\nimport {depthwiseConv2dNative} from './DepthwiseConv2dNative';\n\nexport function fusedDepthwiseConv2D(args: {\n  inputs: FusedDepthwiseConv2DInputs,\n  backend: MathBackendCPU,\n  attrs: FusedDepthwiseConv2DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  let result = depthwiseConv2dNative({\n    inputs: {x, filter},\n    backend,\n    attrs: {strides, pad, dataFormat, dilations, dimRoundingMode}\n  });\n\n  if (bias) {\n    const oldResult = result;\n    result = add({inputs: {a: result, b: bias}, backend}) as TensorInfo;\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n  if (activation) {\n    const oldResult = result;\n    result = applyActivation(\n        backend, result, activation, preluActivationWeights, leakyreluAlpha);\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n\n  return result;\n}\n\nexport const fusedDepthwiseConv2DConfig: KernelConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'cpu',\n  kernelFunc: fusedDepthwiseConv2D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, buffer, GatherNd, GatherNdInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function gatherNd(\n    args: {inputs: GatherNdInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {params, indices} = inputs;\n\n  const paramsSize = util.sizeFromShape(params.shape);\n\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n\n  const [resultShape, numSlices, sliceSize, strides] =\n      backend_util.prepareAndValidate(params, indices);\n  if (numSlices === 0) {\n    return backend.makeTensorInfo(resultShape, params.dtype, []);\n  }\n\n  const outBuf = buffer([numSlices, sliceSize], params.dtype);\n  const indicesData = backend.data.get(indices.dataId).values as TypedArray;\n  const paramsData = backend.data.get(params.dataId).values as TypedArray;\n\n  for (let i = 0; i < numSlices; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      flattenIndex += dim * strides[j];\n      index.push(dim);\n    }\n    if (flattenIndex < 0 || flattenIndex >= paramsSize / sliceSize) {\n      throw new Error(\n          `Invalid indices: ${index} does not index into ${params.shape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      outBuf.values[i * sliceSize + k] =\n          paramsData[flattenIndex * sliceSize + k];\n    }\n  }\n\n  return backend.makeTensorInfo(resultShape, outBuf.dtype, outBuf.values);\n}\n\nexport const gatherNdConfig: KernelConfig = {\n  kernelName: GatherNd,\n  backendName: 'cpu',\n  kernelFunc: gatherNd as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherV2, GatherV2Attrs, GatherV2Inputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {gatherV2Impl} from './GatherV2_impl';\nimport {reshape} from './Reshape';\n\nexport function gatherV2(args: {\n  inputs: GatherV2Inputs,\n  backend: MathBackendCPU,\n  attrs: GatherV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, indices} = inputs;\n  const {axis, batchDims} = attrs;\n\n  assertNotComplex([x, indices], 'gatherV2');\n\n  let $batchDims = batchDims;\n\n  if (batchDims == null) {\n    $batchDims = 0;\n  }\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n  const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(\n      x, indices, parsedAxis, $batchDims);\n\n  const flattenX = reshape({\n    inputs: {x},\n    backend,\n    attrs: {\n      shape: [\n        shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize,\n        shapeInfo.sliceSize\n      ]\n    }\n  });\n\n  const flattenIndex = reshape({\n    inputs: {x: indices},\n    backend,\n    attrs: {shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]}\n  });\n\n  const flattenOutputShape = [\n    shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize,\n    shapeInfo.sliceSize\n  ];\n\n  const indicesBuf = backend.bufferSync(flattenIndex);\n  const xBuf = backend.bufferSync(flattenX);\n  const outBuf = gatherV2Impl(xBuf, indicesBuf, flattenOutputShape);\n\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(flattenIndex);\n\n  return backend.makeTensorInfo(\n      shapeInfo.outputShape, outBuf.dtype, outBuf.values);\n}\n\nexport const gatherV2Config: KernelConfig = {\n  kernelName: GatherV2,\n  backendName: 'cpu',\n  kernelFunc: gatherV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GreaterEqual, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a >= b) ? 1 : 0);\nexport const greaterEqual = binaryKernelFunc(\n    GreaterEqual, greaterEqualImpl, null /* complexImpl */, 'bool');\n\nexport const greaterEqualConfig: KernelConfig = {\n  kernelName: GreaterEqual,\n  backendName: 'cpu',\n  kernelFunc: greaterEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IFFT, IFFTInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {fftBatch} from '../utils/fft_utils';\nimport {reshape} from './Reshape';\n\nexport function ifft(args: {inputs: IFFTInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const inputSize = util.sizeFromShape(input.shape);\n\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const input2D = reshape({\n    inputs: {x: input},\n    backend,\n    attrs: {shape: [batch, innerDimensionSize]}\n  });\n\n  const result = fftBatch(input2D, true, backend);\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: input.shape}});\n\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const ifftConfig: KernelConfig = {\n  kernelName: IFFT,\n  backendName: 'cpu',\n  kernelFunc: ifft as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsFinite, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isFinite =\n    unaryKernelFunc(IsFinite, (xi) => Number.isFinite(xi) ? 1 : 0, 'bool');\n\nexport const isFiniteConfig: KernelConfig = {\n  kernelName: IsFinite,\n  backendName: 'cpu',\n  kernelFunc: isFinite,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsInf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isInf =\n    unaryKernelFunc(IsInf, (xi) => Math.abs(xi) === Infinity ? 1 : 0, 'bool');\n\nexport const isInfConfig: KernelConfig = {\n  kernelName: IsInf,\n  backendName: 'cpu',\n  kernelFunc: isInf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsNan, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isNaN =\n    unaryKernelFunc(IsNan, (xi) => Number.isNaN(xi) ? 1 : 0, 'bool');\n\nexport const isNaNConfig: KernelConfig = {\n  kernelName: IsNan,\n  backendName: 'cpu',\n  kernelFunc: isNaN,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LessEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a <= b) ? 1 : 0);\nexport const lessEqual =\n    binaryKernelFunc(LessEqual, lessEqualImpl, null /* complexImpl */, 'bool');\n\nexport const lessEqualConfig: KernelConfig = {\n  kernelName: LessEqual,\n  backendName: 'cpu',\n  kernelFunc: lessEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LinSpace, LinSpaceAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {linSpaceImpl} from './LinSpace_impl';\n\nexport function linSpace(args: {backend: MathBackendCPU, attrs: LinSpaceAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {start, stop, num} = attrs;\n\n  const outVals = linSpaceImpl(start, stop, num);\n\n  return backend.makeTensorInfo([outVals.length], 'float32', outVals);\n}\n\nexport const linSpaceConfig: KernelConfig = {\n  kernelName: LinSpace,\n  backendName: 'cpu',\n  kernelFunc: linSpace as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log1p} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const log1p = unaryKernelFunc(Log1p, (xi) => Math.log1p(xi));\n\nexport const log1pConfig: KernelConfig = {\n  kernelName: Log1p,\n  backendName: 'cpu',\n  kernelFunc: log1p,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalAnd} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const logicalAndImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => a && b);\nexport const logicalAnd = binaryKernelFunc(\n    LogicalAnd, logicalAndImpl, null /* complexImpl */, 'bool');\n\nexport const logicalAndConfig: KernelConfig = {\n  kernelName: LogicalAnd,\n  backendName: 'cpu',\n  kernelFunc: logicalAnd\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalNot} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const logicalNot =\n    unaryKernelFunc(LogicalNot, (xi) => xi ? 0 : 1, 'bool');\n\nexport const logicalNotConfig: KernelConfig = {\n  kernelName: LogicalNot,\n  backendName: 'cpu',\n  kernelFunc: logicalNot,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalOr} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const logicalOrImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => a || b);\nexport const logicalOr =\n    binaryKernelFunc(LogicalOr, logicalOrImpl, null /* complexImpl */, 'bool');\n\nexport const logicalOrConfig: KernelConfig = {\n  kernelName: LogicalOr,\n  backendName: 'cpu',\n  kernelFunc: logicalOr\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRN, LRNAttrs, LRNInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function lRN(\n    args: {inputs: LRNInputs, backend: MathBackendCPU, attrs: LRNAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  assertNotComplex(x, 'LRN');\n\n  const channels = x.shape[3];\n  const maxD = channels - 1;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const size = util.sizeFromShape(x.shape);\n  const result = new Float32Array(size);\n\n  function sumAcrossChannels(offset: number) {\n    const currentChannel = offset % channels;\n    let beginSumOffset =\n        offset - currentChannel + Math.max(0, currentChannel - depthRadius);\n    const endSumOffset =\n        offset - currentChannel + Math.min(currentChannel + depthRadius, maxD);\n\n    let sum = 0.0;\n    for (; beginSumOffset <= endSumOffset; beginSumOffset++) {\n      const z = xValues[beginSumOffset];\n      sum += z * z;\n    }\n    return sum;\n  }\n\n  for (let offset = 0; offset < size; offset++) {\n    const sum = sumAcrossChannels(offset);\n    const val = xValues[offset] * Math.pow(bias + alpha * sum, -beta);\n    result[offset] = val;\n  }\n\n  return backend.makeTensorInfo(x.shape, x.dtype, result);\n}\n\nexport const lRNConfig: KernelConfig = {\n  kernelName: LRN,\n  backendName: 'cpu',\n  kernelFunc: lRN as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRNGrad, LRNGradAttrs, LRNGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function lRNGrad(\n    args:\n        {inputs: LRNGradInputs, backend: MathBackendCPU, attrs: LRNGradAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, y, dy} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  assertNotComplex(dy, 'LRNGrad');\n\n  const dySize = util.sizeFromShape(dy.shape);\n\n  const channels = dy.shape[3];\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const yValues = backend.data.get(y.dataId).values as TypedArray;\n  const result = new Float32Array(dySize);\n  const size = dySize;\n\n  for (let offset = 0; offset < size; offset++) {\n    const currentChannel = offset % channels;\n    const depthBegin =\n        (offset - currentChannel) + Math.max(0, currentChannel - depthRadius);\n    const depthEnd = (offset - currentChannel) +\n        Math.min(channels, currentChannel + depthRadius + 1);\n\n    let norm = 0;\n    for (let k = depthBegin; k < depthEnd; k++) {\n      norm += Math.pow(xValues[k], 2);\n    }\n    norm = alpha * norm + bias;\n\n    for (let k = depthBegin; k < depthEnd; k++) {\n      let dyi = -2 * alpha * beta * xValues[k] * yValues[offset] / norm;\n      if (offset === k) {\n        dyi += Math.pow(norm, -beta);\n      }\n      dyi *= dyValues[offset];\n      result[k] += dyi;\n    }\n  }\n\n  return backend.makeTensorInfo(dy.shape, x.dtype, result);\n}\n\nexport const lRNGradConfig: KernelConfig = {\n  kernelName: LRNGrad,\n  backendName: 'cpu',\n  kernelFunc: lRNGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelFunc, Max, MaxAttrs, MaxInputs, TensorInfo} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig} from '@tensorflow/tfjs-core';\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {maxImpl} from './Max_impl';\nimport {transposeImpl} from './Transpose_impl';\n\nexport function max(\n    args: {inputs: MaxInputs, backend: MathBackendCPU, attrs: MaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reductionIndices, keepDims} = attrs;\n  const cpuBackend = backend;\n  let xShape = x.shape;\n  const xRank = xShape.length;\n\n  const origAxes = util.parseAxisParam(reductionIndices, xShape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let xVals = cpuBackend.data.get(x.dataId).values as TypedArray;\n  if (permutedAxes != null) {\n    const newShape: number[] = new Array(xRank);\n    for (let i = 0; i < newShape.length; i++) {\n      newShape[i] = xShape[permutedAxes[i]];\n    }\n\n    xVals = transposeImpl(xVals, xShape, x.dtype, permutedAxes, newShape);\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n\n    xShape = newShape;\n  }\n\n  assertNotComplex(x, 'max');\n  backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n  const [maxOutShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(xShape, axes);\n\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const result = maxImpl(xVals, reduceSize, maxOutShape, x.dtype);\n  const dataId = cpuBackend.write(result, maxOutShape, x.dtype);\n\n  let outShape = maxOutShape;\n  if (keepDims) {\n    // reshape\n    const newShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n    outShape = newShape;\n  }\n\n  return {dataId, shape: outShape, dtype: x.dtype};\n}\n\nexport const maxConfig: KernelConfig = {\n  kernelName: Max,\n  backendName: 'cpu',\n  kernelFunc: max as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool, MaxPoolAttrs, MaxPoolInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool} from '../utils/pool_utils';\nimport {identity} from './Identity';\n\nexport function maxPool(\n    args:\n        {inputs: MaxPoolInputs, backend: MathBackendCPU, attrs: MaxPoolAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'maxPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  let res: TensorInfo;\n\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    res = identity({inputs: {x}, backend});\n  } else {\n    const xValues = backend.data.get(x.dataId).values as TypedArray;\n    const strides = util.computeStrides(x.shape);\n    const buffer = pool(xValues, x.shape, x.dtype, strides, convInfo, 'max');\n    res = backend.makeTensorInfo(\n        convInfo.outShape, x.dtype, buffer.values as TypedArray);\n  }\n  return res;\n}\n\nexport const maxPoolConfig: KernelConfig = {\n  kernelName: MaxPool,\n  backendName: 'cpu',\n  kernelFunc: maxPool as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, MaxPool3D, MaxPool3DAttrs, MaxPool3DInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool3d} from '../utils/pool_utils';\n\nexport function maxPool3D(args: {\n  inputs: MaxPool3DInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode, dataFormat, dilations} =\n      attrs;\n\n  assertNotComplex(x, 'maxPool3d');\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1, 1];\n  }\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      $dilations, pad, dimRoundingMode, dataFormat);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = pool3d(\n      xValues, x.shape, x.dtype, util.computeStrides(x.shape), convInfo, 'max');\n\n  return backend.makeTensorInfo(outBuf.shape, 'float32', outBuf.values);\n}\n\nexport const maxPool3DConfig: KernelConfig = {\n  kernelName: MaxPool3D,\n  backendName: 'cpu',\n  kernelFunc: maxPool3D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, buffer, KernelConfig, KernelFunc, MaxPool3DGrad, MaxPool3DGradAttrs, MaxPool3DGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {maxPool3dPositions} from '../utils/pool_utils';\n\nexport function maxPool3DGrad(args: {\n  inputs: MaxPool3DGradInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const {filterSize, strides, pad, dilations, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, input], 'maxPool3DGrad');\n\n  const convInfo = backend_util.computePool3DInfo(\n      input.shape as [number, number, number, number, number], filterSize,\n      strides, dilations, pad, dimRoundingMode);\n\n  const inputBuf = backend.bufferSync(input);\n  const maxPosBuf = maxPool3dPositions(inputBuf, convInfo);\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx = buffer(input.shape, 'float32');\n\n  const dyBuf = backend.bufferSync(dy);\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n        for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n          for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n            // Shader code begins\n            const dyDepthCorner = dxDepth - padFront;\n            const dyRowCorner = dxRow - padTop;\n            const dyColCorner = dxCol - padLeft;\n            let dotProd = 0;\n            for (let wDepth = 0; wDepth < effectiveFilterDepth;\n                 wDepth += dilationDepth) {\n              const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n              if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                  Math.floor(dyDepth) !== dyDepth) {\n                continue;\n              }\n              for (let wRow = 0; wRow < effectiveFilterHeight;\n                   wRow += dilationHeight) {\n                const dyRow = (dyRowCorner + wRow) / strideHeight;\n                if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                    Math.floor(dyRow) !== dyRow) {\n                  continue;\n                }\n                for (let wCol = 0; wCol < effectiveFilterWidth;\n                     wCol += dilationWidth) {\n                  const dyCol = (dyColCorner + wCol) / strideWidth;\n                  if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                      Math.floor(dyCol) !== dyCol) {\n                    continue;\n                  }\n\n                  const maxPos = effectiveFilterDepth * effectiveFilterHeight *\n                          effectiveFilterWidth -\n                      1 -\n                      (maxPosBuf.get(batch, dyDepth, dyRow, dyCol, channel) as\n                       number);\n                  const curPos =\n                      wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                      wRow * effectiveFilterWidth + wCol;\n\n                  const mask = maxPos === curPos ? 1 : 0;\n                  if (mask === 0) {\n                    continue;\n                  }\n\n                  const pixel =\n                      dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                  dotProd += pixel * mask;\n                }\n              }\n            }\n            dx.set(dotProd, batch, dxDepth, dxRow, dxCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const maxPool3DGradConfig: KernelConfig = {\n  kernelName: MaxPool3DGrad,\n  backendName: 'cpu',\n  kernelFunc: maxPool3DGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, buffer, KernelConfig, KernelFunc, MaxPoolGrad, MaxPoolGradAttrs, MaxPoolGradInputs, Rank, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {maxPoolPositions} from '../utils/pool_utils';\n\nexport function maxPoolGrad(args: {\n  inputs: MaxPoolGradInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input, output} = inputs;\n  const x = input;\n  assertNotComplex([input, output], 'maxPoolGrad');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode);\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const maxPosBuf = buffer(\n      convInfo.outShape, x.dtype,\n      maxPoolPositions(xValues, x.shape, x.dtype, convInfo).values);\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx =\n      buffer<Rank.R4>(x.shape as [number, number, number, number], 'float32');\n\n  const dyData = backend.data.get(dy.dataId).values as Float32Array;\n  const dyBuf = buffer<Rank.R4>(\n      dy.shape as [number, number, number, number], 'float32', dyData);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n        for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n          // Shader code begins.\n          const dyRCorner = dxR - padTop;\n          const dyCCorner = dxC - padLeft;\n          let dotProd = 0;\n          for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n            const dyR = (dyRCorner + wR) / strideHeight;\n            if (dyR < 0 || dyR >= convInfo.outHeight ||\n                Math.floor(dyR) !== dyR) {\n              continue;\n            }\n            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n              const dyC = (dyCCorner + wC) / strideWidth;\n              if (dyC < 0 || dyC >= convInfo.outWidth ||\n                  Math.floor(dyC) !== dyC) {\n                continue;\n              }\n              const maxPos = effectiveFilterHeight * effectiveFilterWidth - 1 -\n                  (maxPosBuf.get(b, dyR, dyC, d) as number);\n              const curPos = wR * effectiveFilterWidth + wC;\n\n              const mask = maxPos === curPos ? 1 : 0;\n              if (mask === 0) {\n                continue;\n              }\n\n              const pixel = dyBuf.get(b, dyR, dyC, d);\n              dotProd += pixel * mask;\n            }\n          }\n          dx.set(dotProd, b, dxR, dxC, d);\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const maxPoolGradConfig: KernelConfig = {\n  kernelName: MaxPoolGrad,\n  backendName: 'cpu',\n  kernelFunc: maxPoolGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {MaxPoolWithArgmax, MaxPoolWithArgmaxAttrs, MaxPoolWithArgmaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, TypedArray} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {maxPoolWithArgmaxImpl} from './MaxPoolWithArgmax_impl';\n\nexport const maxPoolWithArgmaxConfig: KernelConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MaxPoolWithArgmaxInputs;\n    const {filterSize, strides, pad, includeBatchInIndex} =\n        attrs as {} as MaxPoolWithArgmaxAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n    assertNotComplex(x, 'MaxPoolWithArgmax');\n\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const convInfo = backend_util.computePool2DInfo(\n        x.shape as [number, number, number, number], filterSize, strides,\n        [1, 1], pad);\n    const [pooled, indexes] = maxPoolWithArgmaxImpl(\n        values, x.shape, x.dtype, includeBatchInIndex, convInfo);\n\n    const pooledDataId =\n        cpuBackend.write(pooled as Float32Array, convInfo.outShape, x.dtype);\n    const indexesDataId =\n        cpuBackend.write(indexes as Int32Array, convInfo.outShape, x.dtype);\n    return [\n      {dataId: pooledDataId, shape: convInfo.outShape, dtype: x.dtype},\n      {dataId: indexesDataId, shape: convInfo.outShape, dtype: 'int32'}\n    ];\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {maxPoolPositions, pool} from '../utils/pool_utils';\nexport function maxPoolWithArgmaxImpl(\n    xValues: TypedArray, xShape: number[], dtype: DataType,\n    includeBatchInIndex: boolean, convInfo: backend_util.Conv2DInfo) {\n  const strides = util.computeStrides(xShape);\n  const maxPools = pool(xValues, xShape, dtype, strides, convInfo, 'max');\n  const maxPositions = maxPoolPositions(\n      xValues, xShape, dtype, convInfo, true, includeBatchInIndex);\n\n  return [maxPools.values, maxPositions.values];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Sum, SumAttrs, SumInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {zeros} from '../utils/zeros_impl';\nimport {cast} from './Cast';\nimport {identity} from './Identity';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function sum(\n    args: {inputs: SumInputs, backend: MathBackendCPU, attrs: SumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'sum');\n\n  let $x;\n  if (x.dtype === 'bool') {\n    $x = cast({inputs: {x}, backend, attrs: {dtype: 'int32'}});\n  } else {\n    $x = identity({inputs: {x}, backend});\n  }\n\n  const xRank = $x.shape.length;\n  const axes = util.parseAxisParam(axis, $x.shape);\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n\n  let reductionAxes = axes;\n  let permutedX = $x;\n  if (permutation != null) {\n    permutedX =\n        transpose({inputs: {x: $x}, backend, attrs: {perm: permutation}});\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims(\n      'sum', reductionAxes, permutedX.shape.length);\n\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, reductionAxes);\n  const resultDtype = backend_util.upcastType(permutedX.dtype, 'int32');\n  let result = zeros(backend, outShape, resultDtype);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = backend.data.get(result.dataId).values as TypedArray;\n\n  const aVals = backend.data.get(permutedX.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let sum = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      sum += aVals[offset + j];\n    }\n    vals[i] = sum;\n  }\n\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(result.shape, axes);\n    const oldResult = result;\n    result = reshape({inputs: {x: result}, backend, attrs: {shape: newShape}});\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n\n  backend.disposeIntermediateTensorInfo($x);\n\n  if (permutation != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return result;\n}\n\nexport const sumConfig: KernelConfig = {\n  kernelName: Sum,\n  backendName: 'cpu',\n  kernelFunc: sum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Mean, MeanAttrs, MeanInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {cast} from './Cast';\nimport {div} from './RealDiv';\nimport {sum} from './Sum';\n\nexport function mean(\n    args: {inputs: MeanInputs, backend: MathBackendCPU, attrs: MeanAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const axes = util.parseAxisParam(axis, x.shape);\n  const shapes = backend_util.computeOutAndReduceShapes(x.shape, axes);\n  const reduceShape = shapes[1];\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const toDispose = [];\n  const reduceSizeScalar =\n      backend.makeTensorInfo([], 'float32', new Float32Array([reduceSize]));\n  toDispose.push(reduceSizeScalar);\n\n  const $x = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n  toDispose.push($x);\n\n  const res =\n      div({inputs: {a: $x, b: reduceSizeScalar}, backend}) as TensorInfo;\n  toDispose.push(res);\n\n  const result = sum({inputs: {x: res}, backend, attrs: {axis, keepDims}});\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const meanConfig: KernelConfig = {\n  kernelName: Mean,\n  backendName: 'cpu',\n  kernelFunc: mean as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Min, MinAttrs, MinInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function min(\n    args: {inputs: MinInputs, backend: MathBackendCPU, attrs: MinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'min');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('min', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let min = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (value < min) {\n        min = value;\n      }\n    }\n    vals[i] = min;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const minConfig: KernelConfig = {\n  kernelName: Min,\n  backendName: 'cpu',\n  kernelFunc: min as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, MirrorPad, MirrorPadAttrs, MirrorPadInputs, NumericDataType, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function mirrorPad(args: {\n  inputs: MirrorPadInputs,\n  backend: MathBackendCPU,\n  attrs: MirrorPadAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {paddings, mode} = attrs;\n\n  assertNotComplex(x, 'mirrorPad');\n\n  const outShape = paddings.map(\n      (p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n\n  const start = paddings.map(p => p[0]);\n  const end = paddings.map((p, i) => p[0] + x.shape[i]);\n  const offset = mode === 'reflect' ? 0 : 1;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xRank = x.shape.length;\n  const xStrides = util.computeStrides(x.shape);\n\n  const resultSize = util.sizeFromShape(outShape);\n  const resultRank = outShape.length;\n  const resultStrides = util.computeStrides(outShape);\n  const resVals =\n      util.getTypedArrayFromDType(x.dtype as NumericDataType, resultSize);\n\n  for (let i = 0; i < resultSize; i++) {\n    let coords = util.indexToLoc(i, resultRank, resultStrides);\n    for (let i = 0; i < resultRank; i++) {\n      if (coords[i] < start[i]) {\n        coords[i] = start[i] * 2 - coords[i] - offset;\n      } else if (coords[i] >= end[i]) {\n        coords[i] = (end[i] - 1) * 2 - coords[i] + offset;\n      }\n    }\n    coords = coords.map((c, i) => c - start[i]);\n\n    const inIndex = util.locToIndex(coords, xRank, xStrides);\n\n    resVals[i] = xVals[inIndex];\n  }\n\n  const outId = backend.write(resVals, outShape, x.dtype);\n\n  return {dataId: outId, shape: outShape, dtype: x.dtype};\n}\n\nexport const mirrorPadConfig: KernelConfig = {\n  kernelName: MirrorPad,\n  backendName: 'cpu',\n  kernelFunc: mirrorPad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Mod} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const modImpl = createSimpleBinaryKernelImpl(((aValue, bValue) => {\n  const rem = aValue % bValue;\n  if ((aValue < 0 && bValue < 0) || (aValue >= 0 && bValue >= 0)) {\n    return rem;\n  } else {\n    return (rem + bValue) % bValue;\n  }\n}));\n\nexport const mod = binaryKernelFunc(Mod, modImpl);\n\nexport const modConfig: KernelConfig = {\n  kernelName: Mod,\n  backendName: 'cpu',\n  kernelFunc: mod\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Softmax, SoftmaxAttrs, SoftmaxInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {exp} from './Exp';\nimport {max} from './Max';\nimport {div} from './RealDiv';\nimport {reshape} from './Reshape';\nimport {sub} from './Sub';\nimport {sum} from './Sum';\n\nexport function softmax(\n    args:\n        {inputs: SoftmaxInputs, backend: MathBackendCPU, attrs: SoftmaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {dim} = attrs;\n\n  const logitsRank = logits.shape.length;\n\n  let $dim = dim;\n  if ($dim === -1) {\n    $dim = logitsRank - 1;\n  }\n  if ($dim !== logitsRank - 1) {\n    throw Error(\n        'Softmax along a non-last dimension is not yet supported. ' +\n        `Logits was rank ${logitsRank} and dim was ${$dim}`);\n  }\n\n  const axes = util.parseAxisParam([$dim], logits.shape);\n  const maxLogit = max({\n    inputs: {x: logits},\n    backend,\n    attrs: {reductionIndices: axes, keepDims: false}\n  });\n  const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n\n  const maxLogitReshaped =\n      reshape({inputs: {x: maxLogit}, backend, attrs: {shape: expandedShape}});\n  const a =\n      sub({inputs: {a: logits, b: maxLogitReshaped}, backend}) as TensorInfo;\n  const b = exp({inputs: {x: a}, backend}) as TensorInfo;\n  const sumExp =\n      sum({inputs: {x: b}, backend, attrs: {axis: axes, keepDims: false}});\n  const sumReshaped =\n      reshape({inputs: {x: sumExp}, backend, attrs: {shape: expandedShape}});\n\n  const result = div({inputs: {a: b, b: sumReshaped}, backend}) as TensorInfo;\n\n  backend.disposeIntermediateTensorInfo(maxLogit);\n  backend.disposeIntermediateTensorInfo(maxLogitReshaped);\n  backend.disposeIntermediateTensorInfo(a);\n  backend.disposeIntermediateTensorInfo(b);\n  backend.disposeIntermediateTensorInfo(sumExp);\n  backend.disposeIntermediateTensorInfo(sumReshaped);\n\n  return result;\n}\n\nexport const softmaxConfig: KernelConfig = {\n  kernelName: Softmax,\n  backendName: 'cpu',\n  kernelFunc: softmax as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Multinomial, MultinomialAttrs, MultinomialInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\nimport * as seedrandom from 'seedrandom';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {softmax} from './Softmax';\n\nexport function multinomial(args: {\n  inputs: MultinomialInputs,\n  backend: MathBackendCPU,\n  attrs: MultinomialAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {numSamples, seed, normalized} = attrs;\n\n  assertNotComplex(logits, 'multinomial');\n\n  const probabilities = normalized ?\n      logits :\n      softmax({inputs: {logits}, backend, attrs: {dim: -1}});\n\n  const batchSize = probabilities.shape[0];\n  const numEvents = probabilities.shape[1];\n  const probVals = backend.data.get(probabilities.dataId).values as TypedArray;\n  const resShape = [batchSize, numSamples];\n  const resVals =\n      util.makeZerosTypedArray(util.sizeFromShape(resShape), 'int32');\n\n  for (let b = 0; b < batchSize; ++b) {\n    const offset = b * numEvents;\n    // The cdf won't include the last event. It will be implicit if no other\n    // event happened.\n    const cdf = new Float32Array(numEvents - 1);\n    cdf[0] = probVals[offset];\n    for (let event = 1; event < cdf.length; ++event) {\n      cdf[event] = cdf[event - 1] + probVals[offset + event];\n    }\n\n    const random = seedrandom.alea(seed.toString());\n    const outOffset = b * numSamples;\n    for (let sampleId = 0; sampleId < numSamples; ++sampleId) {\n      const r = random();\n\n      // Assume last event happened by default.\n      resVals[outOffset + sampleId] = cdf.length;\n\n      for (let event = 0; event < cdf.length; event++) {\n        if (r < cdf[event]) {\n          resVals[outOffset + sampleId] = event;\n          break;\n        }\n      }\n    }\n  }\n\n  if (!normalized) {\n    backend.disposeIntermediateTensorInfo(probabilities);\n  }\n\n  return backend.makeTensorInfo(resShape, 'int32', resVals);\n}\n\nexport const multinomialConfig: KernelConfig = {\n  kernelName: Multinomial,\n  backendName: 'cpu',\n  kernelFunc: multinomial as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV3, NonMaxSuppressionV3Attrs, NonMaxSuppressionV3Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV3Impl = kernel_impls.nonMaxSuppressionV3Impl;\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV3(args: {\n  inputs: NonMaxSuppressionV3Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV3Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold} = attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppression');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const {selectedIndices} = nonMaxSuppressionV3Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n\n  return backend.makeTensorInfo(\n      [selectedIndices.length], 'int32', new Int32Array(selectedIndices));\n}\n\nexport const nonMaxSuppressionV3Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV3,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV3 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV4, NonMaxSuppressionV4Attrs, NonMaxSuppressionV4Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV4Impl = kernel_impls.nonMaxSuppressionV4Impl;\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV4(args: {\n  inputs: NonMaxSuppressionV4Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV4Attrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize} =\n      attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppressionPadded');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const {selectedIndices, validOutputs} = nonMaxSuppressionV4Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold,\n      padToMaxOutputSize);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo([], 'int32', new Int32Array([validOutputs]))\n  ];\n}\nexport const nonMaxSuppressionV4Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV4,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV4 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV5, NonMaxSuppressionV5Attrs, NonMaxSuppressionV5Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV5Impl = kernel_impls.nonMaxSuppressionV5Impl;\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV5(args: {\n  inputs: NonMaxSuppressionV5Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV5Attrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma} = attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppressionWithScore');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const maxOutputSizeVal = maxOutputSize;\n  const iouThresholdVal = iouThreshold;\n  const scoreThresholdVal = scoreThreshold;\n  const softNmsSigmaVal = softNmsSigma;\n\n  const {selectedIndices, selectedScores} = nonMaxSuppressionV5Impl(\n      boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal,\n      scoreThresholdVal, softNmsSigmaVal);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo(\n        [selectedScores.length], 'float32', new Float32Array(selectedScores))\n  ];\n}\n\nexport const nonMaxSuppressionV5Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV5 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OneHot, OneHotAttrs, OneHotInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function oneHot(\n    args: {inputs: OneHotInputs, backend: MathBackendCPU, attrs: OneHotAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices} = inputs;\n  const {depth, onValue, offValue} = attrs;\n\n  assertNotComplex(indices, 'oneHot');\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const res = new Float32Array(indicesSize * depth);\n  res.fill(offValue);\n  const indicesVal = backend.data.get(indices.dataId).values as TypedArray;\n\n  for (let event = 0; event < indicesSize; ++event) {\n    if (indicesVal[event] >= 0 && indicesVal[event] < depth) {\n      res[event * depth + indicesVal[event]] = onValue;\n    }\n  }\n\n  return backend.makeTensorInfo([...indices.shape, depth], 'int32', res);\n}\n\nexport const oneHotConfig: KernelConfig = {\n  kernelName: OneHot,\n  backendName: 'cpu',\n  kernelFunc: oneHot as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, ZerosLike, ZerosLikeInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\n\nexport function zerosLike(\n    args: {inputs: ZerosLikeInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('zerosLike is not supported for string tensors');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = zerosLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    return fill({backend, attrs: {shape: x.shape, value: 0, dtype: x.dtype}});\n  }\n}\n\nexport const zerosLikeConfig: KernelConfig = {\n  kernelName: ZerosLike,\n  backendName: 'cpu',\n  kernelFunc: zerosLike as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OnesLike, OnesLikeInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {zerosLike} from './ZerosLike';\n\nexport function onesLike(\n    args: {inputs: OnesLikeInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('onesLike is not supported for string tensors');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = onesLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    return fill({backend, attrs: {shape: x.shape, value: 1, dtype: x.dtype}});\n  }\n}\n\nexport const onesLikeConfig: KernelConfig = {\n  kernelName: OnesLike,\n  backendName: 'cpu',\n  kernelFunc: onesLike as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Pack, PackAttrs, PackInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {concat} from './Concat';\nimport {expandDims} from './ExpandDims';\n\nexport function pack(\n    args: {inputs: PackInputs, backend: MathBackendCPU, attrs: PackAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  if (inputs.length === 1) {\n    return expandDims(\n        {inputs: {input: inputs[0]}, backend, attrs: {dim: axis}});\n  }\n\n  const shape = inputs[0].shape;\n  const dtype = inputs[0].dtype;\n\n  inputs.forEach(t => {\n    util.assertShapesMatch(\n        shape, t.shape,\n        'All tensors passed to stack must have matching shapes');\n    util.assert(\n        dtype === t.dtype,\n        () => 'All tensors passed to stack must have matching dtypes');\n  });\n\n  const intermediateTensorInfos: TensorInfo[] = [];\n  const expandedTensors = inputs.map(t => {\n    const expandedT =\n        expandDims({inputs: {input: t}, backend, attrs: {dim: axis}});\n    intermediateTensorInfos.push(expandedT);\n    return expandedT;\n  });\n\n  const result = concat({inputs: expandedTensors, backend, attrs: {axis}});\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const packConfig: KernelConfig = {\n  kernelName: Pack,\n  backendName: 'cpu',\n  kernelFunc: pack as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, PadV2, PadV2Attrs, PadV2Inputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function padV2(\n    args: {inputs: PadV2Inputs, backend: MathBackendCPU, attrs: PadV2Attrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {paddings, constantValue} = attrs;\n\n  assertNotComplex(x, 'pad');\n\n  const outShape = paddings.map(\n      (p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n\n  const start = paddings.map(p => p[0]);\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xSize = util.sizeFromShape(x.shape);\n  const xRank = x.shape.length;\n  const xStrides = util.computeStrides(x.shape);\n\n  const resultSize = util.sizeFromShape(outShape);\n  const resultRank = outShape.length;\n  const resultStrides = util.computeStrides(outShape);\n  const resVals =\n      util.getTypedArrayFromDType(x.dtype as NumericDataType, resultSize);\n\n  if (constantValue !== 0) {\n    resVals.fill(constantValue);\n  }\n\n  for (let i = 0; i < xSize; i++) {\n    const coords = util.indexToLoc(i, xRank, xStrides);\n    const outCoords = coords.map((c, i) => c + start[i]);\n    const outIndex = util.locToIndex(outCoords, resultRank, resultStrides);\n\n    resVals[outIndex] = xVals[i];\n  }\n\n  const outId = backend.write(resVals, outShape, x.dtype);\n\n  return {dataId: outId, shape: outShape, dtype: x.dtype};\n}\n\nexport const padV2Config: KernelConfig = {\n  kernelName: PadV2,\n  backendName: 'cpu',\n  kernelFunc: padV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Pow} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const powImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => Math.pow(a, b));\nexport const pow = binaryKernelFunc(Pow, powImpl);\n\nexport const powConfig: KernelConfig = {\n  kernelName: Pow,\n  backendName: 'cpu',\n  kernelFunc: pow\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Range, RangeAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {rangeImpl} from './Range_impl';\n\nexport function range(args: {backend: MathBackendCPU, attrs: RangeAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {start, stop, dtype, step} = attrs;\n\n  const values = rangeImpl(start, stop, step, dtype);\n  return backend.makeTensorInfo([values.length], dtype, values);\n}\n\nexport const rangeConfig: KernelConfig = {\n  kernelName: Range,\n  backendName: 'cpu',\n  kernelFunc: range as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Reciprocal} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const reciprocal = unaryKernelFunc(Reciprocal, (xi) => 1 / xi);\n\nexport const reciprocalConfig: KernelConfig = {\n  kernelName: Reciprocal,\n  backendName: 'cpu',\n  kernelFunc: reciprocal,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinear, ResizeBilinearAttrs, ResizeBilinearInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeBilinear(args: {\n  inputs: ResizeBilinearInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeBilinearAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  assertNotComplex(images, 'resizeBilinear');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const [newHeight, newWidth] = size;\n\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const xValues = backend.data.get(images.dataId).values as TypedArray;\n  const result = new Float32Array(\n      util.sizeFromShape([batch, newHeight, newWidth, numChannels]));\n\n  const effectiveInputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n    (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n  ];\n\n  const effectiveOutputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n    (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n  ];\n  let outputIdx = 0;\n  const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n  const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n  for (let b = 0; b < batch; b++) {\n    for (let r = 0; r < newHeight; r++) {\n      let sourceFracRow: number;\n      if (halfPixelCenters) {\n        sourceFracRow = effectiveRowSizeRatio * (r + 0.5) - 0.5;\n      } else {\n        sourceFracRow = effectiveRowSizeRatio * r;\n      }\n\n      const sourceRowFloor = Math.max(0, Math.floor(sourceFracRow));\n      const rowFrac = sourceFracRow - sourceRowFloor;\n      const sourceRowCeil = Math.min(oldHeight - 1, Math.ceil(sourceFracRow));\n      const topRowOffset =\n          b * imagesStrides[0] + sourceRowFloor * imagesStrides[1];\n      const botRowOffset =\n          b * imagesStrides[0] + sourceRowCeil * imagesStrides[1];\n      for (let c = 0; c < newWidth; c++) {\n        let sourceFracCol: number;\n        if (halfPixelCenters) {\n          sourceFracCol = effectiveColSizeRatio * (c + 0.5) - 0.5;\n        } else {\n          sourceFracCol = effectiveColSizeRatio * c;\n        }\n        const sourceColFloor = Math.max(0, Math.floor(sourceFracCol));\n        const colFrac = sourceFracCol - sourceColFloor;\n        const sourceColCeil = Math.min(oldWidth - 1, Math.ceil(sourceFracCol));\n        const topLeftOffest = topRowOffset + sourceColFloor * imagesStrides[2];\n        const botLeftOffset = botRowOffset + sourceColFloor * imagesStrides[2];\n        const topRightOffset = topRowOffset + sourceColCeil * imagesStrides[2];\n        const botRightOffest = botRowOffset + sourceColCeil * imagesStrides[2];\n        for (let d = 0; d < numChannels; d++) {\n          // Begin shader.\n\n          // Compute the fractional index of the source.\n          const topLeft = xValues[topLeftOffest + d];\n          const bottomLeft = xValues[botLeftOffset + d];\n          const topRight = xValues[topRightOffset + d];\n          const bottomRight = xValues[botRightOffest + d];\n\n          const top = topLeft + (topRight - topLeft) * colFrac;\n          const bottom = bottomLeft + (bottomRight - bottomLeft) * colFrac;\n          const newValue = top + (bottom - top) * rowFrac;\n\n          result[outputIdx++] = newValue;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, newHeight, newWidth, numChannels], 'float32', result);\n}\n\nexport const resizeBilinearConfig: KernelConfig = {\n  kernelName: ResizeBilinear,\n  backendName: 'cpu',\n  kernelFunc: resizeBilinear as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinearGrad, ResizeBilinearGradAttrs, ResizeBilinearGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeBilinearGrad(args: {\n  inputs: ResizeBilinearGradInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeBilinearGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  assertNotComplex([dy, images], 'resizeBilinearGrad');\n\n  const imagesStrides = util.computeStrides(images.shape);\n\n  const [batch, xHeight, xWidth, depth] = images.shape;\n  const [, yHeight, yWidth] = dy.shape;\n\n  const output = new Float32Array(batch * xHeight * xWidth * depth);\n\n  // In the backwards pass, we want to find the pixels that were generated\n  // for each pixel in the input image the forward pass and add the\n  // corresponding coefficient from dy to the gradient (with some\n  // interpolation).\n\n  const effectiveXSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n    (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n  ];\n\n  const effectiveYSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n    (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n  ];\n\n  const heightScale = effectiveXSize[0] / effectiveYSize[0];\n  const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n  // Reference implementation\n  // tslint:disable-next-line:max-line-length\n  // https://github.com/tensorflow/tensorflow/blob/3039375c86a5bbc9610c7725dcaa95d635f87ba2/tensorflow/core/kernels/resize_bilinear_op.cc#L275\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  let offset = 0;\n  for (let b = 0; b < batch; b++) {\n    const bOffset = b * imagesStrides[0];\n    for (let r = 0; r < yHeight; r++) {\n      const dxR = r * heightScale;\n      const topDxRIndex = Math.floor(dxR);\n      const bottomDxRIndex = Math.min(Math.ceil(dxR), xHeight - 1);\n\n      const topDxROffset = bOffset + topDxRIndex * imagesStrides[1];\n      const bottomDxROffset = bOffset + bottomDxRIndex * imagesStrides[1];\n\n      const dxRLerp = dxR - topDxRIndex;\n      const inverseDxRLerp = 1.0 - dxRLerp;\n      for (let c = 0; c < yWidth; c++) {\n        const dxC = c * widthScale;\n        const leftDxCIndex = Math.floor(dxC);\n        const rightDxCIndex = Math.min(Math.ceil(dxC), xWidth - 1);\n        const dxCLerp = dxC - leftDxCIndex;\n        const inverseDxCLerp = 1.0 - dxCLerp;\n\n        const topLeftRCOffset = topDxROffset + leftDxCIndex * imagesStrides[2];\n        const topRightRCOffset =\n            topDxROffset + rightDxCIndex * imagesStrides[2];\n        const bottomLeftRCOffset =\n            bottomDxROffset + leftDxCIndex * imagesStrides[2];\n        const bottomRightRCOffset =\n            bottomDxROffset + rightDxCIndex * imagesStrides[2];\n\n        const inverseDxRLerpTimesInverseDxCLerp =\n            inverseDxRLerp * inverseDxCLerp;\n        const inverseDxRLerpTimesDxCLerp = inverseDxRLerp * dxCLerp;\n        const dxRLerpTimesInverseDxCLerp = dxRLerp * inverseDxCLerp;\n        const dxRLerpTimesDxCLerp = dxRLerp * dxCLerp;\n        for (let d = 0; d < depth; d++) {\n          const dyVal = dyValues[offset++];\n          output[topLeftRCOffset + d] +=\n              dyVal * inverseDxRLerpTimesInverseDxCLerp;\n          output[topRightRCOffset + d] += dyVal * inverseDxRLerpTimesDxCLerp;\n          output[bottomLeftRCOffset + d] += dyVal * dxRLerpTimesInverseDxCLerp;\n          output[bottomRightRCOffset + d] += dyVal * dxRLerpTimesDxCLerp;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, xWidth, xHeight, depth], 'float32', output);\n}\n\nexport const resizeBilinearGradConfig: KernelConfig = {\n  kernelName: ResizeBilinearGrad,\n  backendName: 'cpu',\n  kernelFunc: resizeBilinearGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighbor, ResizeNearestNeighborAttrs, ResizeNearestNeighborInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeNearestNeighbor(args: {\n  inputs: ResizeNearestNeighborInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeNearestNeighborAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  assertNotComplex(images, 'resizeNearestNeighbor');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const [newHeight, newWidth] = size;\n\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const xValues = backend.data.get(images.dataId).values as TypedArray;\n  const output = new Float32Array(batch * newHeight * newWidth * numChannels);\n\n  const effectiveInputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n    (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n  ];\n\n  const effectiveOutputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n    (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n  ];\n\n  const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n  const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n\n  let outputOffset = 0;\n  for (let b = 0; b < batch; b++) {\n    const batchOffset = b * imagesStrides[0];\n    for (let r = 0; r < newHeight; r++) {\n      const sourceFracRow = halfPixelCenters ?\n          effectiveRowSizeRatio * (r + 0.5) :\n          effectiveRowSizeRatio * r;\n      let sourceNearestRow = Math.min(\n          oldHeight - 1,\n          alignCorners ? Math.round(sourceFracRow) : Math.floor(sourceFracRow));\n      if (halfPixelCenters) {\n        sourceNearestRow = Math.max(0, sourceNearestRow);\n      }\n      const rowOffset = batchOffset + sourceNearestRow * imagesStrides[1];\n      for (let c = 0; c < newWidth; c++) {\n        const sourceFracCol = halfPixelCenters ?\n            effectiveColSizeRatio * (c + 0.5) :\n            effectiveColSizeRatio * c;\n        let sourceNearestCol = Math.min(\n            oldWidth - 1,\n            alignCorners ? Math.round(sourceFracCol) :\n                           Math.floor(sourceFracCol));\n        if (halfPixelCenters) {\n          sourceNearestCol = Math.max(0, sourceNearestCol);\n        }\n        const colOffset = rowOffset + sourceNearestCol * imagesStrides[2];\n        for (let d = 0; d < numChannels; d++) {\n          // Begin shader.\n          // Compute the fractional index of the source.\n          const newVal = xValues[colOffset + d];\n          output[outputOffset++] = newVal;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, newHeight, newWidth, numChannels], images.dtype, output);\n}\n\nexport const resizeNearestNeighborConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighbor,\n  backendName: 'cpu',\n  kernelFunc: resizeNearestNeighbor as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighborGrad, ResizeNearestNeighborGradAttrs, ResizeNearestNeighborGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeNearestNeighborGrad(args: {\n  inputs: ResizeNearestNeighborGradInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeNearestNeighborGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  assertNotComplex([dy, images], 'resizeNearestNeighborGrad');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n  const [batch, xHeight, xWidth, depth] = images.shape;\n  const [, yHeight, yWidth] = dy.shape;\n\n  const output = new Float32Array(batch * xHeight * xWidth * depth);\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n\n  // In the backwards pass, we want to find the pixels that were generated\n  // for each pixel in the input image the forward pass\n\n  const effectiveXSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n    (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n  ];\n\n  const effectiveYSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n    (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n  ];\n\n  const heightScale = effectiveXSize[0] / effectiveYSize[0];\n  const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n  const invHeightScale = 1 / heightScale;\n  const invWidthScale = 1 / widthScale;\n\n  // This defines the size of the window of values around a particular\n  // index in dy that we want to search for contributions to dx.\n  const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n  const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n  // Loop over the output space.\n  for (let b = 0; b < batch; b++) {\n    const batchOffset = b * imagesStrides[0];\n    for (let r = 0; r < xHeight; r++) {\n      const rowOffset = batchOffset + r * imagesStrides[1];\n\n      // Compute bounds for where in dy we will look\n      const startRLerp = Math.floor(r * invHeightScale);\n      const startDyR = Math.floor(startRLerp - (winHeight / 2));\n      for (let c = 0; c < xWidth; c++) {\n        const colOffset = rowOffset + c * imagesStrides[2];\n\n        // Compute bounds for where in dy we will look\n        const startCLerp = Math.floor(c * invWidthScale);\n        const startDyC = Math.floor(startCLerp - (winWidth / 2));\n\n        for (let d = 0; d < depth; d++) {\n          let accum = 0;\n          // loop over dy\n\n          for (let dyRIndex = 0; dyRIndex < winHeight; dyRIndex++) {\n            const dyR = dyRIndex + startDyR;\n            // Guard against the window exceeding the bounds of dy\n            if (dyR < 0 || dyR >= yHeight) {\n              continue;\n            }\n\n            const dyROffset = batchOffset + dyR * dyStrides[1];\n            const sourceFracRow = dyR * heightScale;\n            const sourceNearestRow = Math.min(\n                xHeight - 1,\n                alignCorners ? Math.round(sourceFracRow) :\n                               Math.floor(sourceFracRow));\n            if (r !== sourceNearestRow) {\n              continue;\n            }\n            for (let dyCIndex = 0; dyCIndex < winWidth; dyCIndex++) {\n              const dyC = dyCIndex + startDyC;\n              // Guard against the window exceeding the bounds of dy\n              if (dyC < 0 || dyC >= yWidth) {\n                continue;\n              }\n\n              const dyCOffset = dyROffset + dyC * dyStrides[2];\n              const sourceFracCol = dyC * widthScale;\n              const sourceNearestCol = Math.min(\n                  xWidth - 1,\n                  alignCorners ? Math.round(sourceFracCol) :\n                                 Math.floor(sourceFracCol));\n\n              if (c === sourceNearestCol) {\n                accum += dyValues[dyCOffset + d];\n              }\n            }\n          }\n          output[colOffset + d] = accum;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(images.shape, images.dtype, output);\n}\n\nexport const resizeNearestNeighborGradConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighborGrad,\n  backendName: 'cpu',\n  kernelFunc: resizeNearestNeighborGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reverse, ReverseAttrs, ReverseInputs, TensorBuffer, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {identity} from './Identity';\n\nexport function reverse(\n    args:\n        {inputs: ReverseInputs, backend: MathBackendCPU, attrs: ReverseAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dims} = attrs;\n\n  assertNotComplex(x, 'reverse');\n\n  const xRank = x.shape.length;\n\n  const $dims = util.parseAxisParam(dims, x.shape);\n  if (xRank === 0) {\n    return identity({inputs: {x}, backend});\n  }\n\n  const outBuf = new TensorBuffer(x.shape, x.dtype);\n  const xBuf = backend.bufferSync(x);\n\n  for (let i = 0; i < outBuf.size; i++) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.slice();\n    $dims.forEach(d => inLoc[d] = x.shape[d] - 1 - inLoc[d]);\n    outBuf.set(xBuf.get(...inLoc), ...outLoc);\n  }\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const reverseConfig: KernelConfig = {\n  kernelName: Reverse,\n  backendName: 'cpu',\n  kernelFunc: reverse as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {backend_util, RotateWithOffset, RotateWithOffsetAttrs, RotateWithOffsetInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const rotateWithOffsetConfig: KernelConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as RotateWithOffsetInputs;\n    const {radians, fillValue, center} = attrs as {} as RotateWithOffsetAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const output = util.getTypedArrayFromDType(\n        image.dtype as NumericDataType, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n\n    const [centerX, centerY] =\n        backend_util.getImageCenter(center, imageHeight, imageWidth);\n    const fullOpacityValue = 255;\n\n    const sinFactor = Math.sin(radians);\n    const cosFactor = Math.cos(radians);\n    const imageVals = cpuBackend.data.get(image.dataId).values as TypedArray;\n\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coords = [batch, row, col, channel];\n\n            const x = coords[2];\n            const y = coords[1];\n\n            // coordX/coordY are the result of rotating and translating x/y.\n            let coordX = (x - centerX) * cosFactor - (y - centerY) * sinFactor;\n            let coordY = (x - centerX) * sinFactor + (y - centerY) * cosFactor;\n            coordX = Math.round(coordX + centerX);\n            coordY = Math.round(coordY + centerY);\n\n            let outputValue = fillValue;\n            if (typeof fillValue !== 'number') {\n              if (channel === 3) {\n                outputValue = fullOpacityValue;\n              } else {\n                outputValue = fillValue[channel];\n              }\n            }\n\n            // If the coordinate position falls within the image boundaries...\n            if (coordX >= 0 && coordX < imageWidth && coordY >= 0 &&\n                coordY < imageHeight) {\n              // set the output to the image value at the coordinate position.\n              const rotatedRowOffset = coordY * (imageWidth * numChannels);\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx =\n                  batchOffset + rotatedRowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n            output[outIdx] = outputValue as number;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {dataId, shape: image.shape, dtype: image.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Round} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const round = unaryKernelFunc(Round, (xi) => {\n  // The algorithm is based on banker's rounding.\n  const base = Math.floor(xi);\n  if (xi - base < 0.5) {\n    return Math.floor(xi);\n  } else if (xi - base > 0.5) {\n    return Math.ceil(xi);\n  } else {\n    if (base % 2.0 === 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n});\n\nexport const roundConfig: KernelConfig = {\n  kernelName: Round,\n  backendName: 'cpu',\n  kernelFunc: round,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {buffer, Rank, ShapeMap, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function scatterImpl<R extends Rank>(\n    indices: TensorBuffer<R>, updates: TensorBuffer<R>, shape: number[],\n    outputSize: number, sliceSize: number, numUpdates: number,\n    sliceRank: number, strides: number[], defaultValue: number,\n    sumDupeIndices: boolean): TensorBuffer<R> {\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  const indicesData = indices.values as TypedArray;\n  const updatesData = updates.values as TypedArray;\n\n  if (outputSize === 0) {\n    return buffer(shape as ShapeMap[R], updates.dtype);\n  }\n\n  const outBuf = buffer(flattenShape, updates.dtype);\n  (outBuf.values as TypedArray).fill(defaultValue);\n\n  for (let i = 0; i < numUpdates; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      index.push(dim);\n      flattenIndex += dim * strides[j];\n    }\n\n    if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {\n      throw new Error(`Invalid indices: ${index} does not index into ${shape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      if (sumDupeIndices) {\n        outBuf.values[flattenIndex * sliceSize + k] +=\n            updatesData[i * sliceSize + k];\n      } else {\n        outBuf.values[flattenIndex * sliceSize + k] = updates.rank === 0 ?\n            updatesData[0] :\n            updatesData[i * sliceSize + k];\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, ScatterNd, ScatterNdAttrs, ScatterNdInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {scatterImpl} from './Scatter_impl';\n\nexport function scatterNd(args: {\n  inputs: ScatterNdInputs,\n  backend: MathBackendCPU,\n  attrs: ScatterNdAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices, updates} = inputs;\n  const {shape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(updates, indices, shape);\n  const sumDupeIndices = true;\n\n  const indicesBuf = backend.bufferSync(indices);\n  const updatesBuf = backend.bufferSync(updates);\n\n  const outBuf = scatterImpl(\n      indicesBuf, updatesBuf, shape, outputSize, sliceSize, numUpdates,\n      sliceRank, strides, 0 /* defaultValue */, sumDupeIndices);\n\n  return backend.makeTensorInfo(shape, outBuf.dtype, outBuf.values);\n}\n\nexport const scatterNdConfig: KernelConfig = {\n  kernelName: ScatterNd,\n  backendName: 'cpu',\n  kernelFunc: scatterNd as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Select, SelectInputs, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function select(args: {inputs: SelectInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {condition, t, e} = inputs;\n\n  assertNotComplex([condition, t, e], 'select');\n  const conditionRank = condition.shape.length;\n\n  const values = backend.data.get(condition.dataId).values as TypedArray;\n  const tValues = backend.data.get(t.dataId).values as TypedArray;\n  const eValues = backend.data.get(e.dataId).values as TypedArray;\n  const resultDtype = upcastType(t.dtype, e.dtype);\n  const newValues =\n      util.makeZerosTypedArray(util.sizeFromShape(t.shape), resultDtype);\n\n  let index = 0;\n  const offset =\n      conditionRank === 0 || conditionRank > 1 || t.shape.length === 1 ?\n      1 :\n      util.sizeFromShape(t.shape.slice(1));\n\n  for (let i = 0; i < values.length; i++) {\n    for (let j = 0; j < offset; j++) {\n      if (values[i] === 1) {\n        newValues[index++] = tValues[i];\n      } else {\n        newValues[index++] = eValues[i];\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(t.shape, resultDtype, newValues);\n}\n\nexport const selectConfig: KernelConfig = {\n  kernelName: Select,\n  backendName: 'cpu',\n  kernelFunc: select as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Selu} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nconst scaleAlpha = backend_util.SELU_SCALEALPHA;\nconst scale = backend_util.SELU_SCALE;\n\nexport const selu = unaryKernelFunc(Selu, (xi) => {\n  if (xi >= 0) {\n    return scale * xi;\n  } else {\n    return scaleAlpha * (Math.exp(xi) - 1);\n  }\n});\n\nexport const seluConfig: KernelConfig = {\n  kernelName: Selu,\n  backendName: 'cpu',\n  kernelFunc: selu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sigmoid} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sigmoid =\n    unaryKernelFunc(Sigmoid, (xi) => 1 / (1 + Math.exp(-xi)));\n\nexport const sigmoidConfig: KernelConfig = {\n  kernelName: Sigmoid,\n  backendName: 'cpu',\n  kernelFunc: sigmoid,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sign} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sign = unaryKernelFunc(Sign, (xi) => {\n  if (xi < 0) {\n    return -1;\n  } else if (xi > 0) {\n    return 1;\n  } else {\n    return 0;\n  }\n});\n\nexport const signConfig: KernelConfig = {\n  kernelName: Sign,\n  backendName: 'cpu',\n  kernelFunc: sign,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sin} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sin = unaryKernelFunc(Sin, (xi) => Math.sin(xi));\n\nexport const sinConfig: KernelConfig = {\n  kernelName: Sin,\n  backendName: 'cpu',\n  kernelFunc: sin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sinh} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sinh = unaryKernelFunc(Sinh, (xi) => Math.sinh(xi));\n\nexport const sinhConfig: KernelConfig = {\n  kernelName: Sinh,\n  backendName: 'cpu',\n  kernelFunc: sinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Softplus} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\n// mirrors the implementation of tf.nn.softplus: https://goo.gl/vkcvwX\n\n// epsilon is the difference between 1.0 and the next representable float.\n// For a single precision 32 bit float this should be 2^-23, see:\n// https://math.byu.edu/~schow/work/IEEEFloatingPoint.htm\nconst epsilon = 1.1920928955078125e-7;\nconst threshold = Math.log(epsilon) + 2.0;\n\nexport const softplus = unaryKernelFunc(Softplus, (xi) => {\n  // Value above which exp(x) may overflow, but softplus(x) == x\n  // is within machine epsilon.\n  const tooLarge = xi > -threshold;\n\n  // Value below which exp(x) may underflow, but softplus(x) == exp(x)\n  // is within machine epsilon.\n  const tooSmall = xi < threshold;\n\n  const expX = Math.exp(xi);\n  let result;\n\n  if (tooSmall) {\n    result = expX;\n  } else if (tooLarge) {\n    result = xi;\n  } else {\n    result = Math.log(1.0 + expX);\n  }\n  return result;\n});\n\nexport const softplusConfig: KernelConfig = {\n  kernelName: Softplus,\n  backendName: 'cpu',\n  kernelFunc: softplus,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, ReshapeAttrs, ReshapeInputs, SpaceToBatchND, SpaceToBatchNDAttrs, SpaceToBatchNDInputs, TensorInfo, TransposeAttrs, TransposeInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {padV2Config} from './PadV2';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function spaceToBatchND(args: {\n  inputs: SpaceToBatchNDInputs,\n  backend: MathBackendCPU,\n  attrs: SpaceToBatchNDAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, paddings} = attrs;\n\n  assertNotComplex([x], 'spaceToBatchND');\n\n  const prod = util.sizeFromShape(blockShape);\n\n  const completePaddings: Array<[number, number]> = [[0, 0]];\n  completePaddings.push(...(paddings as Array<[number, number]>));\n\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n\n  const paddedX = padV2Config.kernelFunc({\n    inputs: {x},\n    backend,\n    attrs: {paddings: completePaddings, constantValue: 0}\n  }) as TensorInfo;\n\n  const reshapedPaddedShape =\n      backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(\n      reshapedPaddedShape.length, blockShape.length, false);\n\n  const flattenShape =\n      backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n\n  const reshapeInputs: ReshapeInputs = {x: paddedX};\n  const reshapeAttrs: ReshapeAttrs = {shape: reshapedPaddedShape};\n  const paddedXReshaped =\n      reshape({inputs: reshapeInputs, backend, attrs: reshapeAttrs});\n\n  const transposeInputs: TransposeInputs = {x: paddedXReshaped};\n  const transposeAttrs:\n      TransposeAttrs = {perm: permutedReshapedPaddedPermutation};\n  const paddedXT =\n      transpose({inputs: transposeInputs, backend, attrs: transposeAttrs});\n\n  const resultReshapeInputs: ReshapeInputs = {x: paddedXT};\n  const resultReshapeAttrs: ReshapeAttrs = {shape: flattenShape};\n  const result = reshape(\n      {inputs: resultReshapeInputs, backend, attrs: resultReshapeAttrs});\n\n  backend.disposeIntermediateTensorInfo(paddedX);\n  backend.disposeIntermediateTensorInfo(paddedXReshaped);\n  backend.disposeIntermediateTensorInfo(paddedXT);\n\n  return result;\n}\n\nexport const spaceToBatchNDConfig: KernelConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'cpu',\n  kernelFunc: spaceToBatchND as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SparseToDense, SparseToDenseAttrs, SparseToDenseInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {scatterImpl} from './Scatter_impl';\n\nexport function sparseToDense(args: {\n  inputs: SparseToDenseInputs,\n  backend: MathBackendCPU,\n  attrs: SparseToDenseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sparseIndices, sparseValues, defaultValue} = inputs;\n  const {outputShape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n  const sumDupeIndices = false;\n\n  const indicesBuf = backend.bufferSync(sparseIndices);\n  const updatesBuf = backend.bufferSync(sparseValues);\n  const $defaultValue =\n      backend.data.get(defaultValue.dataId).values[0] as number;\n\n  const outBuf = scatterImpl(\n      indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates,\n      sliceRank, strides, $defaultValue, sumDupeIndices);\n\n  return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n}\n\nexport const sparseToDenseConfig: KernelConfig = {\n  kernelName: SparseToDense,\n  backendName: 'cpu',\n  kernelFunc: sparseToDense as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, SplitVAttrs, SplitVInputs} from '@tensorflow/tfjs-core';\nimport {KernelConfig, KernelFunc, SplitV, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {slice} from './Slice';\n\nexport function splitV(\n    args: {inputs: SplitVInputs, backend: MathBackendCPU, attrs: SplitVAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {numOrSizeSplits, axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, x.shape)[0];\n  const splitSizes = backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n\n  const begin = new Array(x.shape.length).fill(0);\n  const size = x.shape.slice();\n  return splitSizes.map(s => {\n    const sliceSize = [...size];\n    sliceSize[$axis] = s;\n    const sliceT =\n        slice({inputs: {x}, backend, attrs: {begin, size: sliceSize}});\n    begin[$axis] += s;\n    return sliceT;\n  });\n}\n\nexport const splitVConfig: KernelConfig = {\n  kernelName: SplitV,\n  backendName: 'cpu',\n  kernelFunc: splitV as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sqrt} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sqrt = unaryKernelFunc(Sqrt, (xi) => Math.sqrt(xi));\n\nexport const sqrtConfig: KernelConfig = {\n  kernelName: Sqrt,\n  backendName: 'cpu',\n  kernelFunc: sqrt,\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Square, SquareInputs} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport const squareConfig: KernelConfig = {\n  kernelName: Square,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend}) => {\n    const {x} = inputs as SquareInputs;\n    const cpuBackend = backend as MathBackendCPU;\n    assertNotComplex(x, 'square');\n\n    const values = cpuBackend.data.get(x.dataId).values as Float32Array;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      newValues[i] = value * value;\n    }\n    const dataId = cpuBackend.write(newValues, x.shape, x.dtype);\n    return {dataId, shape: x.shape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Step, StepAttrs} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const step = unaryKernelFunc(Step, (xi, attrs) => {\n  const stepAttrs = attrs as {} as StepAttrs;\n  if (isNaN(xi)) {\n    return NaN;\n  } else {\n    return xi > 0 ? 1 : stepAttrs.alpha;\n  }\n});\n\nexport const stepConfig: KernelConfig = {\n  kernelName: Step,\n  backendName: 'cpu',\n  kernelFunc: step,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, slice_util, StridedSlice, StridedSliceAttrs, StridedSliceInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {stridedSliceImpl} from './StridedSlice_impl';\n\nexport function stridedSlice(args: {\n  inputs: StridedSliceInputs,\n  backend: MathBackendCPU,\n  attrs: StridedSliceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {\n    begin,\n    end,\n    strides,\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  } = attrs;\n\n  assertNotComplex(x, 'stridedSlice');\n\n  const {nonStrided, $begin, $strides, size, newShape, outShape} =\n      slice_util.sliceInfo(\n          x.shape, begin, end, strides, beginMask, endMask, ellipsisMask,\n          newAxisMask, shrinkAxisMask);\n\n  const $x = reshape({inputs: {x}, backend, attrs: {shape: newShape}});\n\n  let result;\n  if (nonStrided) {\n    const sliced =\n        slice({inputs: {x: $x}, backend, attrs: {begin: $begin, size}});\n    result = reshape({inputs: {x: sliced}, backend, attrs: {shape: outShape}});\n\n    backend.disposeIntermediateTensorInfo(sliced);\n  } else if (outShape.some(axis => axis === 0)) {\n    result = backend.makeTensorInfo(outShape, x.dtype, []);\n  } else {\n    const xBuf = backend.bufferSync($x);\n    const outBuf = stridedSliceImpl(outShape, xBuf, $strides, $begin);\n\n    result = backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n  }\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: outShape}});\n\n  backend.disposeIntermediateTensorInfo($x);\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const stridedSliceConfig: KernelConfig = {\n  kernelName: StridedSlice,\n  backendName: 'cpu',\n  kernelFunc: stridedSlice as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tan} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const tan = unaryKernelFunc(Tan, (xi) => Math.tan(xi));\n\nexport const tanConfig: KernelConfig = {\n  kernelName: Tan,\n  backendName: 'cpu',\n  kernelFunc: tan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tanh} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const tanh = unaryKernelFunc(Tanh, (xi) => Math.tanh(xi));\n\nexport const tanhConfig: KernelConfig = {\n  kernelName: Tanh,\n  backendName: 'cpu',\n  kernelFunc: tanh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Tile, TileAttrs, TileInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {tileImpl} from './Tile_impl';\n\nexport function tile(\n    args: {inputs: TileInputs, backend: MathBackendCPU, attrs: TileAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reps} = attrs;\n\n  assertNotComplex(x, 'tile');\n  const outBuf = tileImpl(backend.bufferSync(x), reps);\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const tileConfig: KernelConfig = {\n  kernelName: Tile,\n  backendName: 'cpu',\n  kernelFunc: tile as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, TensorInfo, TopK, TopKAttrs, TopKInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {topKImpl} from './TopK_impl';\n\nexport function topK(\n    args: {inputs: TopKInputs, backend: MathBackendCPU, attrs: TopKAttrs}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {k, sorted} = attrs;\n\n  assertNotComplex(x, 'topk');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const [allTopKVals, allTopKIndices] =\n      topKImpl(xVals, x.shape, x.dtype as NumericDataType, k, sorted);\n\n  return [\n    backend.makeTensorInfo(\n        allTopKVals.shape, allTopKVals.dtype, allTopKVals.values),\n    backend.makeTensorInfo(\n        allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)\n  ];\n}\n\nexport const topKConfig: KernelConfig = {\n  kernelName: TopK,\n  backendName: 'cpu',\n  kernelFunc: topK as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unique, UniqueAttrs, UniqueInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {uniqueImpl} from './Unique_impl';\n\nexport function unique(\n    args: {inputs: UniqueInputs, attrs: UniqueAttrs, backend: MathBackendCPU}):\n    TensorInfo[] {\n  const {inputs, attrs, backend} = args;\n  const {axis} = attrs;\n  const {x} = inputs;\n  assertNotComplex(x, 'unique');\n\n  const values = backend.data.get(x.dataId).values;\n  const {outputValues, outputShape, indices} =\n      uniqueImpl(values, axis, x.shape, x.dtype);\n  return [\n    backend.makeTensorInfo(outputShape, x.dtype, outputValues),\n    backend.makeTensorInfo([indices.length], 'int32', indices),\n  ];\n}\n\nexport const uniqueConfig: KernelConfig = {\n  kernelName: Unique,\n  backendName: 'cpu',\n  kernelFunc: unique as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unpack, UnpackAttrs, UnpackInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nexport function unpack(\n    args: {inputs: UnpackInputs, backend: MathBackendCPU, attrs: UnpackAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {value} = inputs;\n  let {axis} = attrs;\n\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n\n  const valueRank = value.shape.length;\n\n  const num = value.shape[axis];\n  const outShape: number[] = new Array(valueRank - 1);\n  let outIndex = 0;\n  for (let i = 0; i < valueRank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = value.shape[i];\n    }\n  }\n\n  const begin = new Array(valueRank).fill(0);\n  const size = value.shape.slice();\n  size[axis] = 1;\n  const res = new Array(num);\n  for (let i = 0; i < res.length; i++) {\n    begin[axis] = i;\n    const tempRes = slice({inputs: {x: value}, backend, attrs: {begin, size}});\n    res[i] = reshape({inputs: {x: tempRes}, backend, attrs: {shape: outShape}});\n    backend.disposeIntermediateTensorInfo(tempRes);\n  }\n\n  return res;\n}\n\nexport const unpackConfig: KernelConfig = {\n  kernelName: Unpack,\n  backendName: 'cpu',\n  kernelFunc: unpack as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, UnsortedSegmentSum, UnsortedSegmentSumAttrs, UnsortedSegmentSumInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {cast} from './Cast';\nimport {equal} from './Equal';\nimport {expandDims} from './ExpandDims';\nimport {multiply} from './Multiply';\nimport {pack} from './Pack';\nimport {sum} from './Sum';\n\nexport function unsortedSegmentSum(args: {\n  inputs: UnsortedSegmentSumInputs,\n  backend: MathBackendCPU,\n  attrs: UnsortedSegmentSumAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, segmentIds} = inputs;\n  const {numSegments} = attrs;\n\n  assertNotComplex(x, 'unsortedSegmentSum');\n\n  const xRank = x.shape.length;\n  const segmentIdsRank = segmentIds.shape.length;\n  const res = [];\n  const intermediates: TensorInfo[] = [];\n\n  // Reshape the segment id's so that they can be broadcast with\n  // x. The new shape should be [segmentIds.shape, 1, ..., 1]\n  const numIters = xRank - segmentIdsRank;\n  let $segmentIds = segmentIds;\n\n  for (let i = 0; i < numIters; ++i) {\n    const expanded = expandDims(\n        {inputs: {input: $segmentIds}, backend, attrs: {dim: i + 1}});\n    $segmentIds = expanded;\n    intermediates.push(expanded);\n  }\n\n  for (let i = 0; i < numSegments; ++i) {\n    const scalarValue = util.createScalarValue(i as {} as 'int32', 'int32');\n    const segmentId = backend.makeTensorInfo([], 'int32', scalarValue);\n    const mask =\n        equal({inputs: {a: segmentId, b: $segmentIds}, backend}) as TensorInfo;\n    const maskCasted =\n        cast({inputs: {x: mask}, backend, attrs: {dtype: 'float32'}});\n    const mul =\n        multiply({inputs: {a: maskCasted, b: x}, backend}) as TensorInfo;\n    const sumTensorInfo =\n        sum({inputs: {x: mul}, backend, attrs: {axis: 0, keepDims: false}});\n    res.push(sumTensorInfo);\n    intermediates.push(segmentId);\n    intermediates.push(mask);\n    intermediates.push(maskCasted);\n    intermediates.push(mul);\n    intermediates.push(sumTensorInfo);\n  }\n\n  const result = pack({inputs: res, backend, attrs: {axis: 0}});\n\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const unsortedSegmentSumConfig: KernelConfig = {\n  kernelName: UnsortedSegmentSum,\n  backendName: 'cpu',\n  kernelFunc: unsortedSegmentSum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// We explicitly import the modular kernels so they get registered in the\n// global registry when we compile the library. A modular build would replace\n// the contents of this file and import only the kernels that are needed.\nimport {KernelConfig, registerKernel} from '@tensorflow/tfjs-core';\n\nimport {_fusedMatMulConfig} from './kernels/_FusedMatMul';\nimport {absConfig} from './kernels/Abs';\nimport {acosConfig} from './kernels/Acos';\nimport {acoshConfig} from './kernels/Acosh';\nimport {addConfig} from './kernels/Add';\nimport {addNConfig} from './kernels/AddN';\nimport {allConfig} from './kernels/All';\nimport {anyConfig} from './kernels/Any';\nimport {argMaxConfig} from './kernels/ArgMax';\nimport {argMinConfig} from './kernels/ArgMin';\nimport {asinConfig} from './kernels/Asin';\nimport {asinhConfig} from './kernels/Asinh';\nimport {atanConfig} from './kernels/Atan';\nimport {atan2Config} from './kernels/Atan2';\nimport {atanhConfig} from './kernels/Atanh';\nimport {avgPoolConfig} from './kernels/AvgPool';\nimport {avgPool3DConfig} from './kernels/AvgPool3D';\nimport {avgPool3DGradConfig} from './kernels/AvgPool3DGrad';\nimport {avgPoolGradConfig} from './kernels/AvgPoolGrad';\nimport {batchMatMulConfig} from './kernels/BatchMatMul';\nimport {batchNormConfig} from './kernels/BatchNorm';\nimport {batchToSpaceNDConfig} from './kernels/BatchToSpaceND';\nimport {bincountConfig} from './kernels/Bincount';\nimport {castConfig} from './kernels/Cast';\nimport {ceilConfig} from './kernels/Ceil';\nimport {clipConfig} from './kernels/Clip';\nimport {complexConfig} from './kernels/Complex';\nimport {complexAbsConfig} from './kernels/ComplexAbs';\nimport {concatConfig} from './kernels/Concat';\nimport {conv2DConfig} from './kernels/Conv2D';\nimport {conv2DBackpropFilterConfig} from './kernels/Conv2DBackpropFilter';\nimport {conv2DBackpropInputConfig} from './kernels/Conv2DBackpropInput';\nimport {conv3DConfig} from './kernels/Conv3D';\nimport {conv3DBackpropFilterV2Config} from './kernels/Conv3DBackpropFilterV2';\nimport {conv3DBackpropInputV2Config} from './kernels/Conv3DBackpropInputV2';\nimport {cosConfig} from './kernels/Cos';\nimport {coshConfig} from './kernels/Cosh';\nimport {cropAndResizeConfig} from './kernels/CropAndResize';\nimport {cumsumConfig} from './kernels/Cumsum';\nimport {denseBincountConfig} from './kernels/DenseBincount';\nimport {depthToSpaceConfig} from './kernels/DepthToSpace';\nimport {depthwiseConv2dNativeConfig} from './kernels/DepthwiseConv2dNative';\nimport {depthwiseConv2dNativeBackpropFilterConfig} from './kernels/DepthwiseConv2dNativeBackpropFilter';\nimport {depthwiseConv2dNativeBackpropInputConfig} from './kernels/DepthwiseConv2dNativeBackpropInput';\nimport {diagConfig} from './kernels/Diag';\nimport {dilation2dConfig} from './kernels/Dilation2D';\nimport {dilation2dBackpropFilterConfig} from './kernels/Dilation2DBackpropFilter';\nimport {dilation2dBackpropInputConfig} from './kernels/Dilation2DBackpropInput';\nimport {eluConfig} from './kernels/Elu';\nimport {eluGradConfig} from './kernels/EluGrad';\nimport {equalConfig} from './kernels/Equal';\nimport {erfConfig} from './kernels/Erf';\nimport {expConfig} from './kernels/Exp';\nimport {expandDimsConfig} from './kernels/ExpandDims';\nimport {expm1Config} from './kernels/Expm1';\nimport {fftConfig} from './kernels/FFT';\nimport {fillConfig} from './kernels/Fill';\nimport {flipLeftRightConfig} from './kernels/FlipLeftRight';\nimport {floorConfig} from './kernels/Floor';\nimport {floorDivConfig} from './kernels/FloorDiv';\nimport {fusedConv2DConfig} from './kernels/FusedConv2D';\nimport {fusedDepthwiseConv2DConfig} from './kernels/FusedDepthwiseConv2D';\nimport {gatherNdConfig} from './kernels/GatherNd';\nimport {gatherV2Config} from './kernels/GatherV2';\nimport {greaterConfig} from './kernels/Greater';\nimport {greaterEqualConfig} from './kernels/GreaterEqual';\nimport {identityConfig} from './kernels/Identity';\nimport {ifftConfig} from './kernels/IFFT';\nimport {imagConfig} from './kernels/Imag';\nimport {isFiniteConfig} from './kernels/IsFinite';\nimport {isInfConfig} from './kernels/IsInf';\nimport {isNaNConfig} from './kernels/IsNaN';\nimport {leakyReluConfig} from './kernels/LeakyRelu';\nimport {lessConfig} from './kernels/Less';\nimport {lessEqualConfig} from './kernels/LessEqual';\nimport {linSpaceConfig} from './kernels/LinSpace';\nimport {logConfig} from './kernels/Log';\nimport {log1pConfig} from './kernels/Log1p';\nimport {logicalAndConfig} from './kernels/LogicalAnd';\nimport {logicalNotConfig} from './kernels/LogicalNot';\nimport {logicalOrConfig} from './kernels/LogicalOr';\nimport {lRNConfig} from './kernels/LRN';\nimport {lRNGradConfig} from './kernels/LRNGrad';\nimport {maxConfig} from './kernels/Max';\nimport {maximumConfig} from './kernels/Maximum';\nimport {maxPoolConfig} from './kernels/MaxPool';\nimport {maxPool3DConfig} from './kernels/MaxPool3D';\nimport {maxPool3DGradConfig} from './kernels/MaxPool3DGrad';\nimport {maxPoolGradConfig} from './kernels/MaxPoolGrad';\nimport {maxPoolWithArgmaxConfig} from './kernels/MaxPoolWithArgmax';\nimport {meanConfig} from './kernels/Mean';\nimport {minConfig} from './kernels/Min';\nimport {minimumConfig} from './kernels/Minimum';\nimport {mirrorPadConfig} from './kernels/MirrorPad';\nimport {modConfig} from './kernels/Mod';\nimport {multinomialConfig} from './kernels/Multinomial';\nimport {multiplyConfig} from './kernels/Multiply';\nimport {negConfig} from './kernels/Neg';\nimport {nonMaxSuppressionV3Config} from './kernels/NonMaxSuppressionV3';\nimport {nonMaxSuppressionV4Config} from './kernels/NonMaxSuppressionV4';\nimport {nonMaxSuppressionV5Config} from './kernels/NonMaxSuppressionV5';\nimport {notEqualConfig} from './kernels/NotEqual';\nimport {oneHotConfig} from './kernels/OneHot';\nimport {onesLikeConfig} from './kernels/OnesLike';\nimport {packConfig} from './kernels/Pack';\nimport {padV2Config} from './kernels/PadV2';\nimport {powConfig} from './kernels/Pow';\nimport {preluConfig} from './kernels/Prelu';\nimport {prodConfig} from './kernels/Prod';\nimport {rangeConfig} from './kernels/Range';\nimport {realConfig} from './kernels/Real';\nimport {realDivConfig} from './kernels/RealDiv';\nimport {reciprocalConfig} from './kernels/Reciprocal';\nimport {reluConfig} from './kernels/Relu';\nimport {relu6Config} from './kernels/Relu6';\nimport {reshapeConfig} from './kernels/Reshape';\nimport {resizeBilinearConfig} from './kernels/ResizeBilinear';\nimport {resizeBilinearGradConfig} from './kernels/ResizeBilinearGrad';\nimport {resizeNearestNeighborConfig} from './kernels/ResizeNearestNeighbor';\nimport {resizeNearestNeighborGradConfig} from './kernels/ResizeNearestNeighborGrad';\nimport {reverseConfig} from './kernels/Reverse';\nimport {rotateWithOffsetConfig} from './kernels/RotateWithOffset';\nimport {roundConfig} from './kernels/Round';\nimport {rsqrtConfig} from './kernels/Rsqrt';\nimport {scatterNdConfig} from './kernels/ScatterNd';\nimport {selectConfig} from './kernels/Select';\nimport {seluConfig} from './kernels/Selu';\nimport {sigmoidConfig} from './kernels/Sigmoid';\nimport {signConfig} from './kernels/Sign';\nimport {sinConfig} from './kernels/Sin';\nimport {sinhConfig} from './kernels/Sinh';\nimport {sliceConfig} from './kernels/Slice';\nimport {softmaxConfig} from './kernels/Softmax';\nimport {softplusConfig} from './kernels/Softplus';\nimport {spaceToBatchNDConfig} from './kernels/SpaceToBatchND';\nimport {sparseToDenseConfig} from './kernels/SparseToDense';\nimport {splitVConfig} from './kernels/SplitV';\nimport {sqrtConfig} from './kernels/Sqrt';\nimport {squareConfig} from './kernels/Square';\nimport {squaredDifferenceConfig} from './kernels/SquaredDifference';\nimport {stepConfig} from './kernels/Step';\nimport {stridedSliceConfig} from './kernels/StridedSlice';\nimport {subConfig} from './kernels/Sub';\nimport {sumConfig} from './kernels/Sum';\nimport {tanConfig} from './kernels/Tan';\nimport {tanhConfig} from './kernels/Tanh';\nimport {tileConfig} from './kernels/Tile';\nimport {topKConfig} from './kernels/TopK';\nimport {transposeConfig} from './kernels/Transpose';\nimport {uniqueConfig} from './kernels/Unique';\nimport {unpackConfig} from './kernels/Unpack';\nimport {unsortedSegmentSumConfig} from './kernels/UnsortedSegmentSum';\nimport {zerosLikeConfig} from './kernels/ZerosLike';\n\n// List all kernel configs here\nconst kernelConfigs: KernelConfig[] = [\n  _fusedMatMulConfig,\n  absConfig,\n  acosConfig,\n  acoshConfig,\n  addConfig,\n  addNConfig,\n  allConfig,\n  anyConfig,\n  argMaxConfig,\n  argMinConfig,\n  asinConfig,\n  asinhConfig,\n  atanConfig,\n  atan2Config,\n  atanhConfig,\n  avgPoolConfig,\n  avgPool3DConfig,\n  avgPool3DGradConfig,\n  avgPoolGradConfig,\n  batchMatMulConfig,\n  batchNormConfig,\n  batchToSpaceNDConfig,\n  bincountConfig,\n  castConfig,\n  ceilConfig,\n  clipConfig,\n  complexConfig,\n  complexAbsConfig,\n  concatConfig,\n  conv2DBackpropFilterConfig,\n  conv2DBackpropInputConfig,\n  conv2DConfig,\n  conv3DBackpropFilterV2Config,\n  conv3DBackpropInputV2Config,\n  conv3DConfig,\n  cosConfig,\n  coshConfig,\n  cropAndResizeConfig,\n  cumsumConfig,\n  denseBincountConfig,\n  depthToSpaceConfig,\n  depthwiseConv2dNativeConfig,\n  depthwiseConv2dNativeBackpropFilterConfig,\n  depthwiseConv2dNativeBackpropInputConfig,\n  diagConfig,\n  dilation2dConfig,\n  dilation2dBackpropInputConfig,\n  dilation2dBackpropFilterConfig,\n  realDivConfig,\n  eluConfig,\n  eluGradConfig,\n  equalConfig,\n  erfConfig,\n  expConfig,\n  expandDimsConfig,\n  expm1Config,\n  fftConfig,\n  fillConfig,\n  flipLeftRightConfig,\n  floorConfig,\n  floorDivConfig,\n  fusedConv2DConfig,\n  fusedDepthwiseConv2DConfig,\n  gatherNdConfig,\n  gatherV2Config,\n  greaterConfig,\n  greaterEqualConfig,\n  identityConfig,\n  ifftConfig,\n  imagConfig,\n  isFiniteConfig,\n  isInfConfig,\n  isNaNConfig,\n  leakyReluConfig,\n  lessConfig,\n  lessEqualConfig,\n  linSpaceConfig,\n  logConfig,\n  log1pConfig,\n  logicalAndConfig,\n  logicalNotConfig,\n  logicalOrConfig,\n  lRNConfig,\n  lRNGradConfig,\n  maximumConfig,\n  maxPoolConfig,\n  maxPool3DConfig,\n  maxPool3DGradConfig,\n  maxPoolGradConfig,\n  maxPoolWithArgmaxConfig,\n  maxConfig,\n  meanConfig,\n  minConfig,\n  minimumConfig,\n  mirrorPadConfig,\n  modConfig,\n  multinomialConfig,\n  multiplyConfig,\n  negConfig,\n  nonMaxSuppressionV3Config,\n  nonMaxSuppressionV4Config,\n  nonMaxSuppressionV5Config,\n  notEqualConfig,\n  oneHotConfig,\n  onesLikeConfig,\n  packConfig,\n  padV2Config,\n  powConfig,\n  preluConfig,\n  prodConfig,\n  rangeConfig,\n  realConfig,\n  reciprocalConfig,\n  reluConfig,\n  relu6Config,\n  reshapeConfig,\n  resizeBilinearConfig,\n  resizeBilinearGradConfig,\n  resizeNearestNeighborConfig,\n  resizeNearestNeighborGradConfig,\n  reverseConfig,\n  rotateWithOffsetConfig,\n  roundConfig,\n  rsqrtConfig,\n  scatterNdConfig,\n  selectConfig,\n  seluConfig,\n  sigmoidConfig,\n  signConfig,\n  sinConfig,\n  sinhConfig,\n  sliceConfig,\n  softmaxConfig,\n  softplusConfig,\n  spaceToBatchNDConfig,\n  sparseToDenseConfig,\n  splitVConfig,\n  sqrtConfig,\n  squareConfig,\n  squaredDifferenceConfig,\n  stepConfig,\n  stridedSliceConfig,\n  subConfig,\n  sumConfig,\n  tanConfig,\n  tanhConfig,\n  tileConfig,\n  topKConfig,\n  transposeConfig,\n  uniqueConfig,\n  unpackConfig,\n  unsortedSegmentSumConfig,\n  zerosLikeConfig\n];\n\nfor (const kernelConfig of kernelConfigs) {\n  registerKernel(kernelConfig);\n}\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '2.8.1';\nexport {version};\n"],"names":["assertNotComplex","tensor","opName","Array","isArray","forEach","t","util","assert","dtype","whereImpl","kernel_impls","MathBackendCPU","KernelBackend","[object Object]","super","this","data","DataStorage","engine","values","shape","firstUse","env","get","backend_util","warn","dataId","set","refCount","outId","length","isString","encodedValues","map","d","encodeString","write","has","numDataIds","readSync","complexTensorInfos","realValues","real","imagValues","imag","mergeRealAndImagArrays","decodedData","decodeString","Error","buffer","makeTensorFromDataId","disposeData","delete","tensorInfo","tensorData","f","start","now","kernelMs","unreliable","reasons","condition","condVals","epsilon","simpleAbsImpl","vals","resultValues","Float32Array","i","Math","abs","absConfig","kernelName","Abs","backendName","kernelFunc","args","x","inputs","cpuBackend","backend","sizeFromShape","makeOutput","createSimpleBinaryKernelImpl","op","aShape","bShape","aVals","bVals","newShape","assertAndGetBroadcastShape","resultRank","resultStrides","computeStrides","resultSize","result","getTypedArrayFromDType","aRank","bRank","aStrides","bStrides","aBroadcastDims","getBroadcastDims","bBroadcastDims","loc","indexToLoc","aLoc","slice","aIndex","locToIndex","bLoc","bIndex","complex","realVals","imagVals","complexInfo","makeTensorInfo","complexConfig","Complex","zeros","makeZerosTypedArray","identity","incRef","identityConfig","Identity","input","realVal","realConfig","Real","cast","attrs","zerosTensorInfo","floatX","disposeIntermediateTensorInfo","realPart","hasEncodingLoss","Int32Array","from","xVals","zero","toTypedArray","resultData","resultShape","a","b","castConfig","Cast","binaryKernelFunc","name","simpleImpl","complexImpl","$dtype","$aComplex","$aComplexVals","aReal","aImag","aRealVals","aImagVals","$bComplex","$bComplexVals","bReal","bImag","bRealVals","bImagVals","resultRealData","resultImagData","resultReal","resultImag","createComplexBinaryKernelImpl","resultRealVals","resultImagVals","aIdx","bIdx","opResult","addImpl","addComplexImpl","add","Add","addConfig","bincountImpl","weightsVals","weightsDtype","weightsShape","size","weightsSize","outVals","value","bincountReduceImpl","xBuf","weightsBuf","binaryOutput","numRows","numCols","outBuf","j","createSimpleUnaryImpl","newValues","unaryKernelFunc","xSize","getArrayFromDType","unaryKernelFuncFromImpl","unaryImpl","ceilImpl","xi","ceil","Ceil","ceilConfig","expImpl","exp","Exp","expConfig","expm1Impl","expm1","Expm1","expm1Config","floorImpl","floor","Floor","floorConfig","gatherV2Impl","indicesBuf","flattenOutputShape","originalLoc","batchIdx","indicesIdx","indicesIndex","originalIndex","greaterImpl","greater","Greater","greaterConfig","lessImpl","less","Less","lessConfig","linSpaceImpl","stop","num","step","logImpl","log","Log","logConfig","maxImpl","reduceSize","outShape","offset","max","maximumImpl","aValue","bValue","maximum","Maximum","maximumConfig","minimumImpl","min","minimum","Minimum","minimumConfig","multiplyImpl","multiplyComplexImpl","multiply","Multiply","multiplyConfig","negImpl","xShape","xDtype","minusOne","createScalarValue","negConfig","Neg","res","notEqualImpl","notEqual","NotEqual","notEqualConfig","transposeImpl","perm","xRank","xStrides","newStrides","newLoc","transpose","transposeConfig","Transpose","prodImpl","reductionAxes","reduceShape","computeOutAndReduceShapes","outDtype","upcastType","prod","prodConfig","Prod","axis","keepDims","axes","parseAxisParam","permutation","getAxesPermutation","permutedX","intermediateTensorInfos","push","getInnerMostAxes","expandShapeToKeepDim","rangeImpl","numElements","rsqrtImpl","sqrt","rsqrt","Rsqrt","rsqrtConfig","sliceImpl","begin","isContinous","slice_util","isSliceContinous","flatOffset","computeFlatOffset","subarray","fromUint8ToStringArray","inBuf","outLoc","inLoc","idx","fromStringArrayToUint8","$begin","$size","parseSliceParams","assertParamsValid","sliceConfig","Slice","squaredDifferenceImpl","diff","squaredDifference","SquaredDifference","squaredDifferenceConfig","stridedSliceImpl","strides","subImpl","subComplexImpl","sub","Sub","subConfig","tileImpl","reps","rank","topKImpl","k","sorted","lastDim","batch","allTopKVals","allTopKIndices","valAndInd","index","sort","outOffset","topKVals","topKIndices","outputShape","uniqueImpl","$axis","uniqueElements","indices","inputBuffer","TensorBuffer","uniqueIndices","is1DTensor","element","toString","axisValues","m","n","join","undefined","uniqueIndex","Object","keys","outputTmpShape","outputBuffer","uniqueElementIndex","outputValues","elu","Elu","eluConfig","leakyRelu","alpha","leakyReluConfig","LeakyRelu","preluImpl","xValue","prelu","preluConfig","Prelu","relu","Relu","reluConfig","relu6","Relu6","relu6Config","applyActivation","activation","preluActivationWeights","leakyreluAlpha","reshape","$shape","inferFromImplicitShape","$xSize","xData","reshapeConfig","Reshape","batchMatMul","transposeA","transposeB","innerShapeA","innerShapeB","outerShapeA","outerShapeB","outerDimsA","outerDimsB","batchDimA","batchDimB","batchDimsCompatible","concat","b3dShape","a3d","b3d","sharedDim","leftDim","rightDim","batchDim","a3dValues","b3dValues","a3dStrides","b3dStrides","aBatch","aOuterStep","aInnerStep","bInnerStep","bOuterStep","bBatch","resVals","blockSize","bi","i0","j0","k0","iBlock","jBlock","kBlock","sum","batchOffsetA","batchOffsetB","batchMatMulConfig","BatchMatMul","_fusedMatMulConfig","_FusedMatMul","bias","current","addRes","activationRes","intermediates","acos","Acos","acosConfig","acosh","Acosh","acoshConfig","addNConfig","AddN","tensors","currVals","allConfig","All","origAxes","permutedAxes","$x","assertAxesAreInnerMostDims","all","reshapedResult","anyConfig","Any","anyVal","argMaxConfig","ArgMax","outSize","maxIndex","argMinConfig","ArgMin","minIndex","asin","Asin","asinConfig","asinh","Asinh","asinhConfig","atan","Atan","atanConfig","atan2Impl","atan2","Atan2","atan2Config","atanh","Atanh","atanhConfig","pool","xValues","convInfo","poolType","strideHeight","strideWidth","dilationHeight","dilationWidth","effectiveFilterHeight","effectiveFilterWidth","padTop","padInfo","top","padLeft","left","initialValue","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","output","outputVals","outputBatchStrides","outputRowStrides","outputColStrides","batchSize","outputBatchOffset","inputBatchOffset","inChannels","yR","outHeight","xRCorner","xRMin","xRMax","inHeight","outputRowOffset","yC","outWidth","xCCorner","xCMin","xCMax","inWidth","minMaxValue","avgValue","count","xR","xROffset","xC","pixel","isNaN","maxPoolPositions","flattenPositions","includeBatchInIndex","maxPositions","maxValue","maxPosition","wR","wC","pool3d","strideDepth","dilationDepth","effectiveFilterDepth","padFront","front","outputDepthStrides","channel","yDepth","outDepth","xDepthCorner","xDepthMin","xDepthMax","inDepth","outputDepthOffset","yRow","xRowCorner","xRowMin","xRowMax","yCol","xColCorner","xColMin","xColMax","outputColOffset","xDepth","xDepthOffset","xRow","xRowOffset","xCol","avgPoolConfig","AvgPool","filterSize","pad","dimRoundingMode","eitherStridesOrDilationsAreOne","computePool2DInfo","filterWidth","filterHeight","arraysEqual","inShape","avgPool3DConfig","AvgPool3D","dataFormat","dilations","$dilations","computePool3DInfo","avgPool3DGradConfig","AvgPool3DGrad","dy","filterDepth","dx","avgMultiplier","dyBuf","bufferSync","dxDepth","dxRow","dxCol","dyDepthCorner","dyRowCorner","dyColCorner","dotProd","wDepth","dyDepth","wRow","dyRow","wCol","dyCol","avgPoolGradConfig","AvgPoolGrad","dyData","dxR","dxC","dyRCorner","dyCCorner","dyR","dyC","batchNormConfig","FusedBatchNorm","scale","mean","variance","varianceEpsilon","mVals","varVals","sVals","offVals","offValsLength","sValsLength","varValsLength","mValsLength","offi","mi","si","vi","batchToSpaceNDConfig","BatchToSpaceND","blockShape","crops","reduce","reshaped","getReshaped","permuted","getPermuted","reshapedPermuted","getReshapedPermuted","sliceBeginCoords","getSliceBeginCoords","sliceSize","getSliceSize","xReshaped","xTransposed","xTransposedReshaped","bincountConfig","Bincount","weights","clip","ClipByValue","clipAttrs","clipValueMax","clipValueMin","clipConfig","complexAbsConfig","ComplexAbs","complexVals","hypot","imagVal","imagConfig","Imag","computeOutShape","$inputs","filter","shapes","assertParamsConsistent","reals","imags","realConcated","imagConcated","r","inputs2D","innerSize","val","colOffset","tVals","tIdx","row","resIdx","col","finalOutShape","outInfo","concatConfig","Concat","conv2D","$dataFormat","convertConv2DDataFormat","computeConv2DInfo","isChannelsLast","y","filterStrides","xBatchStride","xRowStride","xColStride","xChannelStride","yBatchStride","yRowStride","yColStride","yChannelStride","wVals","yVals","xOffset1","yOffset1","yOffset2","wOffset1","xOffset2","yOffset3","xOffset3","wOffset3","d1","xVal","d2","outChannels","conv2DConfig","Conv2D","conv2DBackpropFilterConfig","Conv2DBackpropFilter","filterShape","dW","leftPad","topPad","dyVals","yRMin","yRMax","yCMin","yCMax","conv2DBackpropInputConfig","Conv2DBackpropInput","inputShape","dyStrides","dxValues","dyValues","fltValues","fltS0","fltS1","fltS2","dyOffset","fltOffset","conv3DConfig","Conv3D","computeConv3DInfo","yF","xFCorner","wF","xF","wOffset2","yOffset4","xOffset4","wOffset4","conv3DBackpropFilterV2Config","Conv3DBackpropFilterV2","dw","dwValues","dwS0","dwS1","dwS2","dwS3","dyS0","dyS1","dyS2","dyS3","xS0","xS1","xS2","xS3","frontPad","yFMin","yFMax","conv3DBackpropInputV2Config","Conv3DBackpropInputV2","dxS0","dxS1","dxS2","dxS3","fltS3","xFMin","cos","Cos","cosConfig","cosh","Cosh","coshConfig","cropAndResizeConfig","CropAndResize","image","boxes","boxInd","cropSize","method","extrapolationValue","imageHeight","imageWidth","numChannels","numBoxes","cropHeight","cropWidth","boxVals","boxIndVals","imageVals","inStride","outStride","startInd","y1","x1","y2","x2","bInd","heightScale","widthScale","yInd","c","ind","topInd","bottomInd","yLerp","xInd","leftInd","rightInd","xLerp","topLeft","topRight","bottomLeft","bottom","closestX","round","closestY","inInd","outInd","cumsumConfig","Cumsum","exclusive","reverse","permutedAxis","resultDtype","finalDim","indexAdjuster","prevIdx","reverseTransposedResult","getUndoAxesPermutation","denseBincountConfig","DenseBincount","depthToSpaceConfig","DepthToSpace","inputHeight","inputWidth","inputDepth","outputHeight","outputWidth","outputDepth","outputIdx","h","inH","offsetH","w","inW","offsetD","inputIdx","depthwiseConv2dNative","chMul","q","depthwiseConv2dNativeConfig","DepthwiseConv2dNative","depthwiseConv2dNativeBackpropFilterConfig","DepthwiseConv2dNativeBackpropFilter","trunc","dm","depthwiseConv2dNativeBackpropInputConfig","DepthwiseConv2dNativeBackpropInput","diagConfig","Diag","dilation2dConfig","Dilation2D","filterVals","filterRank","computeDilation2DInfo","outRank","hOut","hBeg","wOut","wBeg","curVal","MIN_SAFE_INTEGER","hIn","wIn","xIndex","filterIndex","dilation2dBackpropFilterConfig","Dilation2DBackpropFilter","toNestedArray","$filter","$dy","gradients","makeZerosNestedTypedArray","hMax","wMax","dilation2dBackpropInputConfig","Dilation2DBackpropInput","hInMax","wInMax","eluGradConfig","EluGrad","v","equalImpl","equal","Equal","equalConfig","p","ERF_P","a1","ERF_A1","a2","ERF_A2","a3","ERF_A3","a4","ERF_A4","a5","ERF_A5","erf","Erf","sign","erfConfig","expandDims","dim","inputRank","$dim","splice","expandDimsConfig","ExpandDims","realDivImpl","div","RealDiv","realDivConfig","fftBatch","inverse","innerDim","inputVals","real2D","imag2D","fftImpl","getComplexWithIndex","$realInfo","$imagInfo","inputSize","fftRadix2","half","evenComplex","complexWithEvenIndex","evenRealVals","evenImagVals","evenShape","evenRealInfo","evenImagInfo","evenTensorInfo","oddComplex","complexWithOddIndex","oddRealVals","oddImagVals","oddShape","oddRealInfo","oddImagInfo","oddTensorInfo","$evenComplex","$evenRealVals","$evenImagVals","$evenShape","$evenRealInfo","$evenImagInfo","$evenTensorInfo","$oddComplex","$oddRealVals","$oddImagVals","$oddShape","$oddRealInfo","$oddImagInfo","$oddTensorInfo","e","exponents","eShape","eRealInfo","eImagInfo","exponentInfo","addPart","subPart","addPartReal","subPartReal","addPartImag","subPartImag","$real","$imag","$realVals","$imagVals","realInfo","imagInfo","sizeInfo","sizeInfoCopy","divRealInfo","divImagInfo","divRealVals","divImagVals","rawOutput","ret","exponent","term","assignToTypedArray","fourierTransformByMatmul","splitRealAndImagArrays","fftConfig","FFT","innerDimensionSize","input2D","resultReshaped","fill","inferDtype","fillValues","fillConfig","Fill","flipLeftRightConfig","FlipLeftRight","batchOffset","rowOffset","coordX","outIdx","outputValue","floorDivImpl","floorDiv","FloorDiv","floorDivConfig","fusedConv2DConfig","FusedConv2D","resultOld","fusedDepthwiseConv2DConfig","FusedDepthwiseConv2D","oldResult","gatherNdConfig","GatherNd","params","paramsSize","indicesShape","sliceRank","numSlices","prepareAndValidate","indicesData","paramsData","flattenIndex","gatherV2Config","GatherV2","batchDims","$batchDims","indicesSize","parsedAxis","shapeInfo","segment_util","collectGatherOpShapeInfo","flattenX","outerSize","dimSize","greaterEqualImpl","greaterEqual","GreaterEqual","greaterEqualConfig","ifftConfig","IFFT","isFinite","IsFinite","isFiniteConfig","isInf","IsInf","Infinity","isInfConfig","IsNan","isNaNConfig","lessEqualImpl","lessEqual","LessEqual","lessEqualConfig","linSpaceConfig","LinSpace","log1p","Log1p","log1pConfig","logicalAndImpl","logicalAnd","LogicalAnd","logicalAndConfig","logicalNot","LogicalNot","logicalNotConfig","logicalOrImpl","logicalOr","LogicalOr","logicalOrConfig","lRNConfig","LRN","depthRadius","beta","channels","maxD","sumAcrossChannels","currentChannel","beginSumOffset","endSumOffset","z","pow","lRNGradConfig","LRNGrad","dySize","yValues","depthBegin","depthEnd","norm","dyi","reductionIndices","maxOutShape","maxConfig","Max","maxPoolConfig","MaxPool","maxPool3DConfig","MaxPool3D","maxPool3DGradConfig","MaxPool3DGrad","maxPosBuf","maxPool3dPositions","mask","maxPoolGradConfig","MaxPoolGrad","maxPoolWithArgmaxConfig","MaxPoolWithArgmax","pooled","indexes","maxPools","maxPoolWithArgmaxImpl","pooledDataId","indexesDataId","sumConfig","Sum","meanConfig","Mean","toDispose","reduceSizeScalar","minConfig","Min","mirrorPadConfig","MirrorPad","paddings","mode","end","coords","inIndex","modImpl","rem","mod","Mod","modConfig","softmax","logits","logitsRank","maxLogit","expandedShape","maxLogitReshaped","sumExp","sumReshaped","softmaxConfig","Softmax","multinomialConfig","Multinomial","numSamples","seed","normalized","probabilities","numEvents","probVals","resShape","cdf","event","random","seedrandom.alea","sampleId","nonMaxSuppressionV3Impl","nonMaxSuppressionV3Config","NonMaxSuppressionV3","scores","maxOutputSize","iouThreshold","scoreThreshold","boxesVals","scoresVals","selectedIndices","nonMaxSuppressionV4Impl","nonMaxSuppressionV4Config","NonMaxSuppressionV4","padToMaxOutputSize","validOutputs","nonMaxSuppressionV5Impl","nonMaxSuppressionV5Config","NonMaxSuppressionV5","softNmsSigma","maxOutputSizeVal","iouThresholdVal","scoreThresholdVal","softNmsSigmaVal","selectedScores","oneHotConfig","OneHot","depth","onValue","offValue","indicesVal","zerosLike","imagPart","zerosLikeConfig","ZerosLike","onesLikeConfig","OnesLike","onesLike","pack","assertShapesMatch","expandedT","packConfig","Pack","padV2Config","PadV2","constantValue","outCoords","powImpl","Pow","powConfig","rangeConfig","Range","reciprocal","Reciprocal","reciprocalConfig","resizeBilinearConfig","ResizeBilinear","images","alignCorners","halfPixelCenters","imagesStrides","newHeight","newWidth","oldHeight","oldWidth","effectiveInputSize","effectiveOutputSize","effectiveRowSizeRatio","effectiveColSizeRatio","sourceFracRow","sourceRowFloor","rowFrac","sourceRowCeil","topRowOffset","botRowOffset","sourceFracCol","sourceColFloor","colFrac","sourceColCeil","topLeftOffest","botLeftOffset","topRightOffset","botRightOffest","newValue","resizeBilinearGradConfig","ResizeBilinearGrad","xHeight","xWidth","yHeight","yWidth","effectiveXSize","effectiveYSize","bOffset","topDxRIndex","bottomDxRIndex","topDxROffset","bottomDxROffset","dxRLerp","inverseDxRLerp","leftDxCIndex","rightDxCIndex","dxCLerp","inverseDxCLerp","topLeftRCOffset","topRightRCOffset","bottomLeftRCOffset","bottomRightRCOffset","inverseDxRLerpTimesInverseDxCLerp","inverseDxRLerpTimesDxCLerp","dxRLerpTimesInverseDxCLerp","dxRLerpTimesDxCLerp","dyVal","resizeNearestNeighborConfig","ResizeNearestNeighbor","outputOffset","sourceNearestRow","sourceNearestCol","newVal","resizeNearestNeighborGradConfig","ResizeNearestNeighborGrad","invHeightScale","invWidthScale","winHeight","winWidth","startRLerp","startDyR","startCLerp","startDyC","accum","dyRIndex","dyROffset","dyCIndex","dyCOffset","reverseConfig","Reverse","dims","$dims","rotateWithOffsetConfig","RotateWithOffset","radians","fillValue","center","centerX","centerY","getImageCenter","sinFactor","sin","cosFactor","coordY","Round","base","roundConfig","scatterImpl","updates","outputSize","numUpdates","defaultValue","sumDupeIndices","flattenShape","updatesData","scatterNdConfig","ScatterNd","calculateShapes","selectConfig","Select","conditionRank","tValues","eValues","scaleAlpha","SELU_SCALEALPHA","SELU_SCALE","selu","Selu","seluConfig","sigmoid","Sigmoid","sigmoidConfig","Sign","signConfig","Sin","sinConfig","sinh","Sinh","sinhConfig","threshold","softplus","Softplus","tooLarge","tooSmall","expX","softplusConfig","spaceToBatchNDConfig","SpaceToBatchND","completePaddings","paddedX","reshapedPaddedShape","permutedReshapedPaddedPermutation","paddedXReshaped","paddedXT","sparseToDenseConfig","SparseToDense","sparseIndices","sparseValues","splitVConfig","SplitV","numOrSizeSplits","splitSizes","prepareSplitSize","s","sliceT","Sqrt","sqrtConfig","squareConfig","Square","Step","stepAttrs","NaN","stepConfig","stridedSliceConfig","StridedSlice","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","nonStrided","$strides","sliceInfo","sliced","some","tan","Tan","tanConfig","tanh","Tanh","tanhConfig","tileConfig","Tile","topKConfig","TopK","uniqueConfig","Unique","unpackConfig","Unpack","valueRank","outIndex","tempRes","unsortedSegmentSumConfig","UnsortedSegmentSum","segmentIds","numSegments","numIters","$segmentIds","expanded","scalarValue","segmentId","maskCasted","mul","sumTensorInfo","kernelConfigs","kernelConfig","registerKernel"],"mappings":"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GACAlZ,GACAsZ,GACAI,GACAE,GACA1sB,GACA1J,EACAw2B,GACAC,GACAj2B,EACAq2B,GACAI,GACAG,GACAI,GACAC,GACAY,GACAl3B,GACA83B,GACAE,GACAE,GACAK,GACAE,GACAb,GACAuB,GACAI,GACAl5B,GACAo5B,GACAW,GACAW,GACAr6B,GACAM,GACA86B,GACAU,GACAK,GACAv7B,GACA+7B,GACAU,GACAM,GACAE,GACAM,GACAj2B,GACArG,GACAu8B,GACA5mC,EACAgnC,GACAl2B,GACAG,GACAU,GACAs1B,GACA6B,GACA4B,GACAM,GACAe,GACAI,GACAc,GACAzhC,GACAkiC,GACAG,GACAU,GACAG,GACAE,GACAE,GACAG,GACAtiC,GACAg2B,GACA6M,GACAC,GACAQ,GACAI,GACAQ,GACAC,GACA7jC,GACAkkC,GACAC,GACA5jC,GACAuzB,GACAmR,GACAG,GACAC,GACAE,GACA5oC,GACA8oC,GACAE,GACAK,GACAtN,IAGF,IAAK,MAAMmO,KAAgBD,GACzBE,iBAAeD,gDC1UD"}